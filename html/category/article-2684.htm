<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2684.htm" />
    <title>Hadoop：MR以parquet格式保存文件 - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>Hadoop：MR以parquet格式保存文件</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<div id="content_views" class="htmledit_views"> <h2>需求</h2> <p>此前公司用MR程序解析json，将结果以text file保存在hive表的目录下。随着数据量增大，text file的性能逐渐跟不上，需要修改代码将文件格式修改成parquet。</p> <h2>实现</h2> <p>以下是以parquet保存结果的demo。</p> <p>将文本中的每行以空格分隔，第一列作为id（int），第二列作为name（string），直接保存到指定目录。</p> <pre><code class="language-bash">[root@kudu1 job]# cat test.txt  1 xiaoming 2 hanmeimei 3 kangkang 4 maria 5 yokiko 6 michael</code></pre> <p>以下代码只有map程序，没有reduce。以parquet格式输出步骤为：</p> <h3>1. 创建parquet的schema信息</h3> <p>parquet的数据类型有INT64, INT32, BOOLEAN, BINARY, FLOAT, DOUBLE, INT96, FIXED_LEN_BYTE_ARRAY,其中INT64对标Java的Long；INT32对标int；BINARY对标String，但是需要指定编码格式。</p> <pre><code class="language-java">        String writeSchema = "message example {\n optional INT32 id;\n optional binary name (UTF8);\n}";</code></pre> <h3>2. 使用ExampleOutputFormat类配置parquet的schema、压缩格式、输出目录。</h3> <pre><code class="language-java">        // 配置MR的configuration         Configuration configuration = new Configuration(this.getConf());         configuration.set("mapreduce.input.fileinputformat.split.minsize","2147483648");         configuration.set("parquet.example.schema",writeSchema);</code></pre> <h3>3. 配置map的value输出格式为org.apache.parquet.example.data.Group。</h3> <p>parquet是列式存储，不同列的同一行表示为一个group。可以理解为一行就是一个group。每次map都是以group格式写入parquet文件的。</p> <pre><code class="language-java">        job.setMapOutputValueClass(Group.class);//TODO 设置value是parquet的Group</code></pre> <h3>4. 配置job的输出格式</h3> <pre><code class="language-java">        LazyOutputFormat.setOutputFormatClass(job, ExampleOutputFormat.class);         MultipleOutputs.addNamedOutput(job, "output", ExampleOutputFormat.class, NullWritable.class,Group.class);</code></pre> <h3>&nbsp;5. 在Mapper类中定义用于创建group的工厂类。</h3> <pre><code class="language-java">//map类中定义 factory属性 private SimpleGroupFactory factory;  //setup初始化方法中创建SimpleGroupFactory factory = new SimpleGroupFactory(GroupWriteSupport.getSchema(context.getConfiguration()));</code></pre> <h3>6.map方法中创建group并赋值，写出。</h3> <pre><code class="language-java">            String[] strings = value.toString().split(" ");             //TODO 创建group             Group group = factory.newGroup();             //TODO 为group赋值             group.add("id",Integer.valueOf(strings[0]));             group.add("name",strings[1]);             //TODO 写出             mos.write("output",  null, group);</code></pre> <h2>代码</h2> <p>以下为完整代码</p> <pre><code class="language-java">package com.zixuan.hadoop;  import org.apache.hadoop.conf.Configuration; import org.apache.hadoop.conf.Configured; import org.apache.hadoop.fs.FileSystem; import org.apache.hadoop.fs.Path; import org.apache.hadoop.io.LongWritable; import org.apache.hadoop.io.NullWritable; import org.apache.hadoop.io.Text; import org.apache.hadoop.mapreduce.Job; import org.apache.hadoop.mapreduce.Mapper; import org.apache.hadoop.mapreduce.lib.input.MultipleInputs; import org.apache.hadoop.mapreduce.lib.input.TextInputFormat; import org.apache.hadoop.mapreduce.lib.output.MultipleOutputs; import org.apache.hadoop.mapreduce.lib.output.LazyOutputFormat; import org.apache.hadoop.util.Tool; import org.apache.hadoop.util.ToolRunner; import org.apache.parquet.example.data.Group; import org.apache.parquet.example.data.simple.SimpleGroupFactory; import org.apache.parquet.hadoop.example.GroupWriteSupport; import org.apache.parquet.hadoop.example.ExampleOutputFormat; import org.apache.parquet.hadoop.metadata.CompressionCodecName; import org.apache.parquet.schema.MessageTypeParser;  import java.io.IOException; import java.util.Random;  public class MrSavedAsParquet extends Configured implements Tool {     public static void main(String[] args) throws Exception {         int ret = ToolRunner.run(new MrSavedAsParquet(), args);         System.exit(ret);     }      public int run(String[] strings) throws Exception {          String inputDir = "/user/hive/warehouse/inputdirTest";         String outputDir = "/user/hive/warehouse/ods.db/usertest";          //为parquet生成schema         String writeSchema = "message example {\n optional INT32 id;\n optional binary name (UTF8);\n}";          // 配置MR的configuration         Configuration configuration = new Configuration(this.getConf());         configuration.set("mapreduce.input.fileinputformat.split.minsize","2147483648");         configuration.set("parquet.example.schema",writeSchema);          Job job = new Job(configuration,"UserTest");         //配置parquet         ExampleOutputFormat.setSchema(job, MessageTypeParser.parseMessageType(writeSchema));         ExampleOutputFormat.setCompression(job, CompressionCodecName.SNAPPY);         ExampleOutputFormat.setOutputPath(job, new Path(outputDir));         //配置Job的基本信息         job.setJarByClass(MrSavedAsParquet.class);         job.setMapperClass(MapTest.class);         job.setInputFormatClass(TextInputFormat.class);         job.setMapOutputKeyClass(Text.class);         job.setMapOutputValueClass(Group.class);//TODO 设置value是parquet的Group          MultipleInputs.addInputPath(job,new Path(inputDir), TextInputFormat.class,MapTest.class);         job.setNumReduceTasks(0);          //TODO 设置输出格式是parquet         LazyOutputFormat.setOutputFormatClass(job, ExampleOutputFormat.class);         MultipleOutputs.addNamedOutput(job, "output", ExampleOutputFormat.class, NullWritable.class,Group.class);          FileSystem fileSystem = FileSystem.get(configuration);         if ( ! fileSystem.exists(new Path(inputDir))){             System.out.print("input path does not exist!");             return 1;         }          int ret = job.waitForCompletion(true) ? 0 : 1;           return ret;     }      public static class MapTest extends Mapper&lt;LongWritable, Text, NullWritable, Group&gt; {         // 多目录输出         private MultipleOutputs&lt;NullWritable, Group&gt; mos; // 多目录输出         //定义用于创建group的工厂类         private SimpleGroupFactory factory;          //初始化，创建mos和factory         @Override         public void setup(Context context) throws IOException, InterruptedException {             mos = new MultipleOutputs&lt;NullWritable,Group &gt;(context);// 初始化mos             factory = new SimpleGroupFactory(GroupWriteSupport.getSchema(context.getConfiguration()));         }          /*             LongWritable key是文件偏移量             Text value是每行的数据             Context context是上下文对象，可以获取conf中的配置项          */         @Override         public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {             String[] strings = value.toString().split(" ");             //TODO 创建group             Group group = factory.newGroup();             //TODO 为group赋值             group.add("id",Integer.valueOf(strings[0]));             group.add("name",strings[1]);             //TODO 写出             mos.write("output",  null, group);         }          @Override         protected void cleanup(Context context) throws IOException, InterruptedException {             mos.close();         }     } }</code></pre> <p>文件已经保存到/user/hive/warehouse/ods.db/usertest目录下，创建ods.usertest的hive表：</p> <pre><code class="language-sql">CREATE TABLE ods.usertest ( id   int, name string ) stored as parquet;</code></pre> <p>查询：</p> <pre><code class="language-bash">hive&gt; select * from ods.usertest; OK 1	xiaoming 2	hanmeimei 3	kangkang 4	maria 5	yokiko 6	michael Time taken: 0.053 seconds, Fetched: 6 row(s)</code></pre> </div> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2683.htm">python3 使用 python-redis-lock 编写锁，解决并发计算问题</a></p>
                                                        <p>下一个：<a href="/html/category/article-2685.htm">动态矩阵（指针与堆内存分配）</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6633.htm" title="女士内衣进口哪些品牌值得推荐呢(女士内衣进口哪些品牌值得推荐一下)">女士内衣进口哪些品牌值得推荐呢(女士内衣进口哪些品牌值得推荐一下)</a></li>
                        <li class="py-2"><a href="/html/category/article-7184.htm" title="葫芦岛领养狗狗（葫芦岛领养狗狗电话）">葫芦岛领养狗狗（葫芦岛领养狗狗电话）</a></li>
                        <li class="py-2"><a href="/html/category/article-7415.htm" title="一枫叶打一成语是什么（一片枫叶成语）">一枫叶打一成语是什么（一片枫叶成语）</a></li>
                        <li class="py-2"><a href="/html/category/article-7231.htm" title="海贼王修佐（海贼王修佐vs鼹鼠）">海贼王修佐（海贼王修佐vs鼹鼠）</a></li>
                        <li class="py-2"><a href="/html/category/article-7138.htm" title="枫叶一片一片是什么歌（歌词一片枫叶一片情）">枫叶一片一片是什么歌（歌词一片枫叶一片情）</a></li>
                        <li class="py-2"><a href="/html/category/article-6724.htm" title="奥拉氟牙膏哪个牌子好(儿童含氟牙膏哪个牌子好)">奥拉氟牙膏哪个牌子好(儿童含氟牙膏哪个牌子好)</a></li>
                        <li class="py-2"><a href="/html/category/article-7185.htm" title="怎么开宠物店需要些什么证件（怎么开宠物店需要些什么证件和材料）">怎么开宠物店需要些什么证件（怎么开宠物店需要些什么证件和材料）</a></li>
                        <li class="py-2"><a href="/html/category/article-7828.htm" title="动物防疫疫苗空瓶如何销毁视频 动物防疫疫苗空瓶如何销毁视频播放">动物防疫疫苗空瓶如何销毁视频 动物防疫疫苗空瓶如何销毁视频播放</a></li>
                        <li class="py-2"><a href="/html/category/article-7690.htm" title="机油比较好的牌子(机油比较好的品牌有哪些品牌标志)">机油比较好的牌子(机油比较好的品牌有哪些品牌标志)</a></li>
                        <li class="py-2"><a href="/html/category/article-7277.htm" title="新手怎么联系厂家进货没有电话（怎样联系厂家拿到最便宜的货）">新手怎么联系厂家进货没有电话（怎样联系厂家拿到最便宜的货）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>