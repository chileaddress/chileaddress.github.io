<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2626.htm" />
    <title>C语言读取和存储bmp格式图片 - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>C语言读取和存储bmp格式图片</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p>开发过程中有时候需要解析bmp数据，下面先简单介绍bmp数据组成，后面附上C语言读取和存储bmp格式图片代码。</p> <h2> <a id="_2" rel="nofollow"></a>典型的位图文件格式通常包含下面几个数据块：</h2> <ol> <li>BMP文件头：保存位图文件的总体信息。</li> <li>位图信息头：保存位图图像的详细信息。位图信息：保存位图图像的详细信息。</li> <li>调色板：保存所用颜色的定义。调色板：保存所用颜色的定义。</li> <li>位图数据：保存一个又一个像素的实际图像。位图数据：保存一个又一个像素的实际图像。</li> </ol> <h3> <a id="1_BMP14_8" rel="nofollow"></a>1. BMP文件头（14字节）</h3> <p>BMP文件头数据结构含有BMP文件的类型、文件大小和位图起始位置等信息。</p> <p>这部分是识别信息，典型的应用程序会首先普通读取这部分数据以确保的确是位图文件并且没有损坏。</p> <p>位图头结构体定义如下：</p> <pre><code class="prism language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{<!-- --></span>     uint16_t type<span class="token punctuation">;</span>  <span class="token comment">//位图文件的类型，必须为BM(1-2字节）</span>     uint32_t size<span class="token punctuation">;</span>  <span class="token comment">//位图文件的大小，以字节为单位（3-6字节，低位在前）</span>     uint16_t reserved1<span class="token punctuation">;</span>  <span class="token comment">//位图文件保留字，必须为0(7-8字节）</span>     uint16_t reserved2<span class="token punctuation">;</span>  <span class="token comment">//位图文件保留字，必须为0(9-10字节）</span>     uint32_t off_bits<span class="token punctuation">;</span>  <span class="token comment">//位图数据位置的地址偏移，即起始位置，以相对于位图（11-14字节，低位在前）</span> <span class="token punctuation">}</span>__attribute__ <span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span> bmp_file_header_t<span class="token punctuation">;</span> </code></pre> <h3> <a id="2_40_26" rel="nofollow"></a>2. 位图信息头（40字节）</h3> <p>这部分告诉应用程序图像的详细信息，在屏幕上显示图像将会使用这些信息，它从文件的第15个字节开始。</p> <p>位图信息头结构体定义如下：</p> <pre><code class="prism language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{<!-- --></span>     uint32_t size<span class="token punctuation">;</span>     int32_t width<span class="token punctuation">;</span>     int32_t height<span class="token punctuation">;</span>     uint16_t planes<span class="token punctuation">;</span>     uint16_t bit_count<span class="token punctuation">;</span>     uint32_t compression<span class="token punctuation">;</span>     uint32_t size_image<span class="token punctuation">;</span>     uint32_t x_pels_permeter<span class="token punctuation">;</span>     uint32_t y_pels_permeter<span class="token punctuation">;</span>     uint32_t clr_used<span class="token punctuation">;</span>     uint32_t clr_important<span class="token punctuation">;</span> <span class="token punctuation">}</span> bmp_info_header_t<span class="token punctuation">;</span> </code></pre> <p>结构体变量解析如下：</p> <ul> <li>uint32_t size; 15-18字节：定义以下用来描述影像的区块（BitmapInfoHeader）的大小，即本结构所占用字节数，它的值是：40</li> <li>int32_t width; 19-22字节：位图宽度，以像素为单位。</li> <li>int32_t height; 23-26字节：位图高度，以像素为单位。</li> <li>uint16_t planes; 27-28字节：保存所用彩色位面的个数。不经常使用。</li> <li>uint16_t bit_count; 29-30字节：保存每个像素的位数，它是图像的颜色深度。常用值是1（双色灰阶）、4（16色灰阶）、8（256色灰阶）和24（彩色）。</li> <li>uint32_t compression; 31-34字节：定义所用的压缩算法。允许的值是0、1、2、3、4、5。 <ul> <li>0 - 没有压缩（也用BI_RGB表示）</li> <li>1 - 行程长度编码 8位/像素（也用BI_RLE8表示）</li> <li>2 - 行程长度编码4位/像素（也用BI_RLE4表示）</li> <li>3 - Bit field（也用BI_BITFIELDS表示）</li> <li>4 - JPEG图像（也用BI_JPEG表示）</li> <li>5 - PNG图像（也用BI_PNG表示）</li> </ul> </li> <li>uint32_t size_image; 35-38字节：位图的大小(其中包含了为了补齐行数是4的倍数而添加的空字节)，以字节为单位。这是原始位图数据的大小，不要与文件大小混淆。</li> <li>uint32_t x_pels_permeter; 39-42字节：位图水平分辨率，每米像素数。</li> <li>uint32_t y_pels_permeter; 43-46字节：位图垂直分辨率，每米像素数。</li> <li>uint32_t clr_used; 47-50字节：位图实际使用的颜色表中的颜色数。</li> <li>uint32_t clr_important; 51-54字节：位图显示过程中重要的颜色数，当每个颜色都重要时这个值与颜色数目（clr_used）相等。</li> </ul> <h3> <a id="3__68" rel="nofollow"></a>3. 调色板</h3> <p>BMP调色板结构体定义如下：</p> <pre><code class="prism language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _tagRGBQUAD <span class="token punctuation">{<!-- --></span> BYTE  rgbBlue<span class="token punctuation">;</span>       <span class="token comment">//指定蓝色强度</span> BYTE  rgbGreen<span class="token punctuation">;</span>      <span class="token comment">//指定绿色强度</span> BYTE  rgbRed<span class="token punctuation">;</span>        <span class="token comment">//指定红色强度</span> BYTE  rgbReserved<span class="token punctuation">;</span>  <span class="token comment">//保留，设置为0</span> <span class="token punctuation">}</span> RGBQUAD<span class="token punctuation">;</span> </code></pre> <p>1，4，8位图像才会使用调色板数据，16,24,32位图像不需要调色板数据，即调色板最多只需要256项（索引0 - 255）。</p> <p>颜色表的大小根据所使用的颜色模式而定：2色图像为8字节；16色图像位64字节；256色图像为1024字节。其中，每4字节表示一种颜色，并以B（蓝色）、G（绿色）、R（红色）、alpha（32位位图的透明度值，一般不需要）。即首先4字节表示颜色号1的颜色，接下来表示颜色号2的颜色，依此类推。</p> <p>颜色表中RGBQUAD结构数据的个数有biBitCount来确定，当biBitCount=1,4,8时，分别有2,16,256个表项：</p> <ul> <li>当biBitCount=1时，为2色图像，BMP位图中有2个数据结构RGBQUAD，一个调色板占用4字节数据，所以2色图像的调色板长度为2*4为8字节。</li> <li>当biBitCount=4时，为16色图像，BMP位图中有16个数据结构RGBQUAD，一个调色板占用4字节数据，所以16像的调色板长度为16*4为64字节。</li> <li>当biBitCount=8时，为256色图像，BMP位图中有256个数据结构RGBQUAD，一个调色板占用4字节数据，所以256色图像的调色板长度为256*4为1024字节。</li> <li>当biBitCount=16，24或32时，没有颜色表。</li> </ul> <h3> <a id="4__91" rel="nofollow"></a>4. 位图数据</h3> <p>位图数据记录了位图的每一个像素值。<br /><strong>像素是从下到上、从左到右保存的</strong>。<br /> 每个像素使用一个或者多个字节表示。<br /><strong>如果一个图像水平线的字节数不是4的倍数，这行就使用空字节补齐，通常是ASCII码0</strong>。</p> <p>例如：</p> <ol> <li> <p>一张5 * 6的图片，有30个pixels，因为列数6不是4的倍数，所以会显示成：<br /> xxxxxx00 xxxxxx00 xxxxxx00 xxxxxx00 xxxxxx00<br /> 其中，x代表调色盘的编号，0代表补齐的空字节</p> </li> <li> <p>一张4 * 4的图片，有16个pixels，因为列数刚好是4的倍数，所以会显示成：<br /> xxxx xxxx xxxx xxxx</p> </li> </ol> <h2> <a id="Cbmp_107" rel="nofollow"></a>C语言读取和存储bmp示例代码</h2> <pre><code class="prism language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>  <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{<!-- --></span>     uint16_t type<span class="token punctuation">;</span>     uint32_t size<span class="token punctuation">;</span>     uint16_t reserved1<span class="token punctuation">;</span>     uint16_t reserved2<span class="token punctuation">;</span>     uint32_t off_bits<span class="token punctuation">;</span> <span class="token punctuation">}</span>__attribute__ <span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span> bmp_file_header_t<span class="token punctuation">;</span>  <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{<!-- --></span>     uint32_t size<span class="token punctuation">;</span>     int32_t width<span class="token punctuation">;</span>     int32_t height<span class="token punctuation">;</span>     uint16_t planes<span class="token punctuation">;</span>     uint16_t bit_count<span class="token punctuation">;</span>     uint32_t compression<span class="token punctuation">;</span>     uint32_t size_image<span class="token punctuation">;</span>     uint32_t x_pels_permeter<span class="token punctuation">;</span>     uint32_t y_pels_permeter<span class="token punctuation">;</span>     uint32_t clr_used<span class="token punctuation">;</span>     uint32_t clr_important<span class="token punctuation">;</span> <span class="token punctuation">}</span> bmp_info_header_t<span class="token punctuation">;</span>  <span class="token keyword">static</span> bmp_file_header_t s_bmp_file_header <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span> <span class="token number">0x4d42</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">static</span> bmp_info_header_t s_bmp_info_header <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> uint8_t s_bmpdata<span class="token punctuation">[</span><span class="token number">200</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">static</span> uint32_t s_bmp_col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">static</span> uint32_t s_bmp_row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">char</span> in_file_path<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"in.bmp"</span><span class="token punctuation">;</span> <span class="token keyword">char</span> out_file_path<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"out.bmp"</span><span class="token punctuation">;</span>  int32_t <span class="token function">bmp_file_to_image</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>file_path<span class="token punctuation">,</span> uint8_t <span class="token operator">*</span>image<span class="token punctuation">,</span> uint32_t <span class="token operator">*</span>col<span class="token punctuation">,</span> uint32_t <span class="token operator">*</span>row<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     FILE <span class="token operator">*</span>file <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>     uint32_t line_width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     uint32_t width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     uint32_t height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     int32_t err <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     uint8_t buf<span class="token punctuation">[</span><span class="token number">200</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">do</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> file_path <span class="token operator">||</span> <span class="token constant">NULL</span> <span class="token operator">==</span> image<span class="token punctuation">)</span>         <span class="token punctuation">{<!-- --></span>             err <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%s] file_path = %s\n"</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> file_path<span class="token punctuation">)</span><span class="token punctuation">;</span>          file <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> file<span class="token punctuation">)</span>         <span class="token punctuation">{<!-- --></span> 			err <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s_bmp_file_header<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s_bmp_file_header<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s_bmp_info_header<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s_bmp_info_header<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">fread</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">*</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>         width <span class="token operator">=</span> s_bmp_info_header<span class="token punctuation">.</span>width<span class="token punctuation">;</span>         height <span class="token operator">=</span> s_bmp_info_header<span class="token punctuation">.</span>height<span class="token punctuation">;</span>         <span class="token operator">*</span>col <span class="token operator">=</span> width<span class="token punctuation">;</span>         <span class="token operator">*</span>row <span class="token operator">=</span> height<span class="token punctuation">;</span>         line_width <span class="token operator">=</span> <span class="token punctuation">(</span>width <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%s] line_width = %d, width = %d, height = %d\n"</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> line_width<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>         <span class="token punctuation">{<!-- --></span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span>line_width <span class="token operator">==</span> width<span class="token punctuation">)</span> 			<span class="token punctuation">{<!-- --></span> 				<span class="token function">fread</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> i <span class="token operator">*</span> width<span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span> 		    <span class="token punctuation">}</span> 		    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>line_width <span class="token operator">&gt;</span> width<span class="token punctuation">)</span> 			<span class="token punctuation">{<!-- --></span> 				<span class="token function">fread</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> i <span class="token operator">*</span> width<span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span> 				<span class="token function">fread</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> line_width<span class="token operator">-</span>width<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token function">memcpy</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> width <span class="token operator">*</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>     <span class="token punctuation">{<!-- --></span>         <span class="token function">fclose</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> err<span class="token punctuation">;</span> <span class="token punctuation">}</span>  int32_t <span class="token function">dump_image_to_bmp_file</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>file_path<span class="token punctuation">,</span> uint8_t <span class="token operator">*</span>image<span class="token punctuation">,</span> uint32_t width<span class="token punctuation">,</span> uint32_t height<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     FILE <span class="token operator">*</span>file <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>     int32_t err <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">do</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> file_path <span class="token operator">||</span> <span class="token constant">NULL</span> <span class="token operator">==</span> image<span class="token punctuation">)</span>         <span class="token punctuation">{<!-- --></span>             err <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>          uint32_t line_width <span class="token operator">=</span> <span class="token punctuation">(</span>width <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>         s_bmp_file_header<span class="token punctuation">.</span>off_bits <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>bmp_file_header_t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>bmp_info_header_t<span class="token punctuation">)</span>                 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">256</span><span class="token punctuation">;</span>         s_bmp_file_header<span class="token punctuation">.</span>size <span class="token operator">=</span> s_bmp_file_header<span class="token punctuation">.</span>off_bits <span class="token operator">+</span> line_width <span class="token operator">*</span> height<span class="token punctuation">;</span>          s_bmp_info_header<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>bmp_info_header_t<span class="token punctuation">)</span><span class="token punctuation">;</span>         s_bmp_info_header<span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>         s_bmp_info_header<span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>         s_bmp_info_header<span class="token punctuation">.</span>size_image <span class="token operator">=</span> line_width <span class="token operator">*</span> height<span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%s] line_width = %d, width = %d, height = %d\n"</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> line_width<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>          file <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> file<span class="token punctuation">)</span>         <span class="token punctuation">{<!-- --></span> 			err <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>          <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s_bmp_file_header<span class="token punctuation">.</span>type<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s_bmp_file_header<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s_bmp_file_header<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s_bmp_file_header<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s_bmp_file_header<span class="token punctuation">.</span>reserved1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s_bmp_file_header<span class="token punctuation">.</span>reserved1<span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s_bmp_file_header<span class="token punctuation">.</span>reserved2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s_bmp_file_header<span class="token punctuation">.</span>reserved2<span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s_bmp_file_header<span class="token punctuation">.</span>off_bits<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s_bmp_file_header<span class="token punctuation">.</span>off_bits<span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s_bmp_info_header<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>bmp_info_header_t<span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>         uint8_t alpha <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         int32_t i<span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{<!-- --></span>             <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>alpha<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>         <span class="token punctuation">{<!-- --></span>             <span class="token function">fwrite</span><span class="token punctuation">(</span>image <span class="token operator">+</span> i <span class="token operator">*</span> width<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>line_width <span class="token operator">&gt;</span> width<span class="token punctuation">)</span>             <span class="token punctuation">{<!-- --></span>                 uint8_t line_align<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>                 <span class="token function">fwrite</span><span class="token punctuation">(</span>line_align<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> line_width <span class="token operator">-</span> width<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>          <span class="token function">fflush</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>     <span class="token punctuation">{<!-- --></span>         <span class="token function">fclose</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">return</span> err<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	int32_t err <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 	err <span class="token operator">=</span> <span class="token function">bmp_file_to_image</span><span class="token punctuation">(</span>in_file_path<span class="token punctuation">,</span> s_bmpdata<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s_bmp_col<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s_bmp_row<span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> 	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%s] s_bmp_col = %d, s_bmp_row = %d\n"</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> s_bmp_col<span class="token punctuation">,</span> s_bmp_row<span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token function">dump_image_to_bmp_file</span><span class="token punctuation">(</span>out_file_path<span class="token punctuation">,</span> s_bmpdata<span class="token punctuation">,</span> s_bmp_col<span class="token punctuation">,</span> s_bmp_row<span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> </p></div> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2625.htm">JVM程序计数器与虚拟机栈</a></p>
                                                        <p>下一个：<a href="/html/category/article-2627.htm">Spring cloud链路跟踪服务集成zipkin+mysql+sleuth+rabbitMq</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2799.htm" title="整理了25个Pandas实用技巧（上）">整理了25个Pandas实用技巧（上）</a></li>
                        <li class="py-2"><a href="/html/category/article-2784.htm" title="C++基础之C++中的输入输出">C++基础之C++中的输入输出</a></li>
                        <li class="py-2"><a href="/html/category/article-2800.htm" title="浅谈软件性能提升相关的概念">浅谈软件性能提升相关的概念</a></li>
                        <li class="py-2"><a href="/html/category/article-2781.htm" title="C语言实现随机抽签">C语言实现随机抽签</a></li>
                        <li class="py-2"><a href="/html/category/article-3140.htm" title="java 退出_JVM安全退出（如何优雅的关闭java服务）">java 退出_JVM安全退出（如何优雅的关闭java服务）</a></li>
                        <li class="py-2"><a href="/html/category/article-2812.htm" title="synchronized详解">synchronized详解</a></li>
                        <li class="py-2"><a href="/html/category/article-4310.htm" title="草头饼的做法窍门(草头饼的做法视频)">草头饼的做法窍门(草头饼的做法视频)</a></li>
                        <li class="py-2"><a href="/html/category/article-2817.htm" title="uni-app 63egg.js后端用户上线和下线深度剖析">uni-app 63egg.js后端用户上线和下线深度剖析</a></li>
                        <li class="py-2"><a href="/html/category/article-2795.htm" title="Python开发桌面小程序功能_python_">Python开发桌面小程序功能_python_</a></li>
                        <li class="py-2"><a href="/html/category/article-2783.htm" title="JVM将初始和最大内存大小设置为相同值的好处">JVM将初始和最大内存大小设置为相同值的好处</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>