<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2561.htm" />
    <title>Hbase架构与存储组件结构与功能 - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>Hbase架构与存储组件结构与功能</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <div class="toc"> <h3>文章目录</h3> <ul> <li>HBase宏观架构</li> <li> <ul> <li>Master</li> <li>RegionServer</li> <li>Region</li> <li>HDFS</li> <li>ZooKeeper</li> </ul> </li> <li>Region</li> <li> <ul> <li>WAL（预写日志）</li> <li> <ul> <li>关闭/打开WAL</li> <li>延迟（异步）同步写入WAL</li> <li>WAL滚动</li> <li>WAL文件归档</li> </ul> </li> <li>Store</li> <li> <ul> <li>MemStore</li> </ul> </li> </ul> </li> <li>HFile</li> <li> <ul> <li>Data</li> <li> <ul> <li>BlockType（块类型）</li> <li>KeyValue类（Cell）</li> </ul> </li> </ul> </li> <li>HBase实现增删改成</li> <li> <ul> <li>真正删除发生的时候</li> </ul> </li> </ul> </div> <hr/> <h1>HBase宏观架构</h1> <blockquote> <p>架构图<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220904/e67218ea55879c989333130bdfc1524b.jpg" alt="Hbase架构与存储组件结构与功能"></p> </blockquote> <h2>Master</h2> <p>负责启动的时候分配Region到具体的RegionServer，执行各种管理操作，如：Region的分割与合并、创建表、修改列族配置等操作。</p> <h2>RegionServer</h2> <p>存在一个或多个Region，所有的数据是存储在Region上的。Region所有数据存取都是调用HDFS的客户端实现的。</p> <h2>Region</h2> <p>表的一部分数据。HBase是一个会自动分片的数据库。一个Region就相当于关系型数据库中分区表的一个分区。</p> <h2>HDFS</h2> <p>HBase并不直接跟服务器的硬盘交互，而是跟HDFS交互，HDFS是真正承载数据的载体。</p> <h2>ZooKeeper</h2> <p>HBase中组件的高可用是基于ZooKeeper实现，以及元数据一般都是存储在ZooKeeper上的。</p> <h1>Region</h1> <p>一个RegionServer会存在一个或多个Region。</p> <p>Region相当于一个数据分片，每个Region都有起始rowkey和结束rowkey，代表它所存储的Row范围。</p> <blockquote> <p>架构图<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220904/fefa5d46f7544400b518cf7461a8c666.jpg" alt="Hbase架构与存储组件结构与功能"></p> </blockquote> <h2>WAL（预写日志）</h2> <p>WAL（Write-Ahead Log），当操作到达Region的时候，HBase会<code>先将操作写入WAL中</code>，在把数据放到<code>基于内存实现的MemStore</code>中，等到数据达到一定的数量时才刷写（flush）到最终存储的HFile中。当遇到故障的时候可以根据WAL恢复数据。</p> <p>操作类型有：Put、Append、Increment、Delete。当操作到达时会立即被写入WAL中，写入调用的是HDFS客户端接口写入HDFS的。</p> <h3>关闭/打开WAL</h3> <p>WAL模式默认是开启的，可以通过调用下列语句关闭WAL。</p> <pre><code class="prism language-java"><span class="token class-name">Meutaion</span><span class="token punctuation">.</span><span class="token function">setDurability</span><span class="token punctuation">(</span><span class="token class-name">Durability</span><span class="token punctuation">.</span>SKIP_WAL<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>还可以关闭/开启指定操作类型的WAL。这样虽然可以让数据操作更快一点，当服务器宕机时，会导致数据丢失。</p> <h3>延迟（异步）同步写入WAL</h3> <p>通过异步写入WAL，可以让数据操作更快一点，但是也会导致部分数据丢失。<br /> WAL异步写入，调用方法</p> <pre><code class="prism language-java"><span class="token class-name">Meutaion</span><span class="token punctuation">.</span><span class="token function">setDurability</span><span class="token punctuation">(</span><span class="token class-name">Durability</span><span class="token punctuation">.</span>ASYNC_WAL<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3>WAL滚动</h3> <p>WAL是一个环状的滚动日志结构，因为这种结构可以写入效果最高，而且可以保证空间不会持续变大。</p> <p>WAL的检查间隔由hbase.regionserver.logroll.period定义，默认值1小时。检查的内容是把当前WAL中的操作跟实际持久化到HDFS上的操作比较，看哪些操作已经别持久化了，被持久化的操作就会被移动到.oldlogs文件夹内（也存储在HDFS上）。</p> <p>一个WAL实例包含多个WAL文件。WAL文件的最大数量通过hbase.regionserver.maxlogs定义，默认值32。</p> <p>触发滚动的条件：</p> <ol> <li>当WAL文件所在的快（Block）快要满了。</li> <li>当WAL所占空间大于或等于某个阀值，计算公司<code>hbase.regionserver.hlog.blocksize * hbase.regionserver.logroll.multiplier</code>。</li> </ol> <p>hbase.regionserver.hlog.blocksize：存储系统块（Block）大小，一般是HDFS的块大小即可，不设定HBase会自己去尝试获取这个参数的值。</p> <p>hbase.regionserver.logroll.multiplier：默认0.95，如果WAL文件所占空间大于或等于95%的块大小，则这个WAL文件就会被归档到.oldlogs文件夹中。</p> <h3>WAL文件归档</h3> <p>WAL文件被创建出来后会被放在/hbase/.log下，一旦WAL文件被归档，则会被移动到/hbase/.oldlogs文件夹下。</p> <p>Master会负责定期地清理.oldlogs文件夹，条件是”当这个WAL不需要作为用来恢复数据的备份“时候。判断条件是”没有任何引用指向这个WAL文件“，才会被系统彻底删除。</p> <ol> <li>TTL进程：该进程会保证WAL文件一直存活直到hbase.master.logcleaner.ttl定义的超时时间（默认10分钟）为止。</li> <li>备份（replication）机制：如果开启了HBase的备份机制，那么HBase要保证备份集群已经完全不需要这个WAL文件了，才会删除这个WAL文件。<br /> 备份：是把一个集群的数据实时备份到另外一个集群，如果就一个集群就不需要考虑这个因素。</li> </ol> <h2>Store</h2> <p>一个Region可能包含多个Store实例。一个Store对应一个列族的数据，Store内部含有MemStore和HFile这两个组件。</p> <p>每个Store只有一个MemStore实例，多个HFile实例。当MemStore满了之后HBase就会在HDFS上生成一个新的HFile，然后把MemStore中的内容写到HFile中。</p> <h3>MemStore</h3> <p>数据被写入WAL之后就会被加载到MemStore中，当MemStore的大小增加到超过一定阀值的时候就会被刷写到HDFS上，以HFile形式被持久化起来。</p> <p>设计MemStore的原因有以下几点</p> <ol> <li>由于HDFS上的文件是不可修改的，为了让数据顺序存储从而提高读取效率，HBase使用了LSM树结果来存储数据。<br /> MemStore会将数据整理成LSM树，最后在刷写到HFile上。<br /> 读取操作是先BlockCache，在读取MemStore+HFile。</li> <li>优化数据的存储。如：一个数据添加后立马就删除，这样在刷写的时候就可以直接不把这个数据写到HDFS上。</li> </ol> <h1>HFile</h1> <p>HFile是数据存储的实际载体，创建的所有标、列等数据都存储在HFile里面。</p> <p>HFile是由一个一个的块组成的。在HBase中一个块的大小默认是64KB，由列族上的BLOCKSIZE属性定义。</p> <blockquote> <p>架构图<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220904/9542eabc9b5a6700fa756cf647a1d8f9.jpg" alt="Hbase架构与存储组件结构与功能"></p> </blockquote> <ol> <li>Data： 数据块。每个HFile中有多个Data块。存储HBase表中的数据。（可选）</li> <li>Meta：元数据块。Meta块只有在文件关闭时才写入，Meta块存储该Hfile文件的元信息。（可选）</li> <li>FileInfo：文件信息。在文件关闭时写入，存储的是这个文件的信息，如：最后一个Key（Last Key）、平均的Key长度（Avg Key Len）等。（必选）</li> <li>DataIndex：存储Data块索引信息的文件块。索引信息即Data块的偏移值（offset），有Data块就有DataIndex。（可选）</li> <li>MetaIndex：存储Meta块索引信息的文件块。有Meta才有MetaIndex。</li> <li>Trailer：存储FileInfo、DataIndex、MetaIndex块的偏移值。（必选）</li> </ol> <h2>Data</h2> <p>Data数据块的第一位存储的是块的elixir，后面存储多个Cell（KeyValue键值对）。</p> <h3>BlockType（块类型）</h3> <ol> <li>DATA（数据）</li> <li>ENCODE_DATA(数据编码格式)</li> <li>LEAF_INDEX(叶索引)</li> <li>BLOOM_CHUNK(BLOOM块)</li> <li>META（元数据）</li> <li>INTERMEDIATE_INDEX(中间索引)</li> <li>ROOT_INDEX（根索引）</li> <li>GENERAL_BLOOM_META（通用BLOOM元数据）</li> <li>DELETE_FAMILY_BLOOM_META（删除族BLOOM元数据）</li> <li>TRAILER</li> <li>INDEX_V1</li> </ol> <h3>KeyValue类（Cell）</h3> <ol> <li>KeyLen 键长读</li> <li>ValueLen 值长度</li> <li>RowLen 行长度</li> <li>Row：行</li> <li>CF LEN：（Column Family，列族)长度</li> <li>CF：（Column Family，列族)</li> <li>Col: (Column，列)</li> <li>Time Stamp: 时间戳</li> <li>Key Type： 键类型<br /> 10.Value： 具体值</li> </ol> <h1>HBase实现增删改成</h1> <p>因HBase是持久化到HDFS的，所有不支持修改。</p> <ol> <li>新增一个单元格的时候，HBae在HDFS新增一条数据。</li> <li>修改一个单元格的时候，HBase在HDFS新增一条数据，只是版本好比之间的大。</li> <li>删除一个单元格的时候，Hbase在HDFS新增一条数据，这条数据没有value，类型为DELETE。</li> </ol> <h2>真正删除发生的时候</h2> <p>通过Minor Compaction 和 Major Compaction合并实现删除数据</p> <ol> <li>Minor Compaction: 将Store中多个HFile合并为一个HFile。在这个过程中达到TTL的数据会被移除，但是被手动删除的数据不会被移除，触发频率高。</li> <li>Major Compaction: 合并Store中所有HFile为一个HFile。在这个过程中手动删除的数据会被真正地移除。同时被删除的还有单元格内超过MaxVersion的版本数据，触发频率低，默认为7天一次，且消耗性能较大。</li> </ol> </div> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2560.htm">如何从JavaScript对象中删除属性</a></p>
                                                        <p>下一个：<a href="/html/category/article-2562.htm">Shell基础 — 10、Bash中的特殊符号详解</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7599.htm" title="哪里可以领养宠物狗狗（哪里可以领养宠物狗狗呢）">哪里可以领养宠物狗狗（哪里可以领养宠物狗狗呢）</a></li>
                        <li class="py-2"><a href="/html/category/article-7092.htm" title="免费领养宠物的app下载安装（免费领养宠物的app下载安装）">免费领养宠物的app下载安装（免费领养宠物的app下载安装）</a></li>
                        <li class="py-2"><a href="/html/category/article-7506.htm" title="狗粮排行榜价格表（狗粮最新排名）">狗粮排行榜价格表（狗粮最新排名）</a></li>
                        <li class="py-2"><a href="/html/category/article-7691.htm" title="狗粮加工企业有哪些企业（狗粮制造厂）">狗粮加工企业有哪些企业（狗粮制造厂）</a></li>
                        <li class="py-2"><a href="/html/category/article-7921.htm" title="10万左右二手车买什么车好点(10万左右二手车买什么车好一点)">10万左右二手车买什么车好点(10万左右二手车买什么车好一点)</a></li>
                        <li class="py-2"><a href="/html/category/article-8335.htm" title="生物颗粒多少钱一吨呢四千六百大卡（1吨的生物颗粒多少钱）">生物颗粒多少钱一吨呢四千六百大卡（1吨的生物颗粒多少钱）</a></li>
                        <li class="py-2"><a href="/html/category/article-7783.htm" title="微信上买狗被欺骗怎么办（微信买狗被骗一千五百块钱法院会受理吗）">微信上买狗被欺骗怎么办（微信买狗被骗一千五百块钱法院会受理吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7184.htm" title="葫芦岛领养狗狗（葫芦岛领养狗狗电话）">葫芦岛领养狗狗（葫芦岛领养狗狗电话）</a></li>
                        <li class="py-2"><a href="/html/category/article-8334.htm" title="宠物食品店需要什么手续（宠物店需要食品经营许可证吗）">宠物食品店需要什么手续（宠物店需要食品经营许可证吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7736.htm" title="动物医院单位性质代码（动物医院资质级别有哪些）">动物医院单位性质代码（动物医院资质级别有哪些）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>