<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2596.htm" />
    <title>netty系列之:netty中各不同种类的channel详解 - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>netty系列之:netty中各不同种类的channel详解</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <div class="toc"> <h3>文章目录</h3> <ul> <li>简介</li> <li>ServerChannel和它的类型</li> <li> <ul> <li>Epoll和Kqueue</li> <li>AbstractServerChannel</li> <li>ServerSocketChannel</li> <li>ServerDomainSocketChannel</li> <li>SctpServerChannel</li> </ul> </li> <li>Channel和它的类型</li> <li> <ul> <li>UnixChannel</li> <li>SctpChannel</li> <li>DatagramChannel</li> <li>DomainDatagramChannel</li> <li>DuplexChannel</li> <li>AbstractChannel</li> </ul> </li> <li>总结</li> </ul> </div> <h1>简介</h1> <p>channel是连接客户端和服务器端的桥梁，在netty中我们最常用的就是NIO，一般和NioEventLoopGroup配套使用的就是NioServerSocketChannel和NioSocketChannel，如果是UDP协议，那么配套使用的就是NioDatagramChannel，如果是别的协议还有其他不同的Channel类型。</p> <p>这些不同channel类型有什么区别呢？一个直观的感觉就是不同的channel和channel连接使用的协议有关系，不同的channel可能适配了不同的连接协议。</p> <p>事实到底是不是如此呢？在netty的内部实现中到底有多少种channel呢？今天一起来探讨一下。</p> <h1>ServerChannel和它的类型</h1> <p>虽然ServerChannel继承自Channel，但是ServerChannel本身并没有添加任何新的方法：</p> <pre><code>public interface ServerChannel extends Channel {  }</code></pre> <p>所以对ServerChannel和Channel来说都可以看做是Channel，他们只是语义上有区别。</p> <p>但是因为ServerChannel继承自Channel，所以相对的ServerChannel的分类和实现要比Channel要少。所以我们先以ServerChannel为例进行讲解。</p> <p>ServerChannel的实现也有很多，我们以Abstract*开头的实现为例，下面是他们的继承关系：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/30e780b3e04849e8c6e7dce703992b77.jpg" alt="netty系列之:netty中各不同种类的channel详解"/></p> <p>从上图我们可以看出，ServerChannel有六个抽象类实现，分别是AbstractEpollServerChannel,AbstractKQueueServerChannel,AbstractServerChannel,ServerSocketChannel,SctpServerChannel和ServerDomainSocketChannel。</p> <p>其中前面三个抽象类同时继承自AbstractChannel。</p> <h2>Epoll和Kqueue</h2> <p>Epoll和Kqueue是两个独特的依赖于特定平台的NIO协议，其中epoll只在linux平台才支持,而kQueue则在FreeBSD、NetBSD、OpenBSD、macOS 等操作系统支持。</p> <p>我们来看下AbstractEpollServerChannel的构造函数：</p> <pre><code>    protected AbstractEpollServerChannel(int fd) {         this(new LinuxSocket(fd), false);     }      AbstractEpollServerChannel(LinuxSocket fd) {         this(fd, isSoErrorZero(fd));     }      AbstractEpollServerChannel(LinuxSocket fd, boolean active) {         super(null, fd, active);     }</code></pre> <p>所有的构造函数都需要一个LinuxSocket的参数，LinuxSocket是一个socket用来提供对于linux native方法的访问支持。</p> <p>同样的，我们再看一下AbstractKQueueServerChannel的构造函数：</p> <pre><code>    AbstractKQueueServerChannel(BsdSocket fd) {         this(fd, isSoErrorZero(fd));     }      AbstractKQueueServerChannel(BsdSocket fd, boolean active) {         super(null, fd, active);     }</code></pre> <p>AbstractKQueueServerChannel的构造函数需要传入一个BsdSocket参数，BsdSocket是一个类用来提供对BSD系统的本地方法的访问。</p> <h2>AbstractServerChannel</h2> <p>AbstractServerChannel我们在之前的channel一章中已经讲过了，它的唯一实现就是LocalServerChannel，用于本地的transport。</p> <h2>ServerSocketChannel</h2> <p>ServerSocketChannel是一个以Socket连接为基础的ServerChannel，既然是Socket连接，那么ServerSocketChannel中提供了一个InetSocketAddress类型的localAddress和一个remoteAddress, 另外还有一个ServerSocketChannelConfig属性，用来存储ServerSocketChannel相关的配置信息：</p> <pre><code>public interface ServerSocketChannel extends ServerChannel {     @Override     ServerSocketChannelConfig config();     @Override     InetSocketAddress localAddress();     @Override     InetSocketAddress remoteAddress(); }</code></pre> <h2>ServerDomainSocketChannel</h2> <p>ServerDomainSocketChannel是使用DomainSocket来进行通讯的ServerChannel。什么是DomainSocket呢？</p> <p>DomainSocket的全称是unix domain socket，它又可以叫做IPC socket,也就是inter-process communication socket，是在unix平台上的同一服务器上的进程通信方式。</p> <p>我们知道，协议是比较复杂的，对于传统的socket通讯来说,需要定制特定的协议，然后进行封包和解包等操作，但是使用DomainSocket，可以直接将进程的数据直接拷贝，从而节约了时间，并提高了程序的效率。</p> <p>DomainSocket的地址是一个文件的路径，实际上是下面的一个结构体：</p> <pre><code>struct sockaddr_un {     sa_family_t     sun_family;     /* AF_UNIX ，2字节*/     char    sun_path[UNIX_PATH_MAX];        /* 路径名 */ };</code></pre> <p>在ServerDomainSocketChannel中的remoteAddress和localAddress的类型都是DomainSocketAddress,DomainSocketAddress有一个socketPath属性，用来存储DomainSocket文件的路径。</p> <h2>SctpServerChannel</h2> <p>最后一个要讲解的ServerChannel是SctpServerChannel，Sctp的全称是Stream Control Transmission Protocol，他是一种类似于TCP/IP的协议。和SocketServerChannel一样，SctpServerChannel中也有一个config叫做SctpServerChannelConfig，还提供了多个bindAddress方法用来绑定InetAddress.</p> <p>有关Sctp协议的具体内容，本章不深入讨论，感兴趣的朋友可以关注后续的章节。</p> <h1>Channel和它的类型</h1> <p>Channel作为ServerChannel的父类，又有哪些实现呢？</p> <p>先来看下常用channel的实现类：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/ba21160ec2caf96cbbcd9be425b38462.jpg" alt="netty系列之:netty中各不同种类的channel详解"/></p> <p>看起来channel的实现类非常多，基本上都是按照channel中使用传输协议的类型来的。</p> <p>我们具体来看一下相应的实现类。</p> <h2>UnixChannel</h2> <p>UnixChannel表示的unix平台上的操作，它有一个fd方法，返回一个FileDescriptor:</p> <pre><code>FileDescriptor fd();</code></pre> <p>这也是unix和windows平台的区别之一，unix平台所有的一切都可以用文件来表示。</p> <h2>SctpChannel</h2> <p>在上面我讲SctpServerChannel的时候我们提过了，Sctp是一个类似于tcp/ip的协议，SctpChannel中定义了协议中需要使用到的localAddress和remoteAddress:</p> <pre><code>InetSocketAddress localAddress();  InetSocketAddress remoteAddress();</code></pre> <p>同时还定义了一些绑定方法：</p> <pre><code>    ChannelFuture bindAddress(InetAddress var1);      ChannelFuture bindAddress(InetAddress var1, ChannelPromise var2);      ChannelFuture unbindAddress(InetAddress var1);      ChannelFuture unbindAddress(InetAddress var1, ChannelPromise var2);</code></pre> <h2>DatagramChannel</h2> <p>DatagramChannel用来处理UDP协议的连接，因为UDP有广播的功能，所以DatagramChannel中提供了joinGroup的方法，来join一个multicast group:</p> <pre><code>ChannelFuture joinGroup(InetAddress multicastAddress);</code></pre> <p>当然，可以join就可以leave，还有一些leaveGroup的方法：</p> <pre><code>ChannelFuture leaveGroup(InetAddress multicastAddress);</code></pre> <p>还可以block某些地址在给定的networkInterface上的广播：</p> <pre><code>ChannelFuture block(             InetAddress multicastAddress, NetworkInterface networkInterface,             InetAddress sourceToBlock);</code></pre> <p>这些方法都和UDP的特性是息息相关的。</p> <h2>DomainDatagramChannel</h2> <p>DomainDatagramChannel和之前提到的ServerDomainSocketChannel一样，都是使用的IPC内部进程通讯技术，直接进行进程的拷贝，免去了协议解析等步骤，提升了处理速度。</p> <h2>DuplexChannel</h2> <p>DuplexChannel从名字看就是一个双向的channel，duplex Channel有一个特点，就是channel的两边可以独立的关闭，所以有下面的方法：</p> <pre><code>boolean isInputShutdown();  ChannelFuture shutdownInput();  boolean isOutputShutdown();  ChannelFuture shutdownOutput();</code></pre> <p>DuplexChannel的是实现有很多种，比如常见的NIOSocketChannel，KQueueSocketChannel,EpollSocketChannel等。</p> <h2>AbstractChannel</h2> <p>另外一个channel的非常重要的子类就是AbstractChannel，AbstractChannel有三个非常重要的实现，分别是AbstractNioChannel,AbstractKQueueChannel和AbstractEpollChannel。</p> <p>这三个类使用的都是NIO技术，不同的是第一个使用的是select，后面两个使用的是平台独有的KQueue和Epoll技术。</p> <p>其中NIO又可以分为NioByteChannel和NioMessageChannel,KQueue和Epoll又可以分为StreamChannel和DatagramChannel。</p> <h1>总结</h1> <p>以上就是channel在netty中的基本实现和分类。后面我们会详解讲解具体的channel到底是如何实现的。</p> </div> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2595.htm">JS模板工具lodash.template的用法</a></p>
                                                        <p>下一个：<a href="/html/category/article-2597.htm">SpringBoot中获取profile的方法详解_java</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7138.htm" title="枫叶一片一片是什么歌（歌词一片枫叶一片情）">枫叶一片一片是什么歌（歌词一片枫叶一片情）</a></li>
                        <li class="py-2"><a href="/html/category/article-7277.htm" title="新手怎么联系厂家进货没有电话（怎样联系厂家拿到最便宜的货）">新手怎么联系厂家进货没有电话（怎样联系厂家拿到最便宜的货）</a></li>
                        <li class="py-2"><a href="/html/category/article-6678.htm" title="同城免费领养宠物可靠吗知乎 同城免费领养宠物可靠吗知乎文章">同城免费领养宠物可靠吗知乎 同城免费领养宠物可靠吗知乎文章</a></li>
                        <li class="py-2"><a href="/html/category/article-7230.htm" title="梅林（梅林午餐肉）">梅林（梅林午餐肉）</a></li>
                        <li class="py-2"><a href="/html/category/article-7828.htm" title="动物防疫疫苗空瓶如何销毁视频 动物防疫疫苗空瓶如何销毁视频播放">动物防疫疫苗空瓶如何销毁视频 动物防疫疫苗空瓶如何销毁视频播放</a></li>
                        <li class="py-2"><a href="/html/category/article-7047.htm" title="兽医资格证考取条件（兽医资格证考取条件要求）">兽医资格证考取条件（兽医资格证考取条件要求）</a></li>
                        <li class="py-2"><a href="/html/category/article-7920.htm" title="动物防疫站***需要什么手续才能打（动物防疫站打疫苗）">动物防疫站***需要什么手续才能打（动物防疫站打疫苗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7092.htm" title="免费领养宠物的app下载安装（免费领养宠物的app下载安装）">免费领养宠物的app下载安装（免费领养宠物的app下载安装）</a></li>
                        <li class="py-2"><a href="/html/category/article-7736.htm" title="动物医院单位性质代码（动物医院资质级别有哪些）">动物医院单位性质代码（动物医院资质级别有哪些）</a></li>
                        <li class="py-2"><a href="/html/category/article-7553.htm" title="算卦找猫在线（猫丢了找回来百试百灵的方法）">算卦找猫在线（猫丢了找回来百试百灵的方法）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">36</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>