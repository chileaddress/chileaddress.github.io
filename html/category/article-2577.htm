<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2577.htm" />
    <title>设计模式学习笔记代理模式以及动态代理的实现 - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>设计模式学习笔记代理模式以及动态代理的实现</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<p>代理模式（Proxy Design Pattern）是为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象。被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象。</p> <h2 id="一代理模式介绍">一、代理模式介绍</h2> <p>在结束创建型模式的讲解后，从这一篇开始就进入到了结构型模式，结构型模式主要是总结一些类和或对象组合在一起的结构。代理模式在不改变原始代理类的情况下，通过引入代理类来给原始类附加功能。</p> <p>代理模式的主要结构如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/5069e656d8ee8eadc6a05b2d7221481d.jpg" alt="设计模式学习笔记代理模式以及动态代理的实现"></p> <ol> <li><code>Subject</code>：抽象主题类，通过接口或抽象类声明主题和代理对象实现的业务方法</li> <li><code>RealSubject</code>：真实主题类，实现<code>Subject</code>中的具体业务，是代理对象所代表的真实对象</li> <li><code>Proxy</code>：代理类，其内部含有对真实主题的引用，它可以访问、控制或扩展<code>RealSubject</code>的功能</li> <li><code>Client</code>：客户端，通过使用代理类来访问真实的主题类</li> </ol> <p>按照上面的类图，可以实现如下代码：</p> <pre><code class="language-java">//主题类接口 public interface Subject {     void Request(); }  //真实的主题类 public class RealSubject implements Subject{      @Override     public void Request() {         System.out.println("我是真实的主题类");     } }  //代理类 public class Proxy implements Subject{      private RealSubject realSubject;      @Override     public void Request() {         if (realSubject == null) {             realSubject = new RealSubject();         }         realSubject.Request();     } }  //客户端 public class Client {     public static void main(String[] args) {         Proxy proxy = new Proxy();         proxy.Request();     } }</code></pre> <p>代理模式有比较广泛的使用，比如<code>Spring AOP</code>、<code>RPC</code>、缓存等。在 Java 中，根据代理的创建时期，可以将代理模式分为静态代理和动态代理，下面就来分别阐述。</p> <h2 id="二代理模式实现">二、代理模式实现</h2> <p>动态代理和静态代理的区分就是语言类型是在运行时检查还是在编译期检查。</p> <h3 id="21-静态代理">2.1 静态代理</h3> <p>静态代理是指在编译期，也就是在JVM运行之前就已经获取到了代理类的字节码信息。即Java源码生成<code>.class</code>文件时期：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/68a22591faf8b6f057e74eb3210c67e4.jpg" alt="设计模式学习笔记代理模式以及动态代理的实现"></p> <p>由于在JVM运行前代理类和真实主题类已经是确定的，因此也被称为静态代理。</p> <p>在实际使用中，通常需要定义一个公共接口及其方法，被代理对象（目标对象）与代理对象一起实现相同的接口或继承相同的父类。其实现代码就是第一节中的代码。</p> <h3 id="22-动态代理">2.2 动态代理</h3> <p>动态代理，也就是在JVM运行时期动态构建对象和动态调用代理方法。</p> <p>常用的实现方式是反射。<strong>反射机制</strong>是指程序在运行期间可以访问、检测和修改其本身状态或行为的一种能力，使用反射我们可以调用任意一个类对象，以及其中包含的属性及方法。比如JDK Proxy。</p> <p>此外动态代理也可以通过ASM(Java 字节码操作框架)来实现。比如CGLib。</p> <h4 id="221-jdk-proxy">2.2.1 JDK Proxy</h4> <p>这种方式是JDK自身提供的一种方式，它的实现不需要引用第三方类，只需要实现<code>InvocationHandler</code>接口，重写<code>invoke()</code>方法即可。代码实现如下所示：</p> <pre><code class="language-java">public class ProxyExample {      static interface Car {         void running();     }     static class Bus implements Car {         @Override         public void running() {             System.out.println("bus is running");         }     }     static class Taxi implements Car {         @Override         public void running() {             System.out.println("taxi is runnig");         }     } 	//核心部分 JDK Proxy 代理类     static class JDKProxy implements InvocationHandler {         private Object target;          public Object getInstance(Object target) {             this.target = target;             //获得代理对象             return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);          }          @Override         public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {             Object result = method.invoke(target, args);             return result;         }     }      public static void main(String[] args) {         JDKProxy jdkProxy = new JDKProxy();         Car instance = (Car) jdkProxy.getInstance(new Taxi());         instance.running();     } }</code></pre> <p>动态代理的核心是实现<code>Invocation</code>接口，我们再看看<code>Invocation</code>接口的源码：</p> <pre><code class="language-java">public interface InvocationHandler {      public Object invoke(Object proxy, Method method, Object[] args)         throws Throwable; }</code></pre> <p>实际上是通过<code>invoke()</code>方法来触发代理的执行方法。最终使得实现<code>Invocation</code>接口的类具有动态代理的能力。</p> <p>动态代理的好处在于不需要和静态代理一样提前写好公共的代理接口，只需要实现<code>Invocation</code>接口就可拥有动态代理能力。下面我们再来看看 CGLib 是如何实现的</p> <h4 id="222-cglib">2.2.2 CGLib</h4> <p>CGLib 动态代理采取的是创建目标类的子类的方式，通过子类化，我们可以达到近似使用被调用者本身的效果。其实现代码如下所示：</p> <pre><code class="language-java">public class CGLibExample {      static class car {         public void running() {             System.out.println("car is running");         }     }      static class CGLibProxy implements MethodInterceptor {         private Object target;          public Object getInstance(Object target) {             this.target = target;             Enhancer enhancer = new Enhancer();             //设置父类为实例类             enhancer.setSuperclass(this.target.getClass());             //回调方法             enhancer.setCallback(this);             //创建代理对象             return enhancer.create();         }         @Override         public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {             Object result = methodProxy.invokeSuper(o, objects);             return result;         }     }      public static void main(String[] args) {         CGLibProxy cgLibProxy = new CGLibProxy();         car instance = (car) cgLibProxy.getInstance(new car());         instance.running();     } }</code></pre> <p>从代码可以看出CGLib 也是通过实现代理器的接口，然后再调用某个方法完成动态代理，不同的是CGLib在初始化被代理类时，是通过<code>Enhancer</code>对象把代理对象设置为被代理类的子类来实现动态代理：</p> <pre><code class="language-java">Enhancer enhancer = new Enhancer(); //设置父类为实例类 enhancer.setSuperclass(this.target.getClass()); //回调方法 enhancer.setCallback(this); //创建代理对象 return enhancer.create();</code></pre> <h4 id="223-jdk-proxy-和-cglib-的区别">2.2.3 JDK Proxy 和 CGLib 的区别</h4> <ol> <li>来源：JDK Proxy 是JDK 自带的功能，CGLib 是第三方提供的工具</li> <li>实现：JDK Proxy 通过拦截器加反射的方式实现；CGLib 基于ASM实现，性能比较高</li> <li>接口：JDK Proxy 只能代理继承接口的类，CGLib 不需要通过接口来实现，它是通过实现子类的方式来完成调用</li> </ol> <h2 id="三代理模式的应用场景">三、代理模式的应用场景</h2> <h3 id="31-mapperproxyfactory">3.1 MapperProxyFactory</h3> <p>在MyBatis 中，也存在着代理模式的使用，比如<code>MapperProxyFactory</code>。其中的<code>newInstance()</code>方法就是生成一个具体的代理来实现功能，代码如下：</p> <pre><code class="language-java">public class MapperProxyFactory<T> {   private final Class<T> mapperInterface;        private final Map<Method, MapperMethodInvoker> methodCache = new ConcurrentHashMap<>();        public MapperProxyFactory(Class<T> mapperInterface) {     this.mapperInterface = mapperInterface;   }    public Class<T> getMapperInterface() {     return mapperInterface;   }    public Map<Method, MapperMethodInvoker> getMethodCache() {     return methodCache;   }    // 创建代理类   @SuppressWarnings("unchecked")   protected T newInstance(MapperProxy<T> mapperProxy) {     return (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), new Class[] { mapperInterface }, mapperProxy);   }    public T newInstance(SqlSession sqlSession) {     final MapperProxy<T> mapperProxy = new MapperProxy<>(sqlSession, mapperInterface, methodCache);     return newInstance(mapperProxy);   } }</code></pre> <h3 id="32-spring-aop">3.2 Spring AOP</h3> <p>代理模式最常使用的一个应用场景就是在业务系统中开发一些非功能性需求，比如监控、统计、鉴权、限流、事务、日志等。将这些附加功能与业务功能解耦，放在代理类中统一处理，让程序员只需要关注业务方面的开发。而Spring AOP 的切面实现原理就是基于动态代理</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/32e055a24fcf4ce02bde01419ed36176.jpg" alt="设计模式学习笔记代理模式以及动态代理的实现"></p> <p>Spring AOP 的底层通过上面提到的 JDK Proxy 和 CGLib动态代理机制，为目标对象执行横向织入。当Bean实现了接口时， Spring就会使用JDK Proxy，在没有实现接口时就会使用 CGLib。也可以在配置中强制使用 CGLib：</p> <p><code></code></p> <h3 id="33-rpc-框架的封装">3.3 RPC 框架的封装</h3> <p>RPC 框架的实现可以看作成是一种代理模式，通过远程代理、将网络同步、数据编解码等细节隐藏起来，让客户端在使用 RPC 服务时，不必考虑这些细节。</p> <h2 id="参考资料">参考资料</h2> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://c.biancheng.net/view/1359.html"  target="_blank" rel="nofollow">http://c.biancheng.net/view/1359.html</p> <p>https://kaiwu.lagou.com/course/courseInfo.htm?courseId=59#/detail/pc?id=1768</p> <p>https://time.geekbang.org/column/article/7489</p> <p>https://time.geekbang.org/column/article/201823</p> <p>《Java 重学设计模式》</p> <p>《大话设计模式》</p> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2576.htm">java sm3国密算法加密、验证工具类</a></p>
                                                        <p>下一个：<a href="/html/category/article-2578.htm">Kafka消费者rebalanced异常分析</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7092.htm" title="免费领养宠物的app下载安装（免费领养宠物的app下载安装）">免费领养宠物的app下载安装（免费领养宠物的app下载安装）</a></li>
                        <li class="py-2"><a href="/html/category/article-7644.htm" title="宠物领养数据分析 宠物领养数据分析报告">宠物领养数据分析 宠物领养数据分析报告</a></li>
                        <li class="py-2"><a href="/html/category/article-7184.htm" title="葫芦岛领养狗狗（葫芦岛领养狗狗电话）">葫芦岛领养狗狗（葫芦岛领养狗狗电话）</a></li>
                        <li class="py-2"><a href="/html/category/article-7369.htm" title="国产十大放心狗粮品牌排行榜性价比高（国产十大放心狗粮品牌排行榜,性价比高的狗粮推荐）">国产十大放心狗粮品牌排行榜性价比高（国产十大放心狗粮品牌排行榜,性价比高的狗粮推荐）</a></li>
                        <li class="py-2"><a href="/html/category/article-7690.htm" title="机油比较好的牌子(机油比较好的品牌有哪些品牌标志)">机油比较好的牌子(机油比较好的品牌有哪些品牌标志)</a></li>
                        <li class="py-2"><a href="/html/category/article-7506.htm" title="狗粮排行榜价格表（狗粮最新排名）">狗粮排行榜价格表（狗粮最新排名）</a></li>
                        <li class="py-2"><a href="/html/category/article-7000.htm" title="宠物粮调研 宠物粮调研报告模版">宠物粮调研 宠物粮调研报告模版</a></li>
                        <li class="py-2"><a href="/html/category/article-7323.htm" title="买二手电脑要注意什么?什么牌子的好用(买二手电脑要注意什么?什么牌子的好呢)">买二手电脑要注意什么?什么牌子的好用(买二手电脑要注意什么?什么牌子的好呢)</a></li>
                        <li class="py-2"><a href="/html/category/article-6123.htm" title="南京宠物领养中心电话（南京领养宠物都要做什么条件）">南京宠物领养中心电话（南京领养宠物都要做什么条件）</a></li>
                        <li class="py-2"><a href="/html/category/article-7415.htm" title="一枫叶打一成语是什么（一片枫叶成语）">一枫叶打一成语是什么（一片枫叶成语）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>