<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2723.htm" />
    <title>Redis(六) 数据库和缓存的一致性问题 - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>Redis(六) 数据库和缓存的一致性问题</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <div class="toc"> <h3>文章目录</h3> <ul> <li> <ul> <li>一 先上结论</li> <li>二 四种常用的缓存更新策略：</li> <li>三 写操作的缓存更新策略分析</li> <li> <ul> <li>一 双更策略：</li> <li>二 删除策略：</li> <li>三 延时双删策略：</li> </ul> </li> <li>四 失败重试</li> <li> <ul> <li>同步重试：</li> <li>异步重试：</li> <li>借助消息队列：</li> <li>订阅数据库变更日志：</li> </ul> </li> <li>五 场景方案</li> </ul> </li> </ul> </div> <p> 参考：<br />缓存和数据库一致性问题<br />如何保持mysql和redis中数据的一致性<br />Redis缓存与数据库一致性解决方案</p> <h2>一 先上结论</h2> <p>一旦决定使用缓存，那必然要<strong>面临一致性问题</strong>，任何一种解决方案都无法保证绝对意义上的数据一致性。<br /> “性能和一致性就像天平的两端，无法做到都满足要求。”</p> <p>一致性问题需要 具体场景，具体分析。</p> <p>缓存和数据库的一致性问题不是一成不变的，分析一致性问题，需要考虑以下3点：<br /><strong>缓存数据库操作的原子性（成功执行）</strong>、<strong>并发</strong>、<strong>缓存击穿</strong>。</p> <p>缓存有两种模式：读写缓存、只读缓存。<br /> 读写缓存：若要对数据进行<strong>增删改</strong>，需要在Cache进行。 同时根据采取的写回策略，决定是否同步写回DB。<br /> 只读缓存：若要对数据进行<strong>增删改</strong>，只需在DB进行。同时根据缓存更新策略，决定何时更新或者删除。<br /> 本文仅针对<strong>只读缓存</strong>，结合具体的场景进行讨论。</p> <h2>二 四种常用的缓存更新策略：</h2> <p>对于<strong>读操作</strong>，加了缓存后的读操作流程，此过程不存在不一致问题：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220823/db2d6a6fc68a963a9a38ab179949900d.jpg" alt="Redis(六) 数据库和缓存的一致性问题"><br /> 对于<strong>新增操作</strong>，直接写到DB，不操作Cache。<br /> 对于<strong>删除操作</strong>，直接双删。先删DB再删Cache，或者先删Cache再删DB，同时保证两个操作的成功执行。<br /> 对于<strong>写操作</strong>，有四种常用的缓存更新策略，分别是：<br /> 先更新数据库再删除缓存<br /> 先删除缓存再更新数据库<br /> 先更新数据库再更新缓存<br /> 先更新缓存再更新数据库</p> <h2>三 写操作的缓存更新策略分析</h2> <p>由于机器卡顿、网络延迟、服务器距离不一致等原因，以下各情景都是有可能出现的。</p> <h3>一 双更策略：</h3> <p>第一个问题-无法保证数据库和缓存读操作的原子性：<br /> 当更新操作无法成功执行时，无论先更新哪一个，<strong>但凡第二步操作发生异常</strong>，就会导致数据不一致，对业务造成影响。</p> <p>第二个问题-并发：（缓存脏数据）<br /> 场景：<strong>两个写操作线程并发更新同一条数据</strong>，此时可能会由于<strong>执行时序发生错乱</strong>，而导致数据不一致问题。<br /> 以先更DB再更Cache的策略为例，写操作A和写操作B先后更新key1，在操作A未完成时操作B便开始执行，假如执行顺序如下：A先更DB中的key1为a，B更新DB中的key1为b，B更新Cache中的key1为b，A更新Cache中的key为a。最终，DB中key1为b，Cache中的key1为a，数据不一致。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220823/6a47fd4293a864d72568f309d2380ad1.jpg" alt="Redis(六) 数据库和缓存的一致性问题"></p> <p>第三个问题-缓存击穿：不存在</p> <p>其他问题：<br /> 双更策略的<strong>缓存利用率不高</strong>，每次数据发生变更，都会更新缓存，但是缓存中的数据不一定会被立即读取，这就会<strong>导致缓存中可能存放了很多非热点数据</strong>，浪费缓存资源。（最主要的原因！）<br /> 而且很多情况下，写到缓存中的值，并不是与数据库中的值一一对应的，很有可能是先查询数据库，再经过一系列计算得出一个值再写到缓存中，对于非热点数据的一系列计算，还会<strong>造成机器性能的浪费</strong>。</p> <p>结论：<strong>因此，在大多数场景下，都不建议采用双更策略。</strong></p> <h3>二 删除策略：</h3> <p>第一个问题-无法保证数据库和缓存读操作的原子性：<br /> 同上分析，无论先更新还是先删除，但凡第二步操作异常，都会导致数据不一致。</p> <p>第二个问题-并发：需要分别考虑<br /> 1 先删除缓存再更新数据库<br /> 场景：写操作和读操作并发执行。<br /><strong>两个条件</strong>：先写再读，更新DB的时间 > 读DB+写Cache时间。<br /> 写操作A更新key1尚未完成时，读操作B查询key1，假如执行顺序如下：A先删了Cache中的key1，正在更新DB，此时，操作B从缓存中读key1不存在，去DB中读旧的key1，再写入Cache旧的key1，然后操作A更新DB的操作完成。此时，DB中是新值，Cache中是旧值，数据不一致。<br /> 2 先更新数据库再删除缓存<br /> 场景：<strong>写操作和读操作并发执行</strong>。<br /><strong>三个条件</strong>：缓存中的key刚好被清除（也许是失效、也许是写操作执行的删除），先读再写，读DB+写Cache > 写DB+删Cache<br /> 缓存中的key刚好被清除，读操作查询key1未完成时，写操作B更新key1，假如执行顺序如下：A从缓存中读key1不存在，A去DB中读旧的key1，此时，B开始更新key1，B先将新的key1写入DB，B去Cache中删旧的key1发现不存在，此时，A操作再把从DB读出的旧的key1写入Cache。此时，DB中是新值，Cache中是旧值，数据不一致。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220823/ca5447b882ab352ba485f72b6d27a86f.jpg" alt="Redis(六) 数据库和缓存的一致性问题"></p> <p>后者<strong>这种场景出现的概率很低</strong>，尤其是第三个条件发生的概率其实是非常低的。因为，写数据库一般会先加锁，所以写数据库，通常是要比读数据库的时间更长的。</p> <p>第三个问题-缓存击穿<br /> 任何删除Cache的行为，在高并发场景下，都有可能导致缓存击穿。可以采用<strong>读操作互斥、定时更新</strong>的方案，缓解缓存击穿问题。</p> <p>结论：<strong>大多场景下，建议采用“先更新数据库，再删除缓存策略”，可以最大程度上保证数据一致性。</strong><br /> 注：后删策略也是Spring-cache中使用的更新策略，Cache Aside Pattern旁路缓存模式中的更新策略。</p> <h3>三 延时双删策略：</h3> <p><strong>用于解决后删策略产生的数据不一致问题</strong>，极端情况下的并发读写操作。<br /> 缓存都变成了旧值，解决这类问题最有效的办法就是，把缓存删掉。<br /> 但是不能立即删，而是需要延迟删，删除操作放入延迟队列中，这就是业界给出的方案：<br /> 缓存延迟双删策略，即在线程 A更新完数据库、 删除缓存之后，<strong>先休眠一会，再删除一次缓存</strong>。</p> <p><strong>延迟时间</strong>要大于线程 B 读取数据库 + 写入缓存的时间。但是，这个时间在分布式和高并发场景下，其实是很难评估的。凭借经验大致估算这个延迟时间，<strong>只能尽可能地降低不一致的概率</strong>，极端情况下，还是会发生不一致现象。</p> <p>所以实际使用中，还是建议采用<strong>先更新数据库，再删除缓存</strong>的策略。</p> <p>其他策略：read-through write-through write-behind</p> <h2>四 失败重试</h2> <p>目的：针对后删策略中，更新操作时<strong>删除缓存失败</strong>的问题，用于保证缓存操作执行成功。（操作的原子性）</p> <h3>同步重试：</h3> <p>只要执行失败，就一直重试，直到删除成功。<br /> 缺点：立即重试可能仍会失败，重试多少次为止，持续占用线程，影响redis服务器为别的请求提供服务。</p> <h3>异步重试：</h3> <p>失败后把重试请求写入消息队列；</p> <h3>借助消息队列：</h3> <p>为了避免第二步执行失败，我们可以<strong>把操作缓存的请求，直接放到消息队列中</strong>，由消费者来操作缓存。</p> <p>为什么一定要写入消息队列？<br /> 在执行失败的线程中一直重试时，如果项目重启了，那这次重试请求就会丢失，这条数据就会一直不一致。</p> <p>消息队列的优势：<br /><strong>消息队列保证可靠性</strong>-写到队列中的消息，成功消费之前不会丢失，重启项目也不担心；<br /><strong>消息队列保证消息成功投递</strong>-下游从队列拉取消息，成功消费后才会删除消息，否则还会继续投递消息给消费者，符合重试的场景。</p> <p>需要考虑的问题：写消息队列的操作也可能会失败，引入消息队列会增加维护成本。<br /> 操作缓存和写消息队列，同时失败的概率其实是很小的；项目中一般都会用到消息队列，维护成本并没有新增很多。引入消息队列来解决这个问题，是比较合适的。<br /> 此时架构模型如下图所示：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220823/b0d9659e534fdf5589c54ae13ce3a80a.jpg" alt="Redis(六) 数据库和缓存的一致性问题"></p> <h3>订阅数据库变更日志：</h3> <p>Binlog-数据库变更日志<br /> 此时，更新数据时，<strong>只需修改数据库</strong>，无需操作缓存。根据订阅的变更日志异步操作缓存。</p> <p>拿 MySQL 举例，当一条数据发生修改时，MySQL 就会产生一条变更日志（Binlog），我们可以<strong>订阅这个日志，拿到具体操作的数据，然后再去删除对应的缓存</strong>。<br /> 订阅数据库变更日志，目前也有比较成熟的开源<strong>中间件</strong>，例如阿里的 canal。</p> <p>使用这种方案的优点在于：<br /> 无需考虑写消息队列失败情况：只要写 MySQL 成功，Binlog 肯定会有<br /> 自动投递到下游队列：canal 自动把数据库变更日志投递给下游的消息队列<br /> 缺点：需要投入精力去维护 canal 的高可用和稳定性。<br /> 此时架构模型如下图所示：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220823/ad3f75b2ed257f4b3f574fb0a4780fd7.jpg" alt="Redis(六) 数据库和缓存的一致性问题"><br /> 总结：<strong>保证数据库和缓存一致性，推荐采用「先更新数据库，再删除缓存」方案，并配合「消息队列」或「订阅变更日志」的方式来做</strong>。</p> <h2>五 场景方案</h2> <p>业务体量小，且对数据一致性要求不高的业务场景：<br /> 可以考虑遇到写操作<strong>只更新DB不更新Cache，然后定期更新缓存</strong>的策略。<br /> 优点：所有读请求都可以直接命中缓存，不需要再查数据库，性能高。<br /> 缺点：因为是定时刷新缓存，<strong>缓存和数据库存在不一致</strong>，程度取决于更新缓存的频率</p> <p>业务体量很大的场景，如何解决缓存利用率和一致性问题：<br /> 缓存利用率：缓存中只保留最近访问的热点数据。写入缓存中的数据，都设置失效时间。<br /> 缓存更新策略：先更新数据库，再删除缓存<br /> 失败重试策略：异步更新，借助消息队列 或 订阅变更日志</p> <p>案例：使用虚引用优化redis与mysql数据同步的锁粒度问题 、降低在更新缓存时的锁粒度、使用队列实现redis数据一致性</p> </div> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2722.htm">Controller层代码这么写，简洁又优雅！</a></p>
                                                        <p>下一个：<a href="/html/category/article-2724.htm">python神经网络tf.name_scope和tf.variable_scope函数区别_python</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7599.htm" title="哪里可以领养宠物狗狗（哪里可以领养宠物狗狗呢）">哪里可以领养宠物狗狗（哪里可以领养宠物狗狗呢）</a></li>
                        <li class="py-2"><a href="/html/category/article-7461.htm" title="开动物医院需要什么手续和条件（开设动物医院的条件有哪些?）">开动物医院需要什么手续和条件（开设动物医院的条件有哪些?）</a></li>
                        <li class="py-2"><a href="/html/category/article-7323.htm" title="买二手电脑要注意什么?什么牌子的好用(买二手电脑要注意什么?什么牌子的好呢)">买二手电脑要注意什么?什么牌子的好用(买二手电脑要注意什么?什么牌子的好呢)</a></li>
                        <li class="py-2"><a href="/html/category/article-7322.htm" title="cmz拉链什么档次的衣服用(cmz拉链什么档次的衣服)">cmz拉链什么档次的衣服用(cmz拉链什么档次的衣服)</a></li>
                        <li class="py-2"><a href="/html/category/article-8012.htm" title="动物医院应聘（动物医院应聘要求）">动物医院应聘（动物医院应聘要求）</a></li>
                        <li class="py-2"><a href="/html/category/article-7368.htm" title="专门买宠物的APP（专门买宠物的软件）">专门买宠物的APP（专门买宠物的软件）</a></li>
                        <li class="py-2"><a href="/html/category/article-7460.htm" title="动物疫苗空瓶无害化处理流程（动物疫苗空瓶回收处理制度）">动物疫苗空瓶无害化处理流程（动物疫苗空瓶回收处理制度）</a></li>
                        <li class="py-2"><a href="/html/category/article-6954.htm" title="天恩宠物医院（天恩宠物医院怎么样）">天恩宠物医院（天恩宠物医院怎么样）</a></li>
                        <li class="py-2"><a href="/html/category/article-7093.htm" title="男士十大轻奢品牌钱包都有哪些牌子(男士十大轻奢品牌钱包都有哪些款式)">男士十大轻奢品牌钱包都有哪些牌子(男士十大轻奢品牌钱包都有哪些款式)</a></li>
                        <li class="py-2"><a href="/html/category/article-7874.htm" title="免费领养宠物犬是真的吗还是假的（免费领养狗是真的吗）">免费领养宠物犬是真的吗还是假的（免费领养狗是真的吗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>