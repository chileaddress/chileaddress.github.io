<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2562.htm" />
    <title>Shell基础 — 10、Bash中的特殊符号详解 - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>Shell基础 — 10、Bash中的特殊符号详解</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<blockquote> <p>提示：本篇文章接上一篇文章，主要说说<code>()</code>小括号和<code>{}</code>大括号的区别与使用。</p> </blockquote> <h2 id="8小括号">8、<code>()</code>小括号</h2> <p><code>()</code>：用于一串命令执行时，<code>()</code>中的命令会在子Shell中运行。（和下面大括号一起说明）</p> <h2 id="9大括号">9、<code>{}</code>大括号</h2> <p><code>{}</code>：用于一串命令执行时，<code>{}</code>中的命令会在当前Shell中执行。也可以用于变量变形与替换。</p> <h3 id="1父shell和子shell">（1）父Shell和子Shell</h3> <p>在介绍小括号和大括号的区别之前，我们先要解释一个概念，那就是父Shell和子Shell。</p> <p>用户登录到Linux系统后，系统将启动一个用户Shell。在这个Shell中，可以使用Shell命令声明变量，也可以创建并运行Shell脚本程序。运行Shell脚本程序时，系统将创建一个子Shell。此时，系统中将有两个Shell，一个是登录时系统启动的Shell，另一个是系统为运行脚本程序创建的Shell。当一个脚本程序运行完毕，它的脚本Shell将终止，可以返回到执行该脚本之前的Shell。从这种意义上来 说，用户可以有许多Shell，每个Shell都是由某个Shell（称为父Shell）派生的。</p> <p>在Linux系统中的默认Shell是<code>bash</code>，在<code>bash</code>中是可以调用新的<code>bash</code>的。在开启远程终端时候所启动的默认的交互Shell就是父Shell，只需要直接执行<code>bash</code>命令，就会创建一个新的Shell，这个Shell就是子Shell。</p> <p>执行下面命令：</p> <pre><code class="language-shell">[root@localhost ~]# bash</code></pre> <p>我们就开启一个子Shell。</p> <h3 id="2区分父shell子shell">（2）区分父Shell子Shell</h3> <p>要区分是父Shell还是子Shell，需要使用前面所学的<code>ps</code>命令，查看进程命令来进行判断。</p> <ul> <li>执行<code>ps -f</code>查看系统进程。<br /><img decoding="async" src="https://img2022.cnblogs.com/blog/909968/202204/909968-20220411110158019-371552741.png" alt="Shell基础 — 10、Bash中的特殊符号详解"></li> <li>执行<code>bash</code>命令，开启一个新的Shell，并再次查看系统进程。<br /><img decoding="async" src="https://img2022.cnblogs.com/blog/909968/202204/909968-20220411110214266-1313881434.png" alt="Shell基础 — 10、Bash中的特殊符号详解"><br /> 可以看到上图中，第二个进程的父<code>id</code>是第一个进程，所以第二个进程的<code>bash</code>是子Shell。</li> <li>退出子Shell，并再次查看系统进程。<br /><img decoding="async" src="https://img2022.cnblogs.com/blog/909968/202204/909968-20220411110238917-1716008796.png" alt="Shell基础 — 10、Bash中的特殊符号详解"><br /> 可以看到子Shell进程结束，消失了。</li> </ul> <h3 id="3查看父子shell的关系">（3）查看父子Shell的关系</h3> <p>我们可以通过<code>pstree</code>命令（查看进程树），来查看父子Shell的关系。</p> <p>在Red Hat 6 中，所有的进程都是<code>init</code>进程的子进程。如下图：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/8459bb36e59e9ecdea2445743ffcb806.jpg" alt="Shell基础 — 10、Bash中的特殊符号详解"></p> <p>我们可以看到在<code>init</code>进程下，开启了一个<code>sshd</code>的进程，这个进程就是远程登陆进程。我们执行过一次远程登陆<code>sshd</code>，和开启<code>bash</code>功能，在此<code>bash</code>下执行过一次<code>pstree</code>命令。</p> <p>在当前Shell中，再执行一边<code>bash</code>命令，再次执行<code>pstree</code>命令（查看进程树）。<br /> 如下图：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f2b5e0f80de2b64dc57adcedb99c342c.jpg" alt="Shell基础 — 10、Bash中的特殊符号详解"></p> <p>我们可以从上图中看到，我在第一个<code>bash</code>下，又开启了一个新的<code>bash</code>，在新<code>bash</code>中执行了<code>pstree</code>命令。</p> <p>所以说第一个<code>bash</code>是父（也就是父Shell），第二个<code>bash</code>是子（也就是子Shell）。</p> <h3 id="4父子shell的关系拓展">（4）父子Shell的关系拓展。</h3> <p>父Shell可以创建子Shell，在子Shell中还可以创建自己的子Shell。</p> <p>它们的关系如下图所示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f6b171e63ba51412dfca1b0e5e02a71b.jpg" alt="Shell基础 — 10、Bash中的特殊符号详解"></p> <p>下面来演示下这个关系图的Shell创建，和它们之前的关系层次。</p> <p>下图中又创建了二个子Shell，总共三个子Shell。依次是子Shell, 孙Shell, 曾孙Shell。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/736245f492ad6138bb3cb89d36e10761.jpg" alt="Shell基础 — 10、Bash中的特殊符号详解"></p> <p>下图使用<code>ps -f</code>命令，通过PPID列出谁是谁的父进程。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/26ad4ff5865e31f065df2a562ddddf3d.jpg" alt="Shell基础 — 10、Bash中的特殊符号详解"></p> <blockquote> <p>注意：生成子Shell的成本不低，而且速度还慢，创建嵌套的子Shell去处理命令进程性能更为严重。</p> </blockquote> <p>通过输入<code>exit</code>命令能有条不絮的退出子Shell，例如上面的三个子Shell, 首先从曾孙Shell退出。<br /> 如下图所示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/a1e852915e338bb423a0c11ebdb531d9.jpg" alt="Shell基础 — 10、Bash中的特殊符号详解"></p> <blockquote> <p>注意：当没有了子Shell时，再输入<code>exit</code>命令，将退出控制台终端。</p> </blockquote> <h3 id="5小括号和大括号的区别">（5）小括号和大括号的区别</h3> <p>知道了父Shell和子Shell的关系，我们接着解释小括号和大括号的区别。</p> <p>小括号和大括号的主要区别在于，在Shell程序执行的时候，小括号或者大括号中的内容是在父Shell执行还是在子Shell中执行。</p> <p>下面我们总结一下小括号和大括号的主要区别：</p> <ul> <li><code>()</code>中执行一串命令时，需要重新开一个子Shell进行执行。<br /> 在当前Shell中<code>name=ss</code>，当执行到<code>()</code>中命令的时候，会自动开启一个子Shell，在子Shell中<code>name</code>的变量赋予了<code>mm</code>，当<code>()</code>中命令运行完，子Shell进程就结束了，进程消失。里边的变量都不会保存，并自动返回到父Shell中，也就是回归到当前Shell，<code>name</code>的值还是原来Shell中赋予的<code>ss</code>值。<br /> 示例如下：</p> <pre><code class="language-shell">#在父Shell中定义变量name的值是ss [root@localhost ~]# name=ss  #如果用（）括起来一串命令，这些命令都可以执行。 #给name变量重新赋值，但是这个值只在子Shell中生效 [root@localhost ~]#（name=mm；echo $name） mm  #父Shell中name的值还是ss，而不是mm [root@localhost ~]# echo $name ss</code></pre> </li> <li><code>{ }</code>中执行一串命令时，是在当前Shell执行。 <pre><code class="language-shell">#用大括号来进行串命令的执行时 #name变量的修改是直接在父Shell当中的 #注意大括号的格式 [root@localhost ~]# {  name=mm；echo $name； } mm  #所以name变量的值已经被修改了 [root@localhost ~]# echo $name mm</code></pre> <p>就相当于直接在当前Shell执行<code>{}</code>中的语句，那么不写<code>{}</code>的结果是一样的。</li> <li><code>()</code>和<code>{}</code>都是把一串的命令放在括号里面，并且命令之间用<code>；</code>号隔开。</li> <li><code>()</code>最后一个命令可以不用分号结尾。 <pre><code class="language-shell">[root@localhost ~]# ( name=lm; echo $name )</code></pre> </li> <li><code>{}</code>中最后一个命令要用分号结尾。 <pre><code class="language-shell">[root@localhost ~]# { 空格 name=lm; echo $name; }</code></pre> </li> <li><code>{}</code>中的第一个命令和左括号之间必须要有一个空格。 <pre><code class="language-shell">[root@localhost ~]# { 空格 name=lm; echo $name; }</code></pre> </li> <li><code>()</code>里的各命令不必和括号有空格。</li> <li><code>()</code>和<code>{}</code>中，括号里面的某个命令的重定向只影响该命令，但括号外的重定向则影响到括号里的所有命令。</li> </ul> <blockquote> <p>说明：小括号和大括号不太好理解，用的也不是太多，能看懂即可，工作中用不用在你自己。</p> </blockquote> <h3 id="10中括号">10、<code>[]</code>中括号</h3> <p><code>[]</code>：用于变量的测试。（之后详解讲解）</p> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2561.htm">Hbase架构与存储组件结构与功能</a></p>
                                                        <p>下一个：<a href="/html/category/article-2563.htm">java多线程之自定义消息队列</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4568.htm" title="瑞鹏宠物中心医院在哪里啊（瑞鹏宠物医院总院电话）">瑞鹏宠物中心医院在哪里啊（瑞鹏宠物医院总院电话）</a></li>
                        <li class="py-2"><a href="/html/category/article-5946.htm" title="宠物领养协议书怎么生效的 宠物领养协议书怎么生效的呢">宠物领养协议书怎么生效的 宠物领养协议书怎么生效的呢</a></li>
                        <li class="py-2"><a href="/html/category/article-6955.htm" title="2021年春节旅游景点(2021年春节期间旅游景点)">2021年春节旅游景点(2021年春节期间旅游景点)</a></li>
                        <li class="py-2"><a href="/html/category/article-6586.htm" title="开宠物店基本要懂的（开宠物店基本要懂的哪些知识）">开宠物店基本要懂的（开宠物店基本要懂的哪些知识）</a></li>
                        <li class="py-2"><a href="/html/category/article-4604.htm" title="成都宠物救助热线电话（成都市宠物救助站是24小时的吗）">成都宠物救助热线电话（成都市宠物救助站是24小时的吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7000.htm" title="宠物粮调研 宠物粮调研报告模版">宠物粮调研 宠物粮调研报告模版</a></li>
                        <li class="py-2"><a href="/html/category/article-7231.htm" title="海贼王修佐（海贼王修佐vs鼹鼠）">海贼王修佐（海贼王修佐vs鼹鼠）</a></li>
                        <li class="py-2"><a href="/html/category/article-6034.htm" title="进口电容品牌有哪些牌子(进口电容品牌有哪些好)">进口电容品牌有哪些牌子(进口电容品牌有哪些好)</a></li>
                        <li class="py-2"><a href="/html/category/article-7093.htm" title="男士十大轻奢品牌钱包都有哪些牌子(男士十大轻奢品牌钱包都有哪些款式)">男士十大轻奢品牌钱包都有哪些牌子(男士十大轻奢品牌钱包都有哪些款式)</a></li>
                        <li class="py-2"><a href="/html/category/article-6079.htm" title="炒鸡蛋怎么做?(炒鸡蛋怎么做最好吃?)">炒鸡蛋怎么做?(炒鸡蛋怎么做最好吃?)</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>