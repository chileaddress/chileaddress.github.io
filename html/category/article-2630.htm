<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2630.htm" />
    <title>Lock锁之公平锁与非公平锁(AQS实现原理) - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>Lock锁之公平锁与非公平锁(AQS实现原理)</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h4>锁的可重入性</h4> <p>在Concurrent包中的锁都是可重入锁，一般都命名为ReentrantX。可重入锁是指当一个线程调用object.lock拿到锁，进入互斥区后，再次调用object.lock，仍然可以拿到该锁。<br /> synchtonized关键字就是可重入锁。</p> <h4>ReentrantLock的类继承结构<img decoding="async" src="http://img.555519.xyz/uploads/20221120/e001b139f52d77a8773156f6993f36fe.jpg" alt="Lock锁之公平锁与非公平锁(AQS实现原理)"></h4> <h5>Lock中定义的模版方法</h5> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">interface</span><span class="token class-name">Lock</span><span class="token punctuation">{<!-- --></span><span class="token keyword">void</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span><span class="token class-name">InterruptedException</span><span class="token punctuation">;</span><span class="token keyword">boolean</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span><span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token keyword">throws</span><span class="token class-name">InterruptedException</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Condition</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <h5>ReentrantLock中的方法</h5> <p>ReentrantLock本身没有代码逻辑，实现都在Sync内部类中</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">ReentrantLock</span><span class="token keyword">implements</span><span class="token class-name">Lock</span><span class="token punctuation">,</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         sync<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         sync<span class="token operator">=</span> fair<span class="token operator">?</span><span class="token keyword">new</span><span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         sync<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span><span class="token class-name">InterruptedException</span><span class="token punctuation">{<!-- --></span>         sync<span class="token punctuation">.</span><span class="token function">acquireInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token keyword">boolean</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h4>公平锁与非公平锁</h4> <p>Sync是一个抽象类，它有两个子类FairSync与NonfaitSync，分别对应公平锁和非公平锁，在ReentrantLock的构造函数中可以看出来：</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     sync<span class="token operator">=</span> fair<span class="token operator">?</span><span class="token keyword">new</span><span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>对于公平以及非公平的概念，举个例子，一个人去做核酸排队，自己排到队伍末尾，这叫公平，直接去插队这叫做非公平，线程也是一样的，直接去抢锁，显然是不公平的。</p> <h5>锁的基本实现原理</h5> <p>要实现一把具有阻塞或唤醒功能的锁，需要以下几个核心要素：</p> <ol> <li>需要一个state变量，标记该锁的状态，state变量至少有两个值，0、1。对state便利的操作要确保线程安全，也就是会用到CAS操作。</li> <li>需要记录是那个线程持有锁。</li> <li>需要底层支持对一个线程进行阻塞或者唤醒操作。</li> <li>需要一个队列维护所有的阻塞线程。这个队列必须是线程安全的无锁队列，也需要用到CAS。<br /> 对于1，2在类AbstractOwnableSynchronizer以及AbstractQueuedSynchronizer中有体现：</li> </ol> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token keyword">class</span><span class="token class-name">AbstractOwnableSynchronizer</span><span class="token keyword">implements</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">{<!-- --></span><span class="token comment">//记录锁被哪个线程占用</span><span class="token keyword">private</span><span class="token keyword">transient</span><span class="token class-name">Thread</span> exclusiveOwnerThread<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token keyword">class</span><span class="token class-name">AbstractQueuedSynchronizer</span><span class="token keyword">extends</span><span class="token class-name">AbstractOwnableSynchronizer</span><span class="token keyword">implements</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">{<!-- --></span><span class="token comment">//记录锁的状态，通过CAS来改变</span><span class="token keyword">private</span><span class="token keyword">volatile</span><span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>state的取值不仅可以是0，1；还可以大于1，就是为了支持锁的可重入性：</p> <ul> <li>当state=0，没有线程持有锁，exclusiveOwnerThread为null</li> <li>当state=1，有一个线程持有锁，exclusiveOwnerThread为该线程</li> <li>当state>1, 说明该线程重入了该锁</li> </ul> <p>对于3，在Unsafe中提供了阻塞唤醒的原语操作：</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">LockSupport</span><span class="token punctuation">{<!-- --></span><span class="token keyword">private</span><span class="token class-name">LockSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">unpark</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> thread<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>thread<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>             UNSAFE<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         UNSAFE<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>当在线程中调用Park，改线程就会被阻塞，在另外一个线程中调用unpark，就可以唤醒阻塞在park地方的线程<br /> 对于4，在AQS中利用双向链表和CAS来实现一个阻塞队列：</p> <pre><code class="prism language-java"><span class="token keyword">static</span><span class="token keyword">final</span><span class="token keyword">class</span><span class="token class-name">Node</span><span class="token punctuation">{<!-- --></span><span class="token keyword">volatile</span><span class="token class-name">Node</span> prev<span class="token punctuation">;</span><span class="token keyword">volatile</span><span class="token class-name">Node</span> next<span class="token punctuation">;</span><span class="token keyword">volatile</span><span class="token class-name">Thread</span> thread<span class="token punctuation">;</span><span class="token class-name">Node</span> nextWaiter<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token keyword">transient</span><span class="token keyword">volatile</span><span class="token class-name">Node</span> head<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token keyword">transient</span><span class="token keyword">volatile</span><span class="token class-name">Node</span> tail<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>阻塞队列是整个AQS的核心，如下图所示：head指向双向链表头部，tail指向双向链表的尾部，入队就是将信的node放入到tail后面，然后对tail进行CAS操作，出队就是对head进行CAS操作，把head向后移动一个位置<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221120/457a12661db5b5f28ea210f6475ce340.jpg" alt="Lock锁之公平锁与非公平锁(AQS实现原理)"></p> <h5>公平锁lock的实现</h5> <p>直接查看ReentrantLock的lock方法，发现它其实调用的时Sync的lock方法，公平锁的lock方法实现在内部类FairSync中，FairSync中的lock方法调用AbstractQueuedSynchronizer类中的acquire方法：</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">final</span><span class="token keyword">void</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token operator">&&</span><span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <ul> <li>先分析一下tryAcquire方法，这个方法的逻辑实际在FairSync类中：</li> </ul> <pre><code class="prism language-java"><span class="token keyword">protected</span><span class="token keyword">final</span><span class="token keyword">boolean</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 获取当前线程</span><span class="token keyword">final</span><span class="token class-name">Thread</span> current<span class="token operator">=</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取锁标志</span><span class="token keyword">int</span> c<span class="token operator">=</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0标识锁没有被占用，尝试获取锁</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&&</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 锁被占用，判断是否是当前线程，进行锁的可重入性</span><span class="token keyword">else</span><span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token operator">==</span><span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">int</span> nextc<span class="token operator">=</span> c<span class="token operator">+</span> acquires<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>nextc<span class="token operator"><</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">throw</span><span class="token keyword">new</span><span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>在公平锁的tryAcquire方法比非公平锁多了一个逻辑，就是hasQueuedPredecessors方法，这个方法的意思是，在锁未被占用时，通过hasQueuedPredecessors方法判断当前线程如果排在队列的第一个(队列无其他线程)，才会尝试去抢锁，否则继续排队。</p> <ul> <li>tryAcquire尝试获取锁，如果没有获取到锁，则会返回false，调用acquireQueued(addWaiter(Node.EXCLUSIVE))的方法，先看addWaiter(Node.EXCLUSIVE)方法</li> </ul> <pre><code class="prism language-java"><span class="token keyword">private</span><span class="token class-name">Node</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span> mode<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">Node</span> node<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Try the fast path of enq; backup to full enq on failure</span><span class="token class-name">Node</span> pred<span class="token operator">=</span> tail<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pred<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         node<span class="token punctuation">.</span>prev<span class="token operator">=</span> pred<span class="token punctuation">;</span><span class="token comment">//先尝试加到队列尾部，如果不成功，执行下面的enq</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             pred<span class="token punctuation">.</span>next<span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//进行队列的初始化，新建一个空的node，然后不断尝试自旋，直到成功将该节点加入到队列尾部为止</span><span class="token keyword">private</span><span class="token class-name">Node</span><span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">Node</span> t<span class="token operator">=</span> tail<span class="token punctuation">;</span><span class="token comment">// 初始化</span><span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// Must initialize</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 tail<span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>             node<span class="token punctuation">.</span>prev<span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token comment">// 自旋将节点加入到队列尾部</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 t<span class="token punctuation">.</span>next<span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>addWaiter将线程加入到队列尾部之后，执行acquireQueued方法，线程一进入到该方法就会被阻塞，即使有其他线程调用了interrpt方法也不能将其唤醒，除非其他线程释放了锁，并且该线程拿到了锁，才会从acquireQueued返回</p> <pre><code class="prism language-java"><span class="token keyword">final</span><span class="token keyword">boolean</span><span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">boolean</span> failed<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token keyword">boolean</span> interrupted<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 当前节点的前一个节点</span><span class="token keyword">final</span><span class="token class-name">Node</span> p<span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果为头节点则尝试获取锁，获取锁成功后会删除队列的第一个元素</span><span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span> head<span class="token operator">&&</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                 p<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// help GC</span>                 failed<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">return</span> interrupted<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//调用park中断自己，并且判断是否收到中断信号</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token operator">&&</span><span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 interrupted<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>failed<span class="token punctuation">)</span><span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>在该节点加入到阻塞队列之后，判断它前一个节点是不是head，如果是，说明该节点是队列中的唯一一个节点则尝试获取锁，否则调用park中断自己，进入阻塞，等待其它线程调用unpark释放锁后继续执行。</p> <h5>公平锁的unlock实现</h5> <p>ReentrantLock的unLock方法和lock方法一样也没有逻辑，都是调用Sync的父类AbstractQueuedSynchronizer中的release方法，最后调用到Sync的tryRelease</p> <p>AbstractQueuedSynchronizer#release</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">final</span><span class="token keyword">boolean</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//调用tryRelease释放锁成功后</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">Node</span> h<span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&&</span> h<span class="token punctuation">.</span>waitStatus<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//调用unparkSuccessor释放锁</span><span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>Sync#tryRelease释放锁</p> <pre><code class="prism language-java"><span class="token keyword">protected</span><span class="token keyword">final</span><span class="token keyword">boolean</span><span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">int</span> c<span class="token operator">=</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> releases<span class="token punctuation">;</span><span class="token comment">// 只有锁的拥有者才可以释放锁</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">throw</span><span class="token keyword">new</span><span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> free<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         free<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> free<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <h5>非公平锁lock的实现</h5> <p>非公平锁相比校公平锁的获取就是调用lock方法时就尝试获取锁，这就非公平锁的体现的不公平性</p> <pre><code class="prism language-java"><span class="token keyword">final</span><span class="token keyword">void</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 尝试获取锁</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> </div> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2629.htm">HashMap集合</a></p>
                                                        <p>下一个：<a href="/html/category/article-2631.htm">MySQL主从复制和读写分离</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7047.htm" title="兽医资格证考取条件（兽医资格证考取条件要求）">兽医资格证考取条件（兽医资格证考取条件要求）</a></li>
                        <li class="py-2"><a href="/html/category/article-7598.htm" title="动物疫苗去哪里买的 动物疫苗去哪里买的到">动物疫苗去哪里买的 动物疫苗去哪里买的到</a></li>
                        <li class="py-2"><a href="/html/category/article-6724.htm" title="奥拉氟牙膏哪个牌子好(儿童含氟牙膏哪个牌子好)">奥拉氟牙膏哪个牌子好(儿童含氟牙膏哪个牌子好)</a></li>
                        <li class="py-2"><a href="/html/category/article-6909.htm" title="宠物托运疫苗（宠物托运疫苗本需要盖章吗）">宠物托运疫苗（宠物托运疫苗本需要盖章吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7369.htm" title="国产十大放心狗粮品牌排行榜性价比高（国产十大放心狗粮品牌排行榜,性价比高的狗粮推荐）">国产十大放心狗粮品牌排行榜性价比高（国产十大放心狗粮品牌排行榜,性价比高的狗粮推荐）</a></li>
                        <li class="py-2"><a href="/html/category/article-7506.htm" title="狗粮排行榜价格表（狗粮最新排名）">狗粮排行榜价格表（狗粮最新排名）</a></li>
                        <li class="py-2"><a href="/html/category/article-7507.htm" title="流浪猫来预示着家里要死人了（猫不请自来兆头）">流浪猫来预示着家里要死人了（猫不请自来兆头）</a></li>
                        <li class="py-2"><a href="/html/category/article-7461.htm" title="开动物医院需要什么手续和条件（开设动物医院的条件有哪些?）">开动物医院需要什么手续和条件（开设动物医院的条件有哪些?）</a></li>
                        <li class="py-2"><a href="/html/category/article-6034.htm" title="进口电容品牌有哪些牌子(进口电容品牌有哪些好)">进口电容品牌有哪些牌子(进口电容品牌有哪些好)</a></li>
                        <li class="py-2"><a href="/html/category/article-7368.htm" title="专门买宠物的APP（专门买宠物的软件）">专门买宠物的APP（专门买宠物的软件）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">24</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>