<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2801.htm" />
    <title>手写事件发布订阅框架 - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
        </head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>手写事件发布订阅框架</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<h2 id="一前言">一、前言</h2> <p>    发布订阅模式也叫观察者模式，利用该模式可以进行代码解耦，很多框架都用到该设计模式，比如Spring的事件机制，guava的EventBus(事件总线)等，不清楚观察者模式的话可以查看本人之前写的博客《<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/2YSP/p/11602078.html"  target="_blank" rel="nofollow">设计模式之观察者模式</a>》。</p> <p>	为了更好的了解现有的事件框架实现原理，便手写了一个简单的事件发布/订阅框架供大家参考。</p> <h2 id="二设计编码">二、设计编码</h2> <p>首先创建一个事件类继承，所有的事件都继承该类。</p> <pre><code class="language-java">/**  * @author 2YSP  * @date 2022/4/16 16:00  */ public class Event extends EventObject {       /**      * Constructs a prototypical Event.      *      * @param source The object on which the Event initially occurred.      * @throws IllegalArgumentException if source is null.      */     public Event(Object source) {         super(source);     } }</code></pre> <p>JDK要求所有事件都继承EventObject，并通过source得到事件源。</p> <p>然后定义事件监听器接口EventListener</p> <pre><code class="language-java">/**  * @author 2YSP  * @description: 事件监听器  * @date 2022/4/10 14:45  */ public interface EventListener&lt;E extends Event&gt; {      /**      * 触发事件      * @param e      */     void onEvent(E e);  }</code></pre> <p>核心部分就是需要一个类来管理所有的事件监听器，分别具备以下三个方法：</p> <p><strong>registerListener()：</strong>注册一个事件监听器</p> <p><strong>removeListener()：</strong>移除事件监听器</p> <p><strong>notifyListener()：</strong>通知该事件触发的所有监听器</p> <pre><code class="language-java">package cn.sp.event;  import com.google.common.collect.Lists; import org.springframework.beans.BeansException; import org.springframework.context.ApplicationContext; import org.springframework.context.ApplicationContextAware; import org.springframework.stereotype.Component; import org.springframework.util.CollectionUtils; import org.springframework.util.ReflectionUtils;  import javax.annotation.PostConstruct; import java.lang.reflect.Method; import java.lang.reflect.Parameter; import java.util.HashMap; import java.util.List; import java.util.Map;  /**  * @author 2YSP  * @date 2022/4/16 16:12  */ @Component public class EventManager implements ApplicationContextAware {     /**      * 事件map      */     private static Map&lt;Class&lt;? extends Event&gt;, List&lt;EventListener&gt;&gt; map = new HashMap&lt;&gt;(64);       private static ApplicationContext applicationContext;      private static final String EVENT_METHOD = "onEvent";      /**      * 初始化事件缓存map      */     @PostConstruct     private void initEventMap() {         Map&lt;String, EventListener&gt; beanMap = applicationContext.getBeansOfType(EventListener.class);         if (beanMap == null) {             return;         }         beanMap.forEach((key, value) -&gt; {             // 反射获取onEvent方法的参数类型             Method[] methods = ReflectionUtils.getDeclaredMethods(value.getClass());             for (Method method : methods) {                 if (method.getName().equals(EVENT_METHOD)) {                     Parameter parameter = method.getParameters()[0];                     // 参数必须为Event的子类                     if (parameter.getType().getName().equals(Event.class.getName())) {                         continue;                     }                     registerListener((Class&lt;? extends Event&gt;) parameter.getType(), value);                 }             }         });     }      /**      * 注册一个事件监听器      *      * @param clazz      * @param eventListener      * @param &lt;E&gt;      */     public &lt;E extends Event&gt; void registerListener(Class&lt;? extends Event&gt; clazz, EventListener&lt;E&gt; eventListener) {         List&lt;EventListener&gt; list = map.get(clazz);         if (CollectionUtils.isEmpty(list)) {             map.put(clazz, Lists.newArrayList(eventListener));         } else {             list.add(eventListener);             map.put(clazz, list);         }     }      /**      * 移除一个事件监听器      *      * @param clazz      * @param &lt;E&gt;      */     public &lt;E extends Event&gt; void removeListener(Class&lt;E&gt; clazz) {         map.remove(clazz);     }      /**      * 通知所有该事件的监听器      *      * @param &lt;E&gt;      */     public &lt;E extends Event&gt; void notifyListener(E e) {         List&lt;EventListener&gt; eventListeners = map.get(e.getClass());         if (CollectionUtils.isEmpty(eventListeners)) {             return;         }         eventListeners.forEach(eventListener -&gt; {                 // 同步执行                 eventListener.onEvent(e);         });     }       @Override     public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {         EventManager.applicationContext = applicationContext;     } }</code></pre> <p>通过initEventMap()方法在项目启动后，利用反射注册所有的事件监听器，但是notifyListener()方法是串行执行，如果想要异步执行增加一个标记注解<strong>@AsyncExecute</strong>就行了，优化后版本如下：</p> <pre><code class="language-java">/**  * @author 2YSP  * @date 2022/4/16 17:35  */ @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) public @interface AsyncExecute {  }</code></pre> <p>EventManager</p> <pre><code class="language-java">/**  * @author 2YSP  * @date 2022/4/16 16:12  */ @Component public class EventManager implements ApplicationContextAware {     /**      * 事件map      */     private static Map&lt;Class&lt;? extends Event&gt;, List&lt;EventListener&gt;&gt; map = new HashMap&lt;&gt;(64);       private static ApplicationContext applicationContext;      private static final String EVENT_METHOD = "onEvent";      /**      * 事件执行线程池      */     private static ExecutorService eventPool = new ThreadPoolExecutor(4,             8, 30L, TimeUnit.SECONDS,             new ArrayBlockingQueue&lt;&gt;(512), new ThreadFactoryBuilder().setNameFormat("event-pool-%d").build());      /**      * 初始化事件缓存map      */     @PostConstruct     private void initEventMap() {         Map&lt;String, EventListener&gt; beanMap = applicationContext.getBeansOfType(EventListener.class);         if (beanMap == null) {             return;         }         beanMap.forEach((key, value) -&gt; {             // 反射获取onEvent方法的参数类型             Method[] methods = ReflectionUtils.getDeclaredMethods(value.getClass());             for (Method method : methods) {                 if (method.getName().equals(EVENT_METHOD)) {                     Parameter parameter = method.getParameters()[0];                     // 参数必须为Event的子类                     if (parameter.getType().getName().equals(Event.class.getName())) {                         continue;                     }                     registerListener((Class&lt;? extends Event&gt;) parameter.getType(), value);                 }             }         });     }      /**      * 注册一个事件监听器      *      * @param clazz      * @param eventListener      * @param &lt;E&gt;      */     public &lt;E extends Event&gt; void registerListener(Class&lt;? extends Event&gt; clazz, EventListener&lt;E&gt; eventListener) {         List&lt;EventListener&gt; list = map.get(clazz);         if (CollectionUtils.isEmpty(list)) {             map.put(clazz, Lists.newArrayList(eventListener));         } else {             list.add(eventListener);             map.put(clazz, list);         }     }      /**      * 移除一个事件监听器      *      * @param clazz      * @param &lt;E&gt;      */     public &lt;E extends Event&gt; void removeListener(Class&lt;E&gt; clazz) {         map.remove(clazz);     }      /**      * 通知所有该事件的监听器      *      * @param &lt;E&gt;      */     public &lt;E extends Event&gt; void notifyListener(E e) {         List&lt;EventListener&gt; eventListeners = map.get(e.getClass());         if (CollectionUtils.isEmpty(eventListeners)) {             return;         }         eventListeners.forEach(eventListener -&gt; {             AsyncExecute asyncExecute = eventListener.getClass().getAnnotation(AsyncExecute.class);             if (asyncExecute == null) {                 // 同步执行                 eventListener.onEvent(e);             } else {                 // 异步执行                 eventPool.execute(() -&gt; eventListener.onEvent(e));             }         });     }       @Override     public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {         EventManager.applicationContext = applicationContext;     } }</code></pre> <p>@AsyncExecute注解可用在类上，每次调用notifyListener()方法时通过反射判断是否存在@AsyncExecute注解，如果存在则用线程池异步执行，其实反射的性能不是很好，如果追求性能的话可以考虑在初始化时就将是否异步执行的信息维护到事件缓存map中。</p> <p>现在就差一个发布事件的工具类EventPublisher</p> <pre><code class="language-java">/**  * @author 2YSP  * @date 2022/4/16 16:07  */ @Component public class EventPublisher&lt;E extends Event&gt; {      @Resource     private EventManager eventManager;      public &lt;E extends Event&gt; void publish(E event) {         eventManager.notifyListener(event);     } }</code></pre> <h2 id="三测试">三、测试</h2> <p>测试的场景是订单创建后，发生订单创建事件，然后有两个监听器都监听了该事件，区别是一个用了@AsyncExecute注解，一个没有。</p> <ol> <li>创建Order实体</li> </ol> <pre><code class="language-java">public class Order {      private String orderNo;      public String getOrderNo() {         return orderNo;     }      public void setOrderNo(String orderNo) {         this.orderNo = orderNo;     } }</code></pre> <p>2.创建订单创建事件</p> <pre><code class="language-java">public class OrderCreateEvent extends Event {      private Order order;      public OrderCreateEvent(Object source, Order order) {         super(source);         this.order = order;     }      public Order getOrder() {         return order;     }      public void setOrder(Order order) {         this.order = order;     } }</code></pre> <p>3.创建事件监听器</p> <pre><code class="language-java">@Component public class OrderCreateEventListener implements EventListener&lt;OrderCreateEvent&gt; {      @Override     public void onEvent(OrderCreateEvent orderCreateEvent) {         System.out.println(Thread.currentThread().getName() + "--监听订单创建事件。。。。。。。。。");         Order order = orderCreateEvent.getOrder();         System.out.println(order.getOrderNo());     } }   @AsyncExecute @Component public class OrderCreateEventListener2 implements EventListener&lt;OrderCreateEvent&gt; {      @Override     public void onEvent(OrderCreateEvent orderCreateEvent) {         System.out.println(Thread.currentThread().getName() + "--监听订单创建事件2。。。。。。。。。");         Order order = orderCreateEvent.getOrder();         System.out.println(order.getOrderNo());     } }</code></pre> <p>4.发布事件</p> <pre><code class="language-java">@RequestMapping("/order") @RestController public class OrderController {      @Resource     private OrderService orderService;      @PostMapping("")     public void create(@RequestBody Order order) {         orderService.create(order);     } }   @Service public class OrderService {      @Resource     private EventPublisher&lt;OrderCreateEvent&gt; publisher;       /**      * 创建订单      *      * @param order      */     public void create(Order order) {         // 发送订单创建事件         order.setOrderNo("sssss");         publisher.publish(new OrderCreateEvent(this, order));     } }</code></pre> <p>测试代码编写完毕，启动项目请求订单创建接口http://localhost:8080/order，控制台输出如下</p> <pre><code class="language-bash">http-nio-8080-exec-2--监听订单创建事件。。。。。。。。。 sssss event-pool-0--监听订单创建事件2。。。。。。。。。 sssss</code></pre> <p>说明两个事件监听器都被触发了，且线程名字不同，说明一个是主线程同步执行，另一个是线程池异步，至此测试成功。</p> <h2 id="四总结">四、总结</h2> <p>写完发现实现一个发布/订阅框架并不难，当然这个功能比较简单，还有优化的空间，代码已经上传到github，<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/2YSP/event-all/tree/master/event"  target="_blank" rel="nofollow">点击即可查看</a>。</p> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2800.htm">浅谈软件性能提升相关的概念</a></p>
                                                        <p>下一个：<a href="/html/category/article-2802.htm">vue在进行增删改操作后刷新页面</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2780.htm" title="Redis缓存过期策略">Redis缓存过期策略</a></li>
                        <li class="py-2"><a href="/html/category/article-2812.htm" title="synchronized详解">synchronized详解</a></li>
                        <li class="py-2"><a href="/html/category/article-2814.htm" title="DataLoader 和 Dataset">DataLoader 和 Dataset</a></li>
                        <li class="py-2"><a href="/html/category/article-2773.htm" title="Hyperledger Fabric 2.2 学习笔记：测试网络test-network">Hyperledger Fabric 2.2 学习笔记：测试网络test-network</a></li>
                        <li class="py-2"><a href="/html/category/article-2795.htm" title="Python开发桌面小程序功能_python_">Python开发桌面小程序功能_python_</a></li>
                        <li class="py-2"><a href="/html/category/article-2820.htm" title="OpenSSL3.0.5安装">OpenSSL3.0.5安装</a></li>
                        <li class="py-2"><a href="/html/category/article-2778.htm" title="IDEA中配置maven环境">IDEA中配置maven环境</a></li>
                        <li class="py-2"><a href="/html/category/article-2807.htm" title="vue生命周期 钩子函数">vue生命周期 钩子函数</a></li>
                        <li class="py-2"><a href="/html/category/article-2789.htm" title="在日期和时间部分之间使用&#8217;T&#8217;或&#8217;Space&#8217;以外的任何其他字符返回的MySQL返回值是什么？">在日期和时间部分之间使用&#8217;T&#8217;或&#8217;Space&#8217;以外的任何其他字符返回的MySQL返回值是什么？</a></li>
                        <li class="py-2"><a href="/html/category/article-2809.htm" title="C++11（一）">C++11（一）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">48</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>