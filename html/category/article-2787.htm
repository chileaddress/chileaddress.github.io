<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2787.htm" />
    <title>Vue v-for更新监测/虚拟DOM/watch侦听器 - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>Vue v-for更新监测/虚拟DOM/watch侦听器</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h3><a id="1vfor_0" rel="nofollow"></a>1.v-for更新监测</h3> <p>数组变更方法, 就会导致v-for更新, 页面更新<br /> 数组非变更方法, 返回新数组, 就不会导致v-for更新, 可采用覆盖数组或this.<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        s</p> <p>        e</p> <p>        t</p> <p>        (</p> <p>        )</p> <p>        /</p> <p>        /</p> <p>        V</p> <p>        u</p> <p>        e</p> <p>        解</p> <p>        决</p> <p>        −</p> <p>        t</p> <p>        h</p> <p>        i</p> <p>        s</p> <p>        .</p> <p>       set() // Vue解决-this.</span><span class="katex-html"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right: 0.22222em;">V</span><span class="mord mathdefault">u</span><span class="mord mathdefault">e</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">决</span><span class="mspace" style="margin-right: 0.222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right: 0.222222em;"></span></span><span class="base"><span class="strut" style="height: 0.69444em; vertical-align: 0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord">.</span></span></span></span></span>set(参数1,参数2,参数3)<br /> // 参数1: 更新目标结构<br /> // 参数2: 更新位置<br /> // 参数3: 更新值<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220603/8a970a62268967b6297df7073f106f59.jpg" alt="Vue v-for更新监测/虚拟DOM/watch侦听器"></p> <pre><code class="prism language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span><span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, index) in arr"</span><span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">&gt;</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">{<!-- --></span> item<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 结果<span class="token operator">:</span> 会更新页面<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"rev"</span><span class="token operator">&gt;</span>数组翻转<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 结果<span class="token operator">:</span> 不会更新页面<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"sli"</span><span class="token operator">&gt;</span>数组截取<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 结果<span class="token operator">:</span> 不会更新页面<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"updateVal"</span><span class="token operator">&gt;</span>更新值<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token punctuation">{<!-- --></span>   name<span class="token operator">:</span><span class="token string">'VuecliDemoApp'</span><span class="token punctuation">,</span><span class="token comment">// Date</span><span class="token comment">// 组件中的 data 都是函数, 函数中返回一个对象</span><span class="token comment">// 为了保证多个组件复用时, 内部的 data 相互独立</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 对象字面量: new Object()</span>       arr<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   methods<span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token function">rev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 1. 数组翻转可以让v-for更新</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">sli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 2. 数组slice方法不会造成v-for更新</span><span class="token comment">// slice不会改变原始数组</span><span class="token comment">// this.arr.slice(0, 3)</span><span class="token comment">// 解决v-for更新 - 覆盖原始数组</span><span class="token keyword">let</span> newArr<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token operator">=</span> newArr<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">updateVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// Vue 2 响应式的原理是使用 Object.defineProperty 方法实现的数据劫持</span><span class="token comment">// 有一个小缺陷, 无法劫持直接修改数组元素的值</span><span class="token comment">// 它除了数据劫持, 还对数组的大部分方法进行了重写, 手动劫持了方法</span><span class="token comment">// 结论: 在 Vue 2 中不要直接使用 数组[索引] 的方式修改数据, 会导致无法更新的情况</span><span class="token comment">// this.arr[0] = '张三' // 不要这样干</span><span class="token comment">// Vue 也提供了解决方案: $set</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span> scoped<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span></code></pre> <h3><a id="2DOM_65" rel="nofollow"></a>2.虚拟DOM</h3> <p>.vue文件中的template里写的标签, 都是模板, 都要被vue处理成虚拟DOM对象, 在生成真实DOM片段, 才会渲染显示到真实DOM页面上</p> <p>● 虚拟DOM是什么? ---- 保存节点信息的一个js虚拟对象<br /> ● 虚拟DOM的好处?----- 提高性能 , 不用频繁操作真实DOM , 在内存中比较变化部分,然后给真实DOM更新<br /> 1.内存中生成一样的虚拟DOM结构(<mark>本质是个JS对象</mark>)<br /> 因为真实的DOM属性好几百个, 没办法快速的知道哪个属性改变了<br /> 比如template里标签结构</p> <pre><code class="prism language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>p<span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"my_p"</span><span class="token operator">&gt;</span><span class="token number">123</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token comment">//对应的虚拟DOM结构</span><span class="token keyword">const</span> dom<span class="token operator">=</span><span class="token punctuation">{<!-- --></span>     type<span class="token operator">:</span><span class="token string">'div'</span><span class="token punctuation">,</span>     attributes<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{<!-- --></span>id<span class="token operator">:</span><span class="token string">'box'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     children<span class="token operator">:</span><span class="token punctuation">{<!-- --></span>         type<span class="token operator">:</span><span class="token string">'p'</span><span class="token punctuation">,</span>         attributes<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{<!-- --></span><span class="token keyword">class</span><span class="token operator">:</span><span class="token string">'my_p'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         text<span class="token operator">:</span><span class="token string">'123'</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>2.以后vue数据更新<br /> ● 生成新的虚拟DOM结构<br /> ● 和旧的虚拟DOM结构对比<br /> ● 找不不同, 只更新变化的部分(重绘/回流)到页面 - 也叫打补丁</p> <h4><a id="21_97" rel="nofollow"></a>2.1重绘与回流</h4> <p>频繁操作DOM会触发重绘与回流: 影响性能<br /> 回流(重排):元素的几何信息(高度/位置)发生变化时,浏览器需要重新计算位置,并重新绘制<br /> 重绘:元素的颜色/透明度等属性变化时,浏览器重新渲染<br /> 回流一定会触发重绘,而重绘不一定会触发回流<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220603/a8cc99f227a553989a2e3a7a53e53895.jpg" alt="Vue v-for更新监测/虚拟DOM/watch侦听器"></p> <h3><a id="3vforkey__103" rel="nofollow"></a>3.v-for中key值的作用: 提高性能</h3> <p>v-for 无key 就地更新<br /> v-for key 为索引 根据key比较 还是就地更新<br /> v-for key 为id 基于 key 来比较新旧虚拟DOM, 移除key不存在元素<br /> 要求: key 值为 唯一不重复 的 字符串或数字<br /> 如何使用? 有id用id,无id用索引</p> <p>v-for不会移动DOM, 而是尝试复用, 就地更新，如果需要v-for移动DOM, 你需要用特殊 attribute key 来提供一个排序提示<br /> ● 新DOM里数据的key存在, 去旧的虚拟DOM结构里找到key标记的标签, 复用标签<br /> ● 新DOM里数据的key存在, 去旧的虚拟DOM结构里没有找到key标签的标签, 创建<br /> ● 旧DOM结构的key, 在新的DOM结构里没有了, 则<mark>移除key所在的标签</mark><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220603/c55f1fa672e5d45374e77aeabc2741df.jpg" alt="Vue v-for更新监测/虚拟DOM/watch侦听器"></p> <h3><a id="4watch_115" rel="nofollow"></a>4.watch侦听器(深度监听)(重要):</h3> <p>作用:可以侦听data/computed属性值的改变</p> <pre><code class="prism language-javascript"><span class="token comment">//语法1:</span>   watch<span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token string">'被监听的属性名'</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//函数写法 只能侦听基本数据类型的变化</span><span class="token comment">//newVal 修改后的值 oldVal 修改前的值</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <pre><code class="prism language-javascript"><span class="token comment">//语法2:   //对象写法   侦听复杂类型</span>   watch<span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token string">'被监听的属性名'</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span>    deep<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//深度侦听,可以侦听到引用数据类型</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span>oldVal</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//深度侦听对象的属性时,  oldVal将失效,和newVal的值一样 (Vue bug)</span><span class="token comment">// 不影响开发</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>侦听器实现数据缓存<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220603/ed343a7491457ba1b0ef46b8022e8c0d.jpg" alt="Vue v-for更新监测/虚拟DOM/watch侦听器"></p> </div> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2786.htm">.NET Core(.NET6)中gRPC注册到Consul详解</a></p>
                                                        <p>下一个：<a href="/html/category/article-2788.htm">《C语言及程序设计》程序阅读——宏定义</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2818.htm" title="Go 语言接口及使用接口实现链表插入">Go 语言接口及使用接口实现链表插入</a></li>
                        <li class="py-2"><a href="/html/category/article-2815.htm" title="编译实战 | 手摸手教你在Windows环境下运行Redis6.x">编译实战 | 手摸手教你在Windows环境下运行Redis6.x</a></li>
                        <li class="py-2"><a href="/html/category/article-2813.htm" title="FreeRTOS实时操作系统的任务通知方法_操作系统">FreeRTOS实时操作系统的任务通知方法_操作系统</a></li>
                        <li class="py-2"><a href="/html/category/article-2795.htm" title="Python开发桌面小程序功能_python_">Python开发桌面小程序功能_python_</a></li>
                        <li class="py-2"><a href="/html/category/article-2799.htm" title="整理了25个Pandas实用技巧（上）">整理了25个Pandas实用技巧（上）</a></li>
                        <li class="py-2"><a href="/html/category/article-4142.htm" title="嵌入式开发：执行最坏情况堆栈分析的3种方法">嵌入式开发：执行最坏情况堆栈分析的3种方法</a></li>
                        <li class="py-2"><a href="/html/category/article-4113.htm" title="UnrealEngine创建自定义资产类型">UnrealEngine创建自定义资产类型</a></li>
                        <li class="py-2"><a href="/html/category/article-2817.htm" title="uni-app 63egg.js后端用户上线和下线深度剖析">uni-app 63egg.js后端用户上线和下线深度剖析</a></li>
                        <li class="py-2"><a href="/html/category/article-2812.htm" title="synchronized详解">synchronized详解</a></li>
                        <li class="py-2"><a href="/html/category/article-2782.htm" title="Vue的v-for和v-bind实现列表颜色切换">Vue的v-for和v-bind实现列表颜色切换</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">4</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>