<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2809.htm" />
    <title>C++11（一） - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>C++11（一）</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<div id="content_views" class="markdown_views prism-tomorrow-night"> <p>????????????<font color="red"><strong>各位大佬大家好，我是猪皮兄弟</strong></font>????????????<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230202/5d59a991b3014e4d2b9ac5c6a4a5a0b2.jpg" alt="C++11（一）"></p> <div class="toc"> <h3>文章目录</h3> <ul> <li><a href="#_5" rel="nofollow">一、列表初始化</a></li> <li> <ul> <li><a href="#initializer_list_39" rel="nofollow">initializer_list</a></li> </ul> </li> <li><a href="#_70" rel="nofollow">二、声明</a></li> <li> <ul> <li><a href="#1auto_71" rel="nofollow">1.auto</a></li> <li><a href="#2decltype_83" rel="nofollow">2.decltype</a></li> <li><a href="#3nullptr_95" rel="nofollow">3.nullptr</a></li> </ul> </li> <li><a href="#C11__STL_109" rel="nofollow">三、C++11 STL中的变化</a></li> <li> <ul> <li><a href="#1array_118" rel="nofollow">1.array</a></li> <li><a href="#2forward_list_131" rel="nofollow">2.forward_list</a></li> <li><a href="#3STL_135" rel="nofollow">3.STL其他变化</a></li> </ul> </li> <li><a href="#C_143" rel="nofollow">四、C++关键字新功能</a></li> <li> <ul> <li><a href="#1defualt_144" rel="nofollow">1.defualt强制生成</a></li> <li><a href="#2delete_152" rel="nofollow">2.delete</a></li> <li><a href="#3final_161" rel="nofollow">3.final</a></li> <li><a href="#4override_165" rel="nofollow">4.override</a></li> </ul> </li> </ul> </div> <h1> <a id="_5" rel="nofollow"></a>一、列表初始化</h1> <p>之前呢{}就是对于结构体和数组进行统一地列表初始值设定<br /> C++11扩大了用大括号括起来地列表初始化的使用范围，使其可对所有的内置类型和用户自定义类型，使用列表初始化时，可添加等号，也可以不加</p> <pre><code class="prism language-cpp">strcut Point <span class="token punctuation">{<!-- --></span> 	<span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> 		<span class="token operator">:</span><span class="token function">_x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> 		<span class="token punctuation">,</span><span class="token function">_y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span>   <span class="token keyword">int</span> _x<span class="token punctuation">;</span>   <span class="token keyword">int</span> _y<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>      <span class="token keyword">int</span> x1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> x2<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token number">3</span><span class="token punctuation">}</span>     <span class="token keyword">int</span> x3<span class="token punctuation">{<!-- --></span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> array1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{<!-- --></span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//直接就去掉=</span>     <span class="token keyword">int</span> array2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">{<!-- --></span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          Point <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用构造函数初始化</span>     Point p<span class="token punctuation">{<!-- --></span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     Point p <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token comment">//C++11种列表初始化也可以适用于new表达式中</span>     <span class="token keyword">int</span><span class="token operator">*</span>pa <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">{<!-- --></span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <h2> <a id="initializer_list_39" rel="nofollow"></a>initializer_list</h2> <p><strong>{}并不是运算符，所以说并不是重载{}，{}其实是initializer_list</strong></p> <pre><code class="prism language-cpp"><span class="token keyword">auto</span> x<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span> cout<span class="token operator">&lt;&lt;</span><span class="token keyword">typeid</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//initializer_list&lt;int&gt;</span> </code></pre> <p>其实，初始化列表本来用意是给容器用的</p> <pre><code class="prism language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v1<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v2<span class="token punctuation">{<!-- --></span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span> list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> lt1<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span> list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> lt2<span class="token punctuation">{<!-- --></span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span> </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230202/6d5456dd648fe1cb8e07c62ccedc5a44.jpg" alt="C++11（一）"><br /> initializer_list也像是一个容器，可以像迭代器一样的去访问，但是initializer_list是一个写死的数组，不支持push_back和pop_back</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230202/aa34b26ff99cf9d833f3995d5daddb2d.jpg" alt="C++11（一）"><br /> C++11之后，所以的容器都增加了initializer_list的构造函数。<br /><mark>那既然initializer_list主要是为容器而产生的，那结构体/类成员为什么也支持呢</mark></p> <pre><code class="prism language-cpp">vector<span class="token operator">&lt;</span>Date<span class="token operator">&gt;</span> v1<span class="token operator">=</span><span class="token punctuation">{<!-- --></span>d1<span class="token punctuation">,</span>d2<span class="token punctuation">,</span>d3<span class="token punctuation">}</span><span class="token punctuation">;</span> vector<span class="token operator">&lt;</span>Date<span class="token operator">&gt;</span> v2<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">{<!-- --></span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{<!-- --></span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{<!-- --></span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> </code></pre> <p>同时，initializer_list也能够初始化pair，所以map也能够使用</p> <h1> <a id="_70" rel="nofollow"></a>二、声明</h1> <h2> <a id="1auto_71" rel="nofollow"></a>1.auto</h2> <p><strong>auto就是自动推导类型，但是它不能作为参数的类型自动推导</strong></p> <pre><code class="prism language-cpp"><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">auto</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//也就是说这是不行的</span> </code></pre> <p>在某些场景下就非常好用，但是也有弊端，auto会降低可读性</p> <pre><code class="prism language-cpp">map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>string<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">auto</span> it <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre> <h2> <a id="2decltype_83" rel="nofollow"></a>2.decltype</h2> <p><strong>declare type<br /> 用户声明类型，也可以理解为推导类型</strong></p> <p>像我们以前使用的typeid(x).name(),它只能够知道是哪种类型，但是不能够拿这个得到的字符串再去定义对象</p> <pre><code class="prism language-cpp"><span class="token keyword">typeid</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> y<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//报错</span> <span class="token comment">//而C++11新增了关键字decltype来解决</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> y<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span> </code></pre> <h2> <a id="3nullptr_95" rel="nofollow"></a>3.nullptr</h2> <p><mark>源码中，有这样一段代码</mark></p> <pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression"><span class="token constant">NULL</span></span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span><span class="token comment">//</span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NULL</span> <span class="token expression"><span class="token number">0</span></span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span>              </span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NULL</span> <span class="token expression"><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>           </span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span> </code></pre> <p>也就是说，在C++中，C的NULL被定义成了字面量0，因为0既能代表常量也能代表地址，由于清晰安全的角度，C++11中有了nullptr，用于表示空指针。</p> <h1> <a id="C11__STL_109" rel="nofollow"></a>三、C++11 STL中的变化</h1> <blockquote> <p><strong>C++11新增容器<br /> 1.unordered_set<br /> 2.unordered_multiset<br /> 3.unordered_map<br /> 4.unordered_multimap<br /> 5.array<br /> 6.forword_list</strong></p> </blockquote> <h2> <a id="1array_118" rel="nofollow"></a>1.array</h2> <p>array相比如vector而言，是一个静态的数组</p> <pre><code class="prism language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span>size_t N<span class="token comment">/*非类型模板参数*/</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">array</span><span class="token punctuation">;</span> </code></pre> <p><mark>为什么有array？</mark><br /><strong>①希望数组容器化<br /> ②C的数组边界问题<br /> C的数组采用的方式是设岗抽查，只有少量的越界能够查出来，比如开了一个a[10]的数组，可能方式a[15]并不会被检查到。而给一个array，超过非类型模板N，就被查到了，所以array检查严格。</strong></p> <p><mark>但是array并没有什么用处</mark><br /> 因为array并不如vector，可以用vector+resize来进行开空间，效率上也得到了保证。而且array是开在栈上的，如果数据量过大，还会栈溢出</p> <h2> <a id="2forward_list_131" rel="nofollow"></a>2.forward_list</h2> <p>forword_list就是单向链表，比起list双向循环链表来说，forword_list优势就只在于节省了一点空间，它只提供了insert_after在末尾插入，所以实际如果没有特殊需求，是不会用forward_list的</p> <h2> <a id="3STL_135" rel="nofollow"></a>3.STL其他变化</h2> <p>①增加initializer_list的初始化化<br /> ②比较鸡肋的接口cbegin，cend<br /> ③移动构造和移动赋值（后面说）<br /> ④右值引用参数的插入<br /> ⑤手动缩容shrink_to_fit<br /> 等等</p> <h1> <a id="C_143" rel="nofollow"></a>四、C++关键字新功能</h1> <h2> <a id="1defualt_144" rel="nofollow"></a>1.defualt强制生成</h2> <pre><code class="prism language-cpp"><span class="token function">Person</span><span class="token punctuation">(</span>Person<span class="token operator">&amp;&amp;</span>p<span class="token punctuation">)</span> <span class="token operator">=</span> defualt<span class="token punctuation">;</span> <span class="token comment">//因为移动构造需要满足条件才自动生成</span> <span class="token comment">//所以这里可以强制生成</span> </code></pre> <h2> <a id="2delete_152" rel="nofollow"></a>2.delete</h2> <p>delete除了释放资源之外，还有另外的作用<br /> 比如我需要防拷贝</p> <pre><code class="prism language-cpp"><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token keyword">delete</span><span class="token punctuation">;</span> Person<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token keyword">delete</span><span class="token punctuation">;</span> <span class="token comment">//让编译不准生成</span> </code></pre> <h2> <a id="3final_161" rel="nofollow"></a>3.final</h2> <p>①修饰类，表示最终类<br /> ②修饰虚函数，表示该虚函数不能被重写</p> <h2> <a id="4override_165" rel="nofollow"></a>4.override</h2> <p>放在函数后面，表示它必须去重写某个父类的虚函数，如果达不到该条件，就进行报错。</p> <p></p> </p></div> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2808.htm">使用 Vert.X Future/Promise 编写异步代码_在线工具</a></p>
                                                        <p>下一个：<a href="/html/category/article-2810.htm">netty系列之:netty中的核心MessageToByte编码器</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2810.htm" title="netty系列之:netty中的核心MessageToByte编码器">netty系列之:netty中的核心MessageToByte编码器</a></li>
                        <li class="py-2"><a href="/html/category/article-2795.htm" title="Python开发桌面小程序功能_python_">Python开发桌面小程序功能_python_</a></li>
                        <li class="py-2"><a href="/html/category/article-2818.htm" title="Go 语言接口及使用接口实现链表插入">Go 语言接口及使用接口实现链表插入</a></li>
                        <li class="py-2"><a href="/html/category/article-3139.htm" title="Halo 开源项目学习（六）：事件监听机制_在线工具">Halo 开源项目学习（六）：事件监听机制_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-2784.htm" title="C++基础之C++中的输入输出">C++基础之C++中的输入输出</a></li>
                        <li class="py-2"><a href="/html/category/article-2815.htm" title="编译实战 | 手摸手教你在Windows环境下运行Redis6.x">编译实战 | 手摸手教你在Windows环境下运行Redis6.x</a></li>
                        <li class="py-2"><a href="/html/category/article-2783.htm" title="JVM将初始和最大内存大小设置为相同值的好处">JVM将初始和最大内存大小设置为相同值的好处</a></li>
                        <li class="py-2"><a href="/html/category/article-2792.htm" title="toString() 和 new String()用法区别">toString() 和 new String()用法区别</a></li>
                        <li class="py-2"><a href="/html/category/article-3140.htm" title="java 退出_JVM安全退出（如何优雅的关闭java服务）">java 退出_JVM安全退出（如何优雅的关闭java服务）</a></li>
                        <li class="py-2"><a href="/html/category/article-2789.htm" title="在日期和时间部分之间使用&#8217;T&#8217;或&#8217;Space&#8217;以外的任何其他字符返回的MySQL返回值是什么？">在日期和时间部分之间使用&#8217;T&#8217;或&#8217;Space&#8217;以外的任何其他字符返回的MySQL返回值是什么？</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>