<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2655.htm" />
    <title>Go单体服务开发最佳实践 - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>Go单体服务开发最佳实践</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<h2 id="单体最佳实践的由来">单体最佳实践的由来</h2> <ul> <li>对于很多初创公司来说，业务的早期我们更应该关注于业务价值的交付，并且此时用户体量也很小，<code>QPS</code> 也非常低，我们应该使用更简单的技术架构来加速业务价值的交付，此时单体的优势就体现出来了。</li> <li>正如我直播分享时经常提到，我们在使用单体快速交付业务价值的同时，也需要为业务的发展预留可能性，我们可以在单体里面清晰的拆分业务模块。</li> <li><code>go-zero</code> 社区里也有很多小伙伴在问，咱们单体开发的最佳实践应该是怎样的。</li> </ul> <p>而<code>go-zero</code> 作为一个被广泛使用的渐进式微服务框架来说，也是我在多个大型项目完整发展过程中沉淀出来的，自然我们也充分考虑了单体服务开发的场景。</p> <p>如图所示的使用<code>go-zero</code> 的单体架构，也可以支撑很大体量的业务规模，其中<code>Service</code> 是单体服务的多个<code>Pod</code>。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/79dfa3fbd7b78a7492293b429ca746cc.jpg" alt="Go单体服务开发最佳实践"></p> <p>我就通过本文详细跟大家分享一下如何使用<code>go-zero</code> 快速开发一个有多个模块的单体服务。</p> <h2 id="单体示例">单体示例</h2> <p>我们用一个上传下载的单体服务来讲解<code>go-zero</code> 单体服务开发的最佳实践，为啥用这么个示例呢？</p> <ul> <li> <p><code>go-zero</code> 社区里经常有同学会问上传文件怎么定义<code>API</code> 文件，然后用<code>goctl</code> 自动生成。初见此类问题会觉得比较奇怪，为啥不用<code>OSS</code> 之类的服务呢？发现很多场景是用户需要上传一个excel，然后服务端解析完也就丢弃此文件了。一是文件较小，二是用户量也不大，就不用那么复杂的通过<code>OSS</code> 来绕一圈了，我觉得也挺合理的。</p> </li> <li> <p><code>go-zero</code> 社区也有同学问下载文件怎么通过定义一个<code>API</code> 文件然后<code>goctl</code> 自动生成。此类问题之所以通过 Go 来做，问下来一般两个原因，一是业务刚开始，能简单点布一个服务搞定就一个吧；二是希望能吃上<code>go-zero</code> 的内置<code>JWT</code> 自动鉴权。</p> </li> </ul> <p>仅以此为示例，无需深入探讨上传下载是否应该通过<code>Go</code> 来实现。那么接下来我们就看看我们怎么通过<code>go-zero</code> 来解决这么一个单体服务，我们称之为文件（file）服务。架构如下图：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/5a2b80d2678e19e569c657b4226d6af5.jpg" alt="Go单体服务开发最佳实践"></p> <h2 id="单体实现">单体实现</h2> <h3 id="api-定义"><code>API</code> 定义</h3> <p>使用过<code>go-zero</code> 的同学都知道，我们提供了一个<code>API</code> 格式的文件来描述<code>RESTful API</code>，然后可以通过<code>goctl</code> 一键生成对应的代码，我们只需要在<code>logic</code> 文件里填写对应的业务逻辑即可。我们就来看看<code>download</code> 和<code>upload</code> 服务怎么定义<code>API</code>.</p> <h3 id="download-服务定义"><code>Download</code> 服务定义</h3> <p>示例需求如下：</p> <ul> <li>通过<code>/static/<filename></code> 路径下载名为<code><filename></code> 的文件</li> <li>直接返回文件内容即可</li> </ul> <p>我们在<code>api</code> 目录下创建一个名为<code>download.api</code> 的文件，内容如下：</p> <pre><code class="language-protobuf">syntax = "v1"  type DownloadRequest {   File string `path:"file"` }  service file-api {   @handler DownloadHandler   get /static/:file(DownloadRequest) }</code></pre> <p><code>zero-api</code> 的语法还是比较能自解释的，含义如下：</p> <ol> <li><code>syntax = “v1”</code> 表示这是<code>zero-api</code> 的<code>v1</code> 语法</li> <li><code>type DownloadRequest</code> 定义了<code>Download</code> 的请求格式</li> <li><code>service file-api</code> 定义了<code>Download</code> 的请求路由</li> </ol> <h3 id="upload-服务定义"><code>Upload</code> 服务定义</h3> <p>示例需求如下：</p> <ul> <li>通过<code>/upload</code> 路径上传文件</li> <li>通过<code>json</code> 返回上传状态，其中的<code>code</code> 可用于表达比<code>HTTP code</code> 更丰富的场景</li> </ul> <p>我们在<code>api</code> 目录下创建一个名为<code>upload.api</code> 的文件，内容如下：</p> <pre><code class="language-protobuf">syntax = "v1"  type UploadResponse {   Code int `json:"code"` }  service file-api {   @handler UploadHandler   post /upload returns (UploadResponse) }</code></pre> <p>解释如下：</p> <ol> <li><code>syntax = “v1”</code> 表示这是<code>zero-api</code> 的<code>v1</code> 语法</li> <li><code>type UploadResponse</code> 定义了<code>Upload</code> 的返回格式</li> <li><code>service file-api</code> 定义了<code>Upload</code> 的请求路由</li> </ol> <h3 id="问题来了">问题来了</h3> <p><code>Download</code> 和<code>Upload</code> 服务我们都定义好了，那怎么才能放到一个服务里给用户提供服务呢？</p> <p>不知道细心的你有没注意到一些细节：</p> <ol> <li>不管是<code>Download</code> 还是<code>Upload</code> 我们在<code>request</code> 和<code>response</code> 数据定义的时候都加了前缀，并没有直接使用诸如<code>Request</code> 或<code>Response</code> 这样的</li> <li>我们在<code>download.api</code> 和<code>upload.api</code> 里面定义<code>service</code> 的时候都是用的<code>file-api</code> 这个<code>service name</code>，并没有分别用<code>download-api</code> 和<code>upload-api</code></li> </ol> <p>这么做的目的其实就是为了我们接下来把这两个服务放到同一个单体里自动生成对应的<code>Go</code> 代码。让我们来看看怎么把<code>Download</code> 和<code>Upload</code> 合并起来~</p> <h3 id="定义单体服务接口">定义单体服务接口</h3> <p>出于简单考虑，<code>goctl</code> 只支持接受单一<code>API</code> 文件作为参数，同时接受多个<code>API</code> 文件的问题不在此讨论，如有简单高效的方案，后续可能支持。</p> <p>我们在<code>api</code> 目录下创建一个新的<code>file.api</code> 的文件，内容如下：</p> <pre><code class="language-protobuf">syntax = "v1"  import "download.api" import "upload.api"</code></pre> <p>这样我们就像<code>C/C++</code> 的<code>#include</code> 一样把<code>Download</code> 和<code>Upload</code> 服务都导入进来了。但其中有几点需要注意的：</p> <ol> <li>定义的结构体不能重名</li> <li>所有文件里包含的<code>service name</code> 必须是同一个</li> </ol> <blockquote> <p>最外层的<code>API</code> 文件也可以包含同一个<code>service</code> 的部分定义，但我们推荐保持对称，除非这些<code>API</code> 确实属于父层级，比如跟<code>Download</code> 和<code>Upload</code> 属于同一个逻辑层次，那么就不应该放到<code>file.api</code> 里面定义。</p> </blockquote> <p>至此，我们的文件结构如下：</p> <pre><code class="language-shell">. └── api     ├── download.api     ├── file.api     └── upload.api</code></pre> <h3 id="生成单体服务">生成单体服务</h3> <p>既然已经有了<code>API</code> 接口定义，那么对于<code>go-zero</code> 来说，接下来的事情就很简单直接了（当然，定义<code>API</code> 也挺简单的，不是吗？），让我们来使用<code>goctl</code> 生成单体服务代码。</p> <pre><code class="language-shell">$ goctl api go -api api/file.api -dir .</code></pre> <p>我们来看看生成后的文件结构：</p> <pre><code class="language-shell">. ├── api │&nbsp;&nbsp; ├── download.api │&nbsp;&nbsp; ├── file.api │&nbsp;&nbsp; └── upload.api ├── etc │&nbsp;&nbsp; └── file-api.yaml ├── file.go ├── go.mod ├── go.sum └── internal     ├── config     │&nbsp;&nbsp; └── config.go     ├── handler     │&nbsp;&nbsp; ├── downloadhandler.go     │&nbsp;&nbsp; ├── routes.go     │&nbsp;&nbsp; └── uploadhandler.go     ├── logic     │&nbsp;&nbsp; ├── downloadlogic.go     │&nbsp;&nbsp; └── uploadlogic.go     ├── svc     │&nbsp;&nbsp; └── servicecontext.go     └── types         └── types.go</code></pre> <p>我们来按目录解释一下项目代码的构成：</p> <ul> <li><code>api</code> 目录：我们前面定义的<code>API</code> 接口描述文件，无需多言</li> <li><code>etc</code> 目录：这个是用来放置<code>yaml</code> 配置文件的，所有的配置项都可以写在<code>file-api.yaml</code> 文件里</li> <li><code>file.go</code>：<code>main</code> 函数所在文件，文件名跟<code>service</code> 同名，去掉了后缀<code>-api</code></li> <li><code>internal/config</code> 目录：服务的配置定义</li> <li><code>internal/handler</code> 目录：<code>API</code> 文件里定义的路由对应的<code>handler</code> 实现</li> <li><code>internal/logic</code> 目录：用来放每个路由对应的业务处理逻辑，之所以区分<code>handler</code> 和<code>logic</code> 是为了让业务处理部分尽可能减少依赖，把<code>HTTP requests</code> 和逻辑处理代码隔离开，便于后续按需拆分成<code>RPC service</code></li> <li><code>internal/svc</code> 目录：用来定义业务逻辑处理的依赖，我们可以在<code>main</code> 里面创建依赖的资源，然后通过<code>ServiceContext</code> 传递给<code>handler</code> 和<code>logic</code></li> <li><code>internal/types</code> 目录：定义了<code>API</code> 请求和返回数据结构</li> </ul> <p>咱们什么也不改，先来跑一下看看效果。</p> <pre><code class="language-shell">$ go run file.go -f etc/file-api.yaml Starting server at 0.0.0.0:8888...</code></pre> <h3 id="实现业务逻辑">实现业务逻辑</h3> <p>接下来我们需要实现相关的业务逻辑，但是这里的逻辑其实只是一个演示用途，无需过于关注实现细节，只需要理解我们应该把业务逻辑写在<code>logic</code> 层即可。</p> <p>这里一共做了以下几件事：</p> <ul> <li> <p>增加配置项里的<code>Path</code> 设置，用来放置上传文件，默认值我写了当前目录，因为是示例，如下：</p> <pre><code class="language-go">type Config struct {   rest.RestConf   // 新增   Path string `json:",default=."` }</code></pre> </li> <li> <p>调整了请求体的大小限制，如下：</p> <pre><code class="language-yaml">Name: file-api Host: localhost Port: 8888 # 新增 MaxBytes: 1073741824</code></pre> </li> <li> <p>由于<code>Download</code> 需要写文件给客户端，所以我们把<code>ResponseWriter</code> 当成<code>io.Writer</code> 传递给了<code>logic</code> 层，修改后的代码如下：</p> <pre><code class="language-go">func (l *DownloadLogic) Download(req *types.DownloadRequest) error {   logx.Infof("download %s", req.File)   body, err := ioutil.ReadFile(req.File)   if err != nil {     return err   }    n, err := l.writer.Write(body)   if err != nil {     return err   }    if n < len(body) {     return io.ErrClosedPipe   }    return nil }</code></pre> </li> <li> <p>由于<code>Upload</code> 需要读取用户上传的文件，所以我们把<code>http.Request</code> 传递给了<code>logic</code>  层，修改后的代码如下：</p> <pre><code class="language-go">func (l *UploadLogic) Upload() (resp *types.UploadResponse, err error) {   l.r.ParseMultipartForm(maxFileSize)   file, handler, err := l.r.FormFile("myFile")   if err != nil {     return nil, err   }   defer file.Close()    logx.Infof("upload file: %+v, file size: %d, MIME header: %+v",     handler.Filename, handler.Size, handler.Header)    tempFile, err := os.Create(path.Join(l.svcCtx.Config.Path, handler.Filename))   if err != nil {     return nil, err   }   defer tempFile.Close()   io.Copy(tempFile, file)    return &types.UploadResponse{     Code: 0,   }, nil }</code></pre> </li> </ul> <p>完整代码：https://github.com/zeromicro/zero-examples/tree/main/monolithic</p> <p>我们可以通过启动<code>file</code> 单体服务：</p> <pre><code class="language-shell">$ go run file.go -f etc/file-api.yaml</code></pre> <p>可以通过<code>curl</code> 来验证<code>Download</code> 服务：</p> <pre><code class="language-shell">$ curl -i "http://localhost:8888/static/file.go" HTTP/1.1 200 OK Traceparent: 00-831431c47d162b4decfb6b30fb232556-dd3b383feb1f13a9-00 Date: Mon, 25 Apr 2022 01:50:58 GMT Content-Length: 584 Content-Type: text/plain; charset=utf-8  ...</code></pre> <p>示例仓库里包含了<code>upload.html</code>，浏览器打开这个文件就可以尝试<code>Upload</code> 服务了。</p> <h2 id="单体开发的总结">单体开发的总结</h2> <p>我把用<code>go-zero</code> 开发单体服务的完整流程归纳如下：</p> <ol> <li>定义各个子模块的<code>API</code> 文件，比如：<code>download.api</code> 和<code>upload.api</code></li> <li>定义总的<code>API</code> 文件，比如：<code>file.api</code>。用来<code>import</code> 步骤一定义的各个子模块的<code>API</code> 文件</li> <li>通过<code>goctl api go</code> 命令生成单体服务框架代码</li> <li>增加和调整配置，实现对应的子模块的业务逻辑</li> </ol> <p>另外，<code>goctl</code> 可以根据<code>SQL</code> 一键生成<code>CRUD</code> 以及<code>cache</code> 代码，可以帮助大家更快速的开发单体服务。</p> <h2 id="项目地址">项目地址</h2> <p>https://github.com/zeromicro/go-zero</p> <p>欢迎使用<code>go-zero</code> 并<strong>star</strong> 支持我们！</p> <h2 id="微信交流群"></h2> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2654.htm">按照 Promise/A+ 规范逐行注释并实现 Promise_在线工具</a></p>
                                                        <p>下一个：<a href="/html/category/article-2656.htm">vue写一个简单的文件上传控件</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7185.htm" title="怎么开宠物店需要些什么证件（怎么开宠物店需要些什么证件和材料）">怎么开宠物店需要些什么证件（怎么开宠物店需要些什么证件和材料）</a></li>
                        <li class="py-2"><a href="/html/category/article-7507.htm" title="流浪猫来预示着家里要死人了（猫不请自来兆头）">流浪猫来预示着家里要死人了（猫不请自来兆头）</a></li>
                        <li class="py-2"><a href="/html/category/article-6770.htm" title="北京中农大动物医院有限公司招聘信息（北京中农大动物药业官网）">北京中农大动物医院有限公司招聘信息（北京中农大动物药业官网）</a></li>
                        <li class="py-2"><a href="/html/category/article-6955.htm" title="2021年春节旅游景点(2021年春节期间旅游景点)">2021年春节旅游景点(2021年春节期间旅游景点)</a></li>
                        <li class="py-2"><a href="/html/category/article-7737.htm" title="河南省动物疫病预防控制中心电话（河南省动物疫苗中心电话）">河南省动物疫病预防控制中心电话（河南省动物疫苗中心电话）</a></li>
                        <li class="py-2"><a href="/html/category/article-7644.htm" title="宠物领养数据分析 宠物领养数据分析报告">宠物领养数据分析 宠物领养数据分析报告</a></li>
                        <li class="py-2"><a href="/html/category/article-6725.htm" title="学宠物医生上什么学校比较好（学宠物医生这样的专业好不好）">学宠物医生上什么学校比较好（学宠物医生这样的专业好不好）</a></li>
                        <li class="py-2"><a href="/html/category/article-7598.htm" title="动物疫苗去哪里买的 动物疫苗去哪里买的到">动物疫苗去哪里买的 动物疫苗去哪里买的到</a></li>
                        <li class="py-2"><a href="/html/category/article-7230.htm" title="梅林（梅林午餐肉）">梅林（梅林午餐肉）</a></li>
                        <li class="py-2"><a href="/html/category/article-7414.htm" title="广州宠物领养站 广州宠物领养站地址">广州宠物领养站 广州宠物领养站地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>