<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2747.htm" />
    <title>通过C#/python实现Hadoop MapReduce_在线工具 - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>通过C#/python实现Hadoop MapReduce_在线工具</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<h2>MapReduce</h2> <p>Hadoop中将数据切分成块存在HDFS不同的DataNode中，如果想汇总，按照常规想法就是，移动数据到统计程序：先把数据读取到一个程序中，再进行汇总。</p> <p>但是HDFS存的数据量非常大时，对汇总程序所在的服务器将产生巨大压力，并且网络IO也十分消耗资源。</p> <p>为了解决这种问题，MapReduce提出一种想法：<em><strong>将统计程序移动到DataNode</strong></em>，每台DataNode（就近）统计完再汇总，充分利用DataNode的计算资源。YARN的调度决定了MapReduce程序所在的Node。</p> <h2>MapReduce过程</h2> <ol> <li>确保数据存在HDFS上</li> <li>MapReduce提交给ResourceManager（RM），RM创建一个Job。</li> <li>文件分片，默认将一个数据块作为一个分片。</li> <li>Job提交给RM，RM根据Node状态选择一台合适的Node调度AM，AM向RM申请资源，RM调度合适的NM启动Container，Container执行Task。</li> <li>Map的输出放入环形内存缓冲区，缓存溢出时，写入磁盘，写入磁盘有以下步骤 <ol> <li>默认根据Hash分区，分区数取决于Reduce Task的数，相同Key的记录被送到相同Reduce处理</li> <li>将Map输出的结果排序</li> <li>将Map数据合并</li> <li>MapTask处理后产生多个溢出文件，会将多个溢出文件合并，生成一个经过分区和排序的MapOutFile(MOF)，这个过程称为Spill</li> </ol> </li> <li>MOF输出到3%时开始进行Reduce Task</li> <li>MapTask与ReduceTask之间传输数据的过程称为Shuffle。</li> </ol> <p>下面这个图描述了具体的流程</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/00c38093ca6bc4ed8238ca3cbc30fcc9.jpg" alt="通过C#/python实现Hadoop MapReduce_在线工具"></p> <h2>Hadoop Streaming</h2> <p>Hadoop中可以通过Java来编写MapReduce，针对不熟悉Java的开发者，Hadoop提供了通过可执行程序或者脚本的方式创建MapReduce的Hadoop Streaming。</p> <h2>Hadoop streaming处理步骤</h2> <div> <p>hadoop streaming通过用户编写的map函数中标准输入读取数据（一行一行地读取），按照map函数的处理逻辑处理后，将处理后的数据由标准输出进行输出到下一个阶段。</p> <p>reduce函数也是按行读取数据，按照函数的处理逻辑处理完数据后，将它们通过标准输出写到hdfs的指定目录中。</p> <p>不管使用的是何种编程语言，在map函数中，原始数据会被处理成&lt;key,value&gt;的形式，但是key与value之间必须通过\t分隔符分隔，分隔符左边的是key，分隔符右边的是value,如果没有使用\t分隔符，那么整行都会被当作key</p> <h2>C#版MapReduce</h2> <p>首先，新增测试数据</p> </div> <div> <div> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">vi</span><span style="color: rgba(0, 0, 0, 1)"> mpdata  I love Beijing I love China Beijing is the capital of China</span></pre> </div> </div> <p>然后，将文件上传到hdfs</p> <div class="cnblogs_code"> <pre>[root@localhost ~]# hadoop fs -put mrdata /chesterdata</pre> </div> <p>新建dotnet6的console项目mapper，修改Program.cs</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System;</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Text.RegularExpressions;</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> mapper {</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Program     {</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">void</span> Main(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">[] args)         {</span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> line;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Hadoop passes data to the mapper on STDIN</span><span style="color: rgba(0, 0, 255, 1)">while</span>((line = Console.ReadLine()) !=<span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)             {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> We only want words, so strip out punctuation, numbers, etc.</span><span style="color: rgba(0, 0, 255, 1)">var</span> onlyText = Regex.Replace(line,<span style="color: rgba(128, 0, 0, 1)">@"</span><span style="color: rgba(128, 0, 0, 1)">\.|;|:|,|[0-9]|'</span><span style="color: rgba(128, 0, 0, 1)">"</span>,<span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Split at whitespace.</span><span style="color: rgba(0, 0, 255, 1)">var</span> words = Regex.Matches(onlyText,<span style="color: rgba(128, 0, 0, 1)">@"</span><span style="color: rgba(128, 0, 0, 1)">[\w]+</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Loop over the words</span><span style="color: rgba(0, 0, 255, 1)">foreach</span>(<span style="color: rgba(0, 0, 255, 1)">var</span> word<span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> words)                 {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Emit tab-delimited key/value pairs.</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">In this case, a word and a count of 1.</span>                     Console.WriteLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{0}\t1</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,word);                 }             }         }     } }</span></pre> </div> <p>发布mapper</p> <div class="cnblogs_code"> <pre>cd /demo/dotnet/mapper/<span style="color: rgba(0, 0, 0, 1)"> dotnet publish</span>-c Release -r linux-x64 /p:PublishSingleFile=<span style="color: rgba(0, 0, 255, 1)">true</span></pre> </div> <p>新建dotnet6的console项目reducer，修改Program.cs</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System;</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Collections.Generic;</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> reducer {</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Program     {</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">void</span> Main(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">[] args)         {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Dictionary for holding a count of words</span>             Dictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>,<span style="color: rgba(0, 0, 255, 1)">int</span>&gt; words =<span style="color: rgba(0, 0, 255, 1)">new</span> Dictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>,<span style="color: rgba(0, 0, 255, 1)">int</span>&gt;<span style="color: rgba(0, 0, 0, 1)">();</span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> line;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Read from STDIN</span><span style="color: rgba(0, 0, 255, 1)">while</span> ((line = Console.ReadLine()) !=<span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)             {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Data from Hadoop is tab-delimited key/value pairs</span><span style="color: rgba(0, 0, 255, 1)">var</span> sArr = line.Split(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\t</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Get the word</span><span style="color: rgba(0, 0, 255, 1)">string</span> word = sArr[<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">];</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Get the count</span><span style="color: rgba(0, 0, 255, 1)">int</span> count = Convert.ToInt32(sArr[<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">]);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Do we already have a count for the word?</span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)">(words.ContainsKey(word))                 {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">If so, increment the count</span>                     words[word] +=<span style="color: rgba(0, 0, 0, 1)"> count;                 }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">                 {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Add the key to the collection</span><span style="color: rgba(0, 0, 0, 1)">                    words.Add(word, count);                 }             }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Finally, emit each word and count</span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> word<span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> words)             {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Emit tab-delimited key/value pairs.</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">In this case, a word and a count of 1.</span>                 Console.WriteLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{0}\t{1}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, word.Key, word.Value);             }         }     } }</span></pre> </div> <p>发布reducer</p> <div class="cnblogs_code"> <pre>/demo/dotnet/<span style="color: rgba(0, 0, 0, 1)">reducer dotnet publish</span>-c Release -r linux-x64 /p:PublishSingleFile=<span style="color: rgba(0, 0, 255, 1)">true</span></pre> </div> <p>执行mapepr reduce</p> <div class="cnblogs_code"> <pre>hadoop jar /usr/local/hadoop323/hadoop-<span style="color: rgba(128, 0, 128, 1)">3.2</span>.<span style="color: rgba(128, 0, 128, 1)">3</span>/share/hadoop/tools/lib/hadoop-streaming-<span style="color: rgba(128, 0, 128, 1)">3.2</span>.<span style="color: rgba(128, 0, 128, 1)">3</span>.jar -input /chesterdata/mrdata -output /dotnetmroutput -mapper<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">./mapper</span><span style="color: rgba(128, 0, 0, 1)">"</span> -reducer<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">./reducer</span><span style="color: rgba(128, 0, 0, 1)">"</span> -file /demo/dotnet/mapper/bin/Release/net6.<span style="color: rgba(128, 0, 128, 1)">0</span>/linux-x64/publish/mapper -f /demo/dotnet/reducer/bin/Release/net6.<span style="color: rgba(128, 0, 128, 1)">0</span>/linux-x64/publish/reducer</pre> </div> <p>查看mapreduce结果</p> <div class="cnblogs_code"> <pre>[root@localhost reducer]# hadoop fs -ls /<span style="color: rgba(0, 0, 0, 1)">dotnetmroutput</span>-rw-r--r--<span style="color: rgba(128, 0, 128, 1)">1</span> root supergroup<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(128, 0, 128, 1)">2022</span>-<span style="color: rgba(128, 0, 128, 1)">05</span>-<span style="color: rgba(128, 0, 128, 1)">01</span><span style="color: rgba(128, 0, 128, 1)">16</span>:<span style="color: rgba(128, 0, 128, 1)">40</span> /dotnetmroutput/<span style="color: rgba(0, 0, 0, 1)">_SUCCESS</span>-rw-r--r--<span style="color: rgba(128, 0, 128, 1)">1</span> root supergroup<span style="color: rgba(128, 0, 128, 1)">55</span><span style="color: rgba(128, 0, 128, 1)">2022</span>-<span style="color: rgba(128, 0, 128, 1)">05</span>-<span style="color: rgba(128, 0, 128, 1)">01</span><span style="color: rgba(128, 0, 128, 1)">16</span>:<span style="color: rgba(128, 0, 128, 1)">40</span> /dotnetmroutput/part-<span style="color: rgba(128, 0, 128, 1)">00000</span></pre> </div> <p>查看part-00000内容</p> <div class="cnblogs_code"> <pre>[root@localhost reducer]# hadoop fs -cat /dotnetmroutput/part-<span style="color: rgba(128, 0, 128, 1)">00000</span><span style="color: rgba(0, 0, 0, 1)">  Beijing</span><span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)"> China</span><span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)"> I</span><span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)"> capital</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 255, 1)">is</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)"> love</span><span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)"> of</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)"> the</span><span style="color: rgba(128, 0, 128, 1)">1</span></pre> </div> <p>可以看到dotnet模式的Hadoop Streaming已经执行成功。</p> <h2>Python版MapReduce</h2> <div>使用与dotnet模式下同样的测试数据，编写mapper</div> <div> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> mapper.py</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> sys</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> re p</span>= re.compile(r<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\w+</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 0, 255, 1)">for</span> line<span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> sys.stdin:     words</span>= line.strip().split(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 0, 255, 1)">for</span> word<span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> words:         w</span>=<span style="color: rgba(0, 0, 0, 1)"> p.findall(word)</span><span style="color: rgba(0, 0, 255, 1)">if</span> len(w) &lt; 1<span style="color: rgba(0, 0, 0, 1)">:</span><span style="color: rgba(0, 0, 255, 1)">continue</span><span style="color: rgba(0, 0, 0, 1)">         s</span>=<span style="color: rgba(0, 0, 0, 1)"> w[0].strip().lower()</span><span style="color: rgba(0, 0, 255, 1)">if</span> s !=<span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">:</span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%s\t%s</span><span style="color: rgba(128, 0, 0, 1)">"</span> % (s, 1))</pre> </div> </div> <div> <p>编写reducer</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> reducer.py</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> sys res</span>=<span style="color: rgba(0, 0, 0, 1)"> dict()</span><span style="color: rgba(0, 0, 255, 1)">for</span> word_one<span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> sys.stdin:     word, one</span>= word_one.strip().split(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\t</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 0, 255, 1)">if</span> word<span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> res.keys():         res[word]</span>= res[word] + 1<span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:         res[word]</span>= 1<span style="color: rgba(0, 0, 255, 1)">print</span>(res)</pre> </div> <p>执行mapreduce</p> <div class="cnblogs_code"> <pre>hadoop jar /usr/local/hadoop323/hadoop-<span style="color: rgba(128, 0, 128, 1)">3.2</span>.<span style="color: rgba(128, 0, 128, 1)">3</span>/share/hadoop/tools/lib/hadoop-streaming-<span style="color: rgba(128, 0, 128, 1)">3.2</span>.<span style="color: rgba(128, 0, 128, 1)">3</span>.jar -input /chesterdata/mrdata -output /mroutput -mapper<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">python3 mapper.py</span><span style="color: rgba(128, 0, 0, 1)">"</span> -reducer<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">python3 reducer.py</span><span style="color: rgba(128, 0, 0, 1)">"</span> -<span style="color: rgba(0, 0, 255, 1)">file</span> /root/mapper.py -<span style="color: rgba(0, 0, 255, 1)">file</span> /root/reducer.py</pre> </div> <p>查看mapreduce结果</p> <div class="cnblogs_code"> <pre>[root@localhost lib]# hadoop fs -<span style="color: rgba(0, 0, 255, 1)">ls</span> /<span style="color: rgba(0, 0, 0, 1)">mroutput</span>-rw-r--r--<span style="color: rgba(128, 0, 128, 1)">1</span> root supergroup<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(128, 0, 128, 1)">2022</span>-<span style="color: rgba(128, 0, 128, 1)">05</span>-<span style="color: rgba(128, 0, 128, 1)">01</span><span style="color: rgba(128, 0, 128, 1)">05</span>:<span style="color: rgba(128, 0, 128, 1)">00</span> /mroutput/<span style="color: rgba(0, 0, 0, 1)">_SUCCESS</span>-rw-r--r--<span style="color: rgba(128, 0, 128, 1)">1</span> root supergroup<span style="color: rgba(128, 0, 128, 1)">89</span><span style="color: rgba(128, 0, 128, 1)">2022</span>-<span style="color: rgba(128, 0, 128, 1)">05</span>-<span style="color: rgba(128, 0, 128, 1)">01</span><span style="color: rgba(128, 0, 128, 1)">05</span>:<span style="color: rgba(128, 0, 128, 1)">00</span> /mroutput/part-<span style="color: rgba(128, 0, 128, 1)">00000</span></pre> </div> <p>查看part-00000内容</p> <div class="cnblogs_code"> <pre>[root@localhost lib]# hadoop fs -<span style="color: rgba(0, 0, 255, 1)">cat</span> /mroutput/part-<span style="color: rgba(128, 0, 128, 1)">00000</span><span style="color: rgba(0, 0, 0, 1)">  {</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">beijing</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 128, 1)">2</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">capital</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">china</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 128, 1)">2</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">i</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 128, 1)">2</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">is</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">love</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 128, 1)">2</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">of</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">the</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 128, 1)">1</span>}</pre> </div> <p>可以看到python模式的Hadoop Streaming已经执行成功。</p> </div> </div> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2746.htm">一道思考题所引起动态跟踪 ‘学案’ &#8211; 深入浅出eBPF _在线工具</a></p>
                                                        <p>下一个：<a href="/html/category/article-2748.htm">python——json，dict之间的转换load,dump, loads, dumps</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4341.htm" title="动物防疫站工作总结发言（动物防疫站工作总结发言材料）">动物防疫站工作总结发言（动物防疫站工作总结发言材料）</a></li>
                        <li class="py-2"><a href="/html/category/article-4310.htm" title="草头饼的做法窍门(草头饼的做法视频)">草头饼的做法窍门(草头饼的做法视频)</a></li>
                        <li class="py-2"><a href="/html/category/article-6167.htm" title="狗粮颗粒机器价格及图片大全（狗粮颗粒机 家用小型）">狗粮颗粒机器价格及图片大全（狗粮颗粒机 家用小型）</a></li>
                        <li class="py-2"><a href="/html/category/article-6770.htm" title="北京中农大动物医院有限公司招聘信息（北京中农大动物药业官网）">北京中农大动物医院有限公司招聘信息（北京中农大动物药业官网）</a></li>
                        <li class="py-2"><a href="/html/category/article-5947.htm" title="动物疫苗厂家排名榜前十名有哪些 动物疫苗厂家排名榜前十名有哪些品种">动物疫苗厂家排名榜前十名有哪些 动物疫苗厂家排名榜前十名有哪些品种</a></li>
                        <li class="py-2"><a href="/html/category/article-4533.htm" title="青浦二中本科录取率（青浦二中本科录取率2019）">青浦二中本科录取率（青浦二中本科录取率2019）</a></li>
                        <li class="py-2"><a href="/html/category/article-3748.htm" title="vue路由跳转router-link清除历史记录的三种方式(总结)_vue.js_">vue路由跳转router-link清除历史记录的三种方式(总结)_vue.js_</a></li>
                        <li class="py-2"><a href="/html/category/article-4113.htm" title="UnrealEngine创建自定义资产类型">UnrealEngine创建自定义资产类型</a></li>
                        <li class="py-2"><a href="/html/category/article-4604.htm" title="成都宠物救助热线电话（成都市宠物救助站是24小时的吗）">成都宠物救助热线电话（成都市宠物救助站是24小时的吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-4567.htm" title="上海宠物医院检验情况（上海宠物医院在线咨询）">上海宠物医院检验情况（上海宠物医院在线咨询）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>