<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2551.htm" />
    <title>SpringBoot项目框架下ThreadPoolExecutor线程池+Queue缓冲队列实现高并发中进行下单业务 - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>SpringBoot项目框架下ThreadPoolExecutor线程池+Queue缓冲队列实现高并发中进行下单业务</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<div id="content_views" class="htmledit_views"> <p>主要是自己在项目中(中小型项目) 有支付下单业务(只是办理VIP，没有涉及到商品库存)，目前用户量还没有上来，目前没有出现问题，但是想到如果用户量变大，下单并发量变大，可能会出现一系列的问题，趁着空闲时间，做了这个demo测试相关问题。</p> <p>可能遇到的问题如下：</p> <p style="text-align:left;">&nbsp;1.订单重复</p> <p style="text-align:left;">&nbsp;2.高并发下，性能变慢</p> <p style="text-align:left;"><strong>解决方式：ThreadPoolExecutor线程池 + Queue队列</strong></p> <p style="text-align:left;"><strong>开发工具：IDEA 15</strong></p> <p style="text-align:left;">1.首先是springBoot的项目框架如下：</p> <p style="text-align:left;"><img decoding="async" src="http://img.555519.xyz/uploads3/20220707/c4e502907d29a1c84240b12e878303ab.jpg" alt="SpringBoot项目框架下ThreadPoolExecutor线程池+Queue缓冲队列实现高并发中进行下单业务"></p> <p style="text-align:left;"><span style="text-align:left;">2.业务测试流程涉及的类，如下</span></p> <p style="background-color:#2b2b2b;color:#a9b7c6;font-family:Consolas;font-size:12pt;"><span style="background-color:#344134;">BusinessThread 类</span></p> <p style="background-color:#2b2b2b;color:#a9b7c6;font-family:Consolas;font-size:12pt;"><span style="background-color:#344134;"></span></p> <pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:Consolas;font-size:12pt;"><span style="color:#cc7832;">package</span>com.springboot.demo.Threads<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#cc7832;">import</span><span style="color:#bbb529;">org.springframework.context.annotation.Scope</span><span style="color:#cc7832;">;</span><span style="color:#cc7832;">import</span><span style="color:#bbb529;">org.springframework.stereotype.Component</span><span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#cc7832;"></span><span style="color:#629755;"><em>/**</em></span><span style="color:#629755;"><em> * Created by Administrator on 2018/5/9.</em></span><span style="color:#629755;"><em> */</em></span><span style="color:#bbb529;">@Component</span><span style="color:#bbb529;">@Scope</span>(<span style="color:#6a8759;">"prototype"</span>)<span style="color:#808080;">//spring</span><span style="color:#808080;font-family:'宋体';">多例</span><span style="color:#cc7832;">public class</span>BusinessThread<span style="color:#cc7832;">implements</span>Runnable{<span style="color:#cc7832;">private</span>String<span style="color:#9876aa;">acceptStr</span><span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#cc7832;">    public</span>BusinessThread(String acceptStr) {<span style="color:#cc7832;">this</span>.<span style="color:#9876aa;">acceptStr</span>= acceptStr<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span>}<span style="color:#cc7832;">public</span>String<span style="color:#ffc66d;">getAcceptStr</span>() {<span style="color:#cc7832;">return</span><span style="color:#9876aa;">acceptStr</span><span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span>}<span style="color:#cc7832;">public void</span><span style="color:#ffc66d;">setAcceptStr</span>(String acceptStr) {<span style="color:#cc7832;">this</span>.<span style="color:#9876aa;">acceptStr</span>= acceptStr<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span>}<span style="color:#bbb529;">@Override</span><span style="color:#bbb529;"></span><span style="color:#cc7832;">public void</span><span style="color:#ffc66d;">run</span>() {<span style="color:#808080;">//</span><span style="color:#808080;font-family:'宋体';">业务操作</span><span style="color:#808080;font-family:'宋体';"></span>System.<span style="color:#9876aa;"><em>out</em></span>.println(<span style="color:#6a8759;">"</span><span style="color:#6a8759;font-family:'宋体';">多线程已经处理订单插入系统，订单号：</span><span style="color:#6a8759;">"</span>+<span style="color:#9876aa;">acceptStr</span>)<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#cc7832;"></span><span style="color:#808080;">//</span><span style="color:#808080;font-family:'宋体';">线程阻塞</span><span style="color:#808080;font-family:'宋体';"></span><span style="color:#808080;">/*try {</span><span style="color:#808080;">            Thread.sleep(1000);</span><span style="color:#808080;">            System.out.println("</span><span style="color:#808080;font-family:'宋体';">多线程已经处理订单插入系统，订单号：</span><span style="color:#808080;">"+acceptStr);</span><span style="color:#808080;">        } catch (InterruptedException e) {</span><span style="color:#808080;">            e.printStackTrace();</span><span style="color:#808080;">        }*/</span><span style="color:#808080;"></span>} }</pre> <p></p> <p style="background-color:#2b2b2b;color:#a9b7c6;font-family:Consolas;font-size:12pt;"><span style="font-size:12pt;line-height:20px;background-color:rgb(52,65,52);">TestThreadPoolManager 类</span></p> <p style="background-color:#2b2b2b;color:#a9b7c6;font-family:Consolas;font-size:12pt;"><span style="font-size:12pt;line-height:20px;background-color:rgb(52,65,52);"></span></p> <pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:Consolas;font-size:12pt;"><span style="color:#cc7832;">package</span>com.springboot.demo.Threads<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#cc7832;">import</span>org.springframework.beans.BeansException<span style="color:#cc7832;">;</span><span style="color:#cc7832;">import</span>org.springframework.beans.factory.BeanFactory<span style="color:#cc7832;">;</span><span style="color:#cc7832;">import</span>org.springframework.beans.factory.BeanFactoryAware<span style="color:#cc7832;">;</span><span style="color:#cc7832;">import</span><span style="color:#bbb529;">org.springframework.stereotype.Component</span><span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#cc7832;">import</span>java.util.Map<span style="color:#cc7832;">;</span><span style="color:#cc7832;">import</span>java.util.Queue<span style="color:#cc7832;">;</span><span style="color:#cc7832;">import</span>java.util.concurrent.*<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#629755;"><em>/**</em></span><span style="color:#629755;"><em> * Created by Administrator on 2018/5/10.</em></span><span style="color:#629755;"><em> */</em></span><span style="color:#bbb529;">@Component</span><span style="color:#cc7832;">public class</span><span style="background-color:#344134;">TestThreadPoolManager</span><span style="color:#cc7832;">implements</span>BeanFactoryAware {<span style="color:#808080;">//</span><span style="color:#808080;font-family:'宋体';">用于从</span><span style="color:#808080;">IOC</span><span style="color:#808080;font-family:'宋体';">里取对象</span><span style="color:#808080;font-family:'宋体';"></span><span style="color:#cc7832;">private</span>BeanFactory<span style="color:#9876aa;">factory</span><span style="color:#cc7832;">; //如果实现Runnable的类是通过spring的application.xml文件进行注入,可通过 factory.getBean()获取，这里只是提一下</span><span style="color:#cc7832;"></span><span style="color:#808080;">//</span><span style="color:#808080;font-family:'宋体';">线程池维护线程的最少数量</span><span style="color:#808080;font-family:'宋体';"></span><span style="color:#cc7832;">private final static int</span><span style="color:#9876aa;"><em>CORE_POOL_SIZE</em></span>=<span style="color:#6897bb;">2</span><span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#808080;">//</span><span style="color:#808080;font-family:'宋体';">线程池维护线程的最大数量</span><span style="color:#808080;font-family:'宋体';"></span><span style="color:#cc7832;">private final static int</span><span style="color:#9876aa;"><em>MAX_POOL_SIZE</em></span>=<span style="color:#6897bb;">10</span><span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#808080;">//</span><span style="color:#808080;font-family:'宋体';">线程池维护线程所允许的空闲时间</span><span style="color:#808080;font-family:'宋体';"></span><span style="color:#cc7832;">private final static int</span><span style="color:#9876aa;"><em>KEEP_ALIVE_TIME</em></span>=<span style="color:#6897bb;">0</span><span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#808080;">//</span><span style="color:#808080;font-family:'宋体';">线程池所使用的缓冲队列大小</span><span style="color:#808080;font-family:'宋体';"></span><span style="color:#cc7832;">private final static int</span><span style="color:#9876aa;"><em>WORK_QUEUE_SIZE</em></span>=<span style="color:#6897bb;">50</span><span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#cc7832;"></span><span style="color:#bbb529;">@Override</span><span style="color:#bbb529;"></span><span style="color:#cc7832;">public void</span><span style="color:#ffc66d;">setBeanFactory</span>(BeanFactory beanFactory)<span style="color:#cc7832;">throws</span>BeansException {<span style="color:#9876aa;">factory</span>= beanFactory<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span>}<span style="color:#629755;"><em>/**</em></span><span style="color:#629755;"><em>     *</em></span><span style="color:#629755;font-family:'宋体';"><em>用于储存在队列中的订单</em></span><span style="color:#629755;"><em>,</em></span><span style="color:#629755;font-family:'宋体';"><em>防止重复提交</em></span><span style="color:#629755;"><em>,</em></span><span style="color:#629755;font-family:'宋体';"><em>在真实场景中，可用</em></span><span style="color:#629755;"><em>redis</em></span><span style="color:#629755;font-family:'宋体';"><em>代替 验证重复</em></span><span style="color:#629755;font-family:'宋体';"><em></em></span><span style="color:#629755;"><em>*/</em></span><span style="color:#629755;"><em></em></span>Map&lt;String<span style="color:#cc7832;">,</span>Object&gt;<span style="color:#9876aa;">cacheMap</span>=<span style="color:#cc7832;">new</span>ConcurrentHashMap&lt;&gt;()<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#cc7832;"></span><span style="color:#cc7832;"></span><span style="color:#629755;"><em>/**</em></span><span style="color:#629755;"><em>     *</em></span><span style="color:#629755;font-family:'宋体';"><em>订单的缓冲队列</em></span><span style="color:#629755;"><em>,</em></span><span style="color:#629755;font-family:'宋体';"><em>当线程池满了，则将订单存入到此缓冲队列</em></span><span style="color:#629755;font-family:'宋体';"><em></em></span><span style="color:#629755;"><em>*/</em></span><span style="color:#629755;"><em></em></span>Queue&lt;Object&gt;<span style="color:#9876aa;">msgQueue</span>=<span style="color:#cc7832;">new</span>LinkedBlockingQueue&lt;Object&gt;()<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#cc7832;"></span><span style="color:#cc7832;"></span><span style="color:#629755;"><em>/**</em></span><span style="color:#629755;"><em>     *</em></span><span style="color:#629755;font-family:'宋体';"><em>当线程池的容量满了，执行下面代码，将订单存入到缓冲队列</em></span><span style="color:#629755;font-family:'宋体';"><em></em></span><span style="color:#629755;"><em>*/</em></span><span style="color:#629755;"><em></em></span><span style="color:#cc7832;">final</span>RejectedExecutionHandler<span style="color:#9876aa;">handler</span>=<span style="color:#cc7832;">new</span>RejectedExecutionHandler() {<span style="color:#bbb529;">@Override</span><span style="color:#bbb529;"></span><span style="color:#cc7832;">public void</span><span style="color:#ffc66d;">rejectedExecution</span>(Runnable r<span style="color:#cc7832;">,</span>ThreadPoolExecutor executor) {<span style="color:#808080;">//</span><span style="color:#808080;font-family:'宋体';">订单加入到缓冲队列</span><span style="color:#808080;font-family:'宋体';"></span><span style="color:#9876aa;">msgQueue</span>.offer(((BusinessThread) r).getAcceptStr())<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span>System.<span style="color:#9876aa;"><em>out</em></span>.println(<span style="color:#6a8759;">"</span><span style="color:#6a8759;font-family:'宋体';">系统任务太忙了</span><span style="color:#6a8759;">,</span><span style="color:#6a8759;font-family:'宋体';">把此订单交给</span><span style="color:#6a8759;">(</span><span style="color:#6a8759;font-family:'宋体';">调度线程池</span><span style="color:#6a8759;">)</span><span style="color:#6a8759;font-family:'宋体';">逐一处理，订单号：</span><span style="color:#6a8759;">"</span>+ ((BusinessThread) r).getAcceptStr())<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span>}     }<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#cc7832;"></span><span style="color:#cc7832;"></span><span style="color:#629755;"><em>/**</em></span><span style="color:#629755;font-family:'宋体';"><em>创建线程池</em></span><span style="color:#629755;"><em>*/</em></span><span style="color:#629755;"><em></em></span><span style="color:#cc7832;">final</span>ThreadPoolExecutor<span style="color:#9876aa;">threadPool</span>=<span style="color:#cc7832;">new</span>ThreadPoolExecutor(<span style="color:#9876aa;"><em>CORE_POOL_SIZE</em></span><span style="color:#cc7832;">,</span><span style="color:#9876aa;"><em>MAX_POOL_SIZE</em></span><span style="color:#cc7832;">,</span><span style="color:#9876aa;"><em>KEEP_ALIVE_TIME</em></span><span style="color:#cc7832;">,</span>TimeUnit.<span style="color:#9876aa;"><em>SECONDS</em></span><span style="color:#cc7832;">, new</span>ArrayBlockingQueue(<span style="color:#9876aa;"><em>WORK_QUEUE_SIZE</em></span>)<span style="color:#cc7832;">, this</span>.<span style="color:#9876aa;">handler</span>)<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#cc7832;"></span><span style="color:#cc7832;"></span><span style="color:#629755;"><em>/**</em></span><span style="color:#629755;font-family:'宋体';"><em>将任务加入订单线程池</em></span><span style="color:#629755;"><em>*/</em></span><span style="color:#629755;"><em></em></span><span style="color:#cc7832;">public void</span><span style="color:#ffc66d;">addOrders</span>(String orderId){         System.<span style="color:#9876aa;"><em>out</em></span>.println(<span style="color:#6a8759;">"</span><span style="color:#6a8759;font-family:'宋体';">此订单准备添加到线程池，订单号：</span><span style="color:#6a8759;">"</span>+ orderId)<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#808080;">//</span><span style="color:#808080;font-family:'宋体';">验证当前进入的订单是否已经存在</span><span style="color:#808080;font-family:'宋体';"></span><span style="color:#cc7832;">if</span>(<span style="color:#9876aa;">cacheMap</span>.get(orderId) ==<span style="color:#cc7832;">null</span>) {<span style="color:#9876aa;">cacheMap</span>.put(orderId<span style="color:#cc7832;">, new</span>Object())<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span>BusinessThread businessThread =<span style="color:#cc7832;">new</span>BusinessThread(orderId)<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#9876aa;">threadPool</span>.execute(businessThread)<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span>}     }<span style="color:#629755;"><em>/**</em></span><span style="color:#629755;"><em>     *</em></span><span style="color:#629755;font-family:'宋体';"><em>线程池的定时任务</em></span><span style="color:#629755;"><em>----&gt;</em></span><span style="color:#629755;font-family:'宋体';"><em>称为</em></span><span style="color:#629755;"><em>(</em></span><span style="color:#629755;font-family:'宋体';"><em>调度线程池</em></span><span style="color:#629755;"><em>)</em></span><span style="color:#629755;font-family:'宋体';"><em>。此线程池支持 定时以及周期性执行任务的需求。</em></span><span style="color:#629755;font-family:'宋体';"><em></em></span><span style="color:#629755;"><em>*/</em></span><span style="color:#629755;"><em></em></span><span style="color:#cc7832;">final</span>ScheduledExecutorService<span style="color:#9876aa;">scheduler</span>= Executors.<span style="font-style:italic;">newScheduledThreadPool</span>(<span style="color:#6897bb;">5</span>)<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#cc7832;"></span><span style="color:#cc7832;"></span><span style="color:#629755;"><em>/**</em></span><span style="color:#629755;"><em>     *</em></span><span style="color:#629755;font-family:'宋体';"><em>检查</em></span><span style="color:#629755;"><em>(</em></span><span style="color:#629755;font-family:'宋体';"><em>调度线程池</em></span><span style="color:#629755;"><em>)</em></span><span style="color:#629755;font-family:'宋体';"><em>，每秒执行一次，查看订单的缓冲队列是否有 订单记录，则重新加入到线程池</em></span><span style="color:#629755;font-family:'宋体';"><em></em></span><span style="color:#629755;"><em>*/</em></span><span style="color:#629755;"><em></em></span><span style="color:#cc7832;">final</span>ScheduledFuture<span style="color:#9876aa;">scheduledFuture</span>=<span style="color:#9876aa;">scheduler</span>.scheduleAtFixedRate(<span style="color:#cc7832;">new</span>Runnable() {<span style="color:#bbb529;">@Override</span><span style="color:#bbb529;"></span><span style="color:#cc7832;">public void</span><span style="color:#ffc66d;">run</span>() {<span style="color:#808080;">//</span><span style="color:#808080;font-family:'宋体';">判断缓冲队列是否存在记录</span><span style="color:#808080;font-family:'宋体';"></span><span style="color:#cc7832;">if</span>(!<span style="color:#9876aa;">msgQueue</span>.isEmpty()){<span style="color:#808080;">//</span><span style="color:#808080;font-family:'宋体';">当线程池的队列容量少于</span><span style="color:#808080;">WORK_QUEUE_SIZE</span><span style="color:#808080;font-family:'宋体';">，则开始把缓冲队列的订单 加入到 线程池</span><span style="color:#808080;font-family:'宋体';"></span><span style="color:#cc7832;">if</span>(<span style="color:#9876aa;">threadPool</span>.getQueue().size() &lt;<span style="color:#9876aa;"><em>WORK_QUEUE_SIZE</em></span>) {                     String orderId = (String)<span style="color:#9876aa;">msgQueue</span>.poll()<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span>BusinessThread businessThread =<span style="color:#cc7832;">new</span>BusinessThread(orderId)<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#9876aa;">threadPool</span>.execute(businessThread)<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span>System.<span style="color:#9876aa;"><em>out</em></span>.println(<span style="color:#6a8759;">"(</span><span style="color:#6a8759;font-family:'宋体';">调度线程池</span><span style="color:#6a8759;">)</span><span style="color:#6a8759;font-family:'宋体';">缓冲队列出现订单业务，重新添加到线程池，订单号：</span><span style="color:#6a8759;">"</span>+orderId)<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span>}             }         }     }<span style="color:#cc7832;">,</span><span style="color:#6897bb;">0</span><span style="color:#cc7832;">,</span><span style="color:#6897bb;">1</span><span style="color:#cc7832;">,</span>TimeUnit.<span style="color:#9876aa;"><em>SECONDS</em></span>)<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#cc7832;"></span><span style="color:#cc7832;"></span><span style="color:#629755;"><em>/**</em></span><span style="color:#629755;font-family:'宋体';"><em>获取消息缓冲队列</em></span><span style="color:#629755;"><em>*/</em></span><span style="color:#629755;"><em></em></span><span style="color:#cc7832;">public</span>Queue&lt;Object&gt;<span style="color:#ffc66d;">getMsgQueue</span>() {<span style="color:#cc7832;">return</span><span style="color:#9876aa;">msgQueue</span><span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span>}<span style="color:#629755;"><em>/**</em></span><span style="color:#629755;font-family:'宋体';"><em>终止订单线程池</em></span><span style="color:#629755;"><em>+</em></span><span style="color:#629755;font-family:'宋体';"><em>调度线程池</em></span><span style="color:#629755;"><em>*/</em></span><span style="color:#629755;"><em></em></span><span style="color:#cc7832;">public void</span><span style="color:#ffc66d;">shutdown</span>() {<span style="color:#808080;">//true</span><span style="color:#808080;font-family:'宋体';">表示如果定时任务在执行，立即中止，</span><span style="color:#808080;">false</span><span style="color:#808080;font-family:'宋体';">则等待任务结束后再停止</span><span style="color:#808080;font-family:'宋体';"></span>System.<span style="color:#9876aa;"><em>out</em></span>.println(<span style="color:#6a8759;">"</span><span style="color:#6a8759;font-family:'宋体';">终止订单线程池</span><span style="color:#6a8759;">+</span><span style="color:#6a8759;font-family:'宋体';">调度线程池：</span><span style="color:#6a8759;">"</span>+<span style="color:#9876aa;">scheduledFuture</span>.cancel(<span style="color:#cc7832;">false</span>))<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#9876aa;">scheduler</span>.shutdown()<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#9876aa;">threadPool</span>.shutdown()<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#cc7832;"></span>} }</pre> <p style="background-color:#2b2b2b;color:#a9b7c6;font-family:Consolas;font-size:12pt;"><span style="font-size:12pt;line-height:20px;background-color:rgb(52,65,52);">TestController 类</span></p> <p style="background-color:#2b2b2b;color:#a9b7c6;font-family:Consolas;font-size:12pt;"><span style="font-size:12pt;line-height:20px;background-color:rgb(52,65,52);"></span></p> <pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:Consolas;font-size:12pt;"><span style="color:#cc7832;">package</span>com.springboot.demo<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#cc7832;">import</span>com.springboot.demo.Threads.TestThreadPoolManager<span style="color:#cc7832;">;</span><span style="color:#cc7832;">import</span><span style="color:#bbb529;">org.springframework.beans.factory.annotation.Autowired</span><span style="color:#cc7832;">;</span><span style="color:#cc7832;">import</span><span style="color:#bbb529;">org.springframework.web.bind.annotation.GetMapping</span><span style="color:#cc7832;">;</span><span style="color:#cc7832;">import</span><span style="color:#bbb529;">org.springframework.web.bind.annotation.PathVariable</span><span style="color:#cc7832;">;</span><span style="color:#cc7832;">import</span><span style="color:#bbb529;">org.springframework.web.bind.annotation.RestController</span><span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#cc7832;">import</span>java.util.Queue<span style="color:#cc7832;">;</span><span style="color:#cc7832;">import</span>java.util.UUID<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#629755;"><em>/**</em></span><span style="color:#629755;"><em> * Created by Administrator on 2018/5/9.</em></span><span style="color:#629755;"><em> */</em></span><span style="color:#bbb529;">@RestController</span><span style="color:#cc7832;">public class</span>TestController {<span style="color:#bbb529;">@Autowired</span><span style="color:#bbb529;"></span>TestThreadPoolManager<span style="color:#9876aa;">testThreadPoolManager</span><span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#cc7832;"></span><span style="color:#629755;"><em>/**</em></span><span style="color:#629755;"><em>     *</em></span><span style="color:#629755;font-family:'宋体';"><em>测试模拟下单请求 入口</em></span><span style="color:#629755;font-family:'宋体';"><em></em></span><span style="color:#629755;"><em>*</em></span><span style="color:#629755;"><strong><em>@param</em></strong></span><span style="color:#8a653b;"><em>id</em></span><span style="color:#8a653b;"><em></em></span><span style="color:#629755;"><em>*</em></span><span style="color:#629755;"><strong><em>@return</em></strong></span><span style="color:#629755;"><strong><em></em></strong></span><span style="color:#629755;"><em>*/</em></span><span style="color:#629755;"><em></em></span><span style="color:#bbb529;">@GetMapping</span>(<span style="color:#6a8759;">"/start/{id}"</span>)<span style="color:#cc7832;">public</span>String<span style="color:#ffc66d;">start</span>(<span style="color:#bbb529;">@PathVariable</span>Long id) {<span style="color:#808080;">//</span><span style="color:#808080;font-family:'宋体';">模拟的随机数</span><span style="color:#808080;font-family:'宋体';"></span>String orderNo = System.<span style="font-style:italic;">currentTimeMillis</span>() + UUID.<span style="font-style:italic;">randomUUID</span>().toString()<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#cc7832;"></span><span style="color:#9876aa;">testThreadPoolManager</span>.addOrders(orderNo)<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#cc7832;">        return</span><span style="color:#6a8759;">"Test ThreadPoolExecutor start"</span><span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span>}<span style="color:#629755;"><em>/**</em></span><span style="color:#629755;"><em>     *</em></span><span style="color:#629755;font-family:'宋体';"><em>停止服务</em></span><span style="color:#629755;font-family:'宋体';"><em></em></span><span style="color:#629755;"><em>*</em></span><span style="color:#629755;"><strong><em>@param</em></strong></span><span style="color:#8a653b;"><em>id</em></span><span style="color:#8a653b;"><em></em></span><span style="color:#629755;"><em>*</em></span><span style="color:#629755;"><strong><em>@return</em></strong></span><span style="color:#629755;"><strong><em></em></strong></span><span style="color:#629755;"><em>*/</em></span><span style="color:#629755;"><em></em></span><span style="color:#bbb529;">@GetMapping</span>(<span style="color:#6a8759;">"/end/{id}"</span>)<span style="color:#cc7832;">public</span>String<span style="color:#ffc66d;">end</span>(<span style="color:#bbb529;">@PathVariable</span>Long id) {<span style="color:#9876aa;">testThreadPoolManager</span>.shutdown()<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span><span style="color:#cc7832;"></span>Queue q =<span style="color:#9876aa;">testThreadPoolManager</span>.getMsgQueue()<span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span>System.<span style="color:#9876aa;"><em>out</em></span>.println(<span style="color:#6a8759;">"</span><span style="color:#6a8759;font-family:'宋体';">关闭了线程服务，还有未处理的信息条数：</span><span style="color:#6a8759;">"</span>+ q.size())<span style="color:#cc7832;">;</span><span style="color:#cc7832;">        return</span><span style="color:#6a8759;">"Test ThreadPoolExecutor start"</span><span style="color:#cc7832;">;</span><span style="color:#cc7832;"></span>} }</pre> <p></p> <p style="font-family:Consolas;font-size:12pt;">3.使用JMeter模拟并发下单请求 (JMeter使用可自行百度)</p> <p style="font-family:Consolas;font-size:12pt;"><img decoding="async" src="http://img.555519.xyz/uploads3/20220707/f34598ed31f283e26825833fd8d97908.jpg" alt="SpringBoot项目框架下ThreadPoolExecutor线程池+Queue缓冲队列实现高并发中进行下单业务"></p> <p style="font-family:Consolas;font-size:12pt;">4.打印的日志说明，开始的订单直接执行插入到系统，当线程池的容量已经满了，则使用RejectedExecutionHandler方法把后面的订单添加到 Queue缓冲队列，使用ScheduledFuture方法定时(我这里是每秒一次)检查Queue队列，重新把队列里面的订单添加到线程池，执行后面的插入任务。部分日志如下</p> <p style="font-family:Consolas;font-size:12pt;"><img decoding="async" src="http://img.555519.xyz/uploads3/20220707/d3aad38945617476b78b9d95c8d6a50e.jpg" alt="SpringBoot项目框架下ThreadPoolExecutor线程池+Queue缓冲队列实现高并发中进行下单业务"></p> <p style="font-family:Consolas;font-size:12pt;"></p> </div> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2550.htm">领域驱动模型DDD领域事件的订阅/发布实践</a></p>
                                                        <p>下一个：<a href="/html/category/article-2552.htm">从线上环境摘取了四个代码优化记录分享给大家</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7231.htm" title="海贼王修佐（海贼王修佐vs鼹鼠）">海贼王修佐（海贼王修佐vs鼹鼠）</a></li>
                        <li class="py-2"><a href="/html/category/article-7783.htm" title="微信上买狗被欺骗怎么办（微信买狗被骗一千五百块钱法院会受理吗）">微信上买狗被欺骗怎么办（微信买狗被骗一千五百块钱法院会受理吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7185.htm" title="怎么开宠物店需要些什么证件（怎么开宠物店需要些什么证件和材料）">怎么开宠物店需要些什么证件（怎么开宠物店需要些什么证件和材料）</a></li>
                        <li class="py-2"><a href="/html/category/article-7047.htm" title="兽医资格证考取条件（兽医资格证考取条件要求）">兽医资格证考取条件（兽医资格证考取条件要求）</a></li>
                        <li class="py-2"><a href="/html/category/article-7507.htm" title="流浪猫来预示着家里要死人了（猫不请自来兆头）">流浪猫来预示着家里要死人了（猫不请自来兆头）</a></li>
                        <li class="py-2"><a href="/html/category/article-6724.htm" title="奥拉氟牙膏哪个牌子好(儿童含氟牙膏哪个牌子好)">奥拉氟牙膏哪个牌子好(儿童含氟牙膏哪个牌子好)</a></li>
                        <li class="py-2"><a href="/html/category/article-7552.htm" title="流浪宠物领养平台官网（流浪宠物领养平台官网下载）">流浪宠物领养平台官网（流浪宠物领养平台官网下载）</a></li>
                        <li class="py-2"><a href="/html/category/article-7139.htm" title="老鸭汤料包哪个牌子好吃一点(老鸭汤料包哪个牌子好吃又实惠)">老鸭汤料包哪个牌子好吃一点(老鸭汤料包哪个牌子好吃又实惠)</a></li>
                        <li class="py-2"><a href="/html/category/article-7230.htm" title="梅林（梅林午餐肉）">梅林（梅林午餐肉）</a></li>
                        <li class="py-2"><a href="/html/category/article-7277.htm" title="新手怎么联系厂家进货没有电话（怎样联系厂家拿到最便宜的货）">新手怎么联系厂家进货没有电话（怎样联系厂家拿到最便宜的货）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>