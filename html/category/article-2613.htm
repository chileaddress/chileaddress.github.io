<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2613.htm" />
    <title>Spring Boot 进阶 | 01 使用Feign作为HTTP客户端调用远程HTTP服务 - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>Spring Boot 进阶 | 01 使用Feign作为HTTP客户端调用远程HTTP服务</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<div id="content_views" class="markdown_views prism-github-gist"> <div class="toc"> <h3>文章目录</h3> <ul> <li> <ul> <li> <ul> <li><a href="#Feign__2" rel="nofollow">Feign 简介</a></li> <li><a href="#maven_11" rel="nofollow">maven依赖</a></li> <li><a href="#Feign_24" rel="nofollow">Feign客户端接口（消费者）</a></li> <li><a href="#applicationyml_87" rel="nofollow">配置文件application.yml</a></li> <li><a href="#Configuration_99" rel="nofollow">配置类Configuration</a></li> <li><a href="#_122" rel="nofollow">定义主体启动类</a></li> <li><a href="#feignHystrix_133" rel="nofollow">feign使用Hystrix</a></li> <li> <ul> <li> <ul> <li><a href="#_134" rel="nofollow">添加依赖</a></li> <li><a href="#feignfallback_142" rel="nofollow">feign接口注解中,增加fallback指定类</a></li> <li><a href="#_146" rel="nofollow">指定类中处理熔断的后续逻辑</a></li> <li><a href="#_158" rel="nofollow">配置文件</a></li> <li><a href="#_173" rel="nofollow">修改启动类</a></li> </ul> </li> </ul> </li> <li><a href="#Feign_217" rel="nofollow">Feign的扩展配置</a></li> </ul> </li> </ul> </li> </ul> </div> <h3><a id="Feign__2" rel="nofollow"></a>Feign 简介</h3> <p>Spring Cloud 的 Feign 支持的一个中心概念就是命名客户端。Feign客户端使用<code>@FeignClient</code> 注册组合成组件,按需调用远程服务器。使用<code>FeignClientsConfiguration</code> 创建一个新的集合作为每个命名客户端的ApplicationContext，包含<code>feign.Decoder</code>，<code>feign.Encoder</code> 和<code>feign.Contract</code>。</p> <p>可以使用<code>Jersey</code> 和<code>CXF</code> 这些来写一个 Rest 或 SOAP 服务的java客服端，也可以直接使用<code>Apache HttpClient</code> 来实现。但是 Feign 的目的是尽量的减少资源和代码来实现和 HTTP API 的连接。通过自定义的编码解码器以及错误处理，你可以编写任何基于文本的 HTTP API。</p> <p>Feign 通过注解注入一个模板化请求进行工作。只需在发送之前关闭它，参数就可以被直接的运用到模板中。然而这也限制了 Feign，只支持文本形式的API，它在响应请求等方面极大的简化了系统。同时，它也是十分容易进行单元测试的。</p> <p>Spring Cloud 应用在启动时，Feign 会扫描标有<code>@FeignClient</code> 注解的接口生成代理，并注册到Spring容器中。生成代理时Feign会为每个接口方法创建一个<code>RequetTemplate</code> 对象，该对象封装了 HTTP 请求需要的全部信息，请求参数名、请求方法等信息都是在这个过程中确定的，Feign 的模板化就体现在这里。</p> <h3><a id="maven_11" rel="nofollow"></a>maven依赖</h3> <pre><code>&lt;dependencies&gt; &lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt;    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;</code></pre> <h3><a id="Feign_24" rel="nofollow"></a>Feign客户端接口（消费者）</h3> <p>使用<code>@FeignClient</code> 请发起请求：</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"user"</span><span class="token punctuation">,</span> url<span class="token operator">=</span><span class="token string">"${addr.url}"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">interface</span><span class="token class-name">UserClient</span><span class="token punctuation">{<!-- --></span><span class="token comment">// Feign 独有的注解方式</span><span class="token annotation punctuation">@RequestLine</span><span class="token punctuation">(</span><span class="token string">"GET /user/index"</span><span class="token punctuation">)</span>         String<span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/get0/{id}"</span><span class="token punctuation">,</span> method<span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>         User<span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/get1"</span><span class="token punctuation">,</span> method<span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>         User<span class="token function">get1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/get2"</span><span class="token punctuation">,</span> method<span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>         User<span class="token function">get2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> Map<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/hello2"</span><span class="token punctuation">,</span> method<span class="token operator">=</span>RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>         User<span class="token function">hello2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> Integer age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/hello3"</span><span class="token punctuation">,</span> method<span class="token operator">=</span>RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>         String<span class="token function">hello3</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>当前工程中有和 Feign Client 中一样的 Endpoint 时，Feign Client 的类上不能用 @RequestMapping 注解，否则当前工程该 endpoint http 请求且使用 accpet 时会报404。但是如果不包含 Accept header 时,请求是可以的。<br /> 不在 Feign Client 上使用 @RequestMapping 注解，无论是否包含Accept，请求都是可以的：</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"card"</span><span class="token punctuation">,</span> url<span class="token operator">=</span><span class="token string">"http://localhost:7913"</span><span class="token punctuation">,</span>  	fallback<span class="token operator">=</span> CardFeignClientFallback<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> 	configuration<span class="token operator">=</span> FeignClientConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">interface</span><span class="token class-name">CardFeignClient</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/v1/card/balance"</span><span class="token punctuation">,</span> method<span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">,</span>                  produces<span class="token operator">=</span> MediaType<span class="token punctuation">.</span>APPLICATION_JSON_VALUE<span class="token punctuation">)</span>     Info<span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>Feign将方法签名中方法参数对象序列化为请求参数放到 HTTP 请求中的过程，是由编码器 Encoder 完成的。同理，将 HTTP 响应数据反序列化为 Java 对象是由解码器 Decoder 完成的。<br /> 默认情况下，Feign会将标有 @RequestParam 注解的参数转换成字符串添加到 URL 中，将没有注解的参数通过 Jackson 转换成 json 放到请求体中。注意，如果在 @RequetMapping 中的 method 将请求方式指定为 POST ，那么所有未标注解的参数将会被忽略，例如：</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/group/{groupId}"</span><span class="token punctuation">,</span> method<span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token keyword">void</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"groupId"</span><span class="token punctuation">)</span> Integer groupId<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"groupName"</span><span class="token punctuation">)</span> String groupName<span class="token punctuation">,</span>                               DataObject obj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>此时因为声明的是 GET 请求没有请求体，所以 obj 参数就会被忽略。<br /> 在 Spring Cloud 环境下，Feig n的 Encoder 只会用来编码没有添加注解的参数。如果你自定义了Encoder, 那么只有在编码 obj 参数时才会调用你的 Encoder。对于 Decoder， 默认会委托给 SpringMVC 中的<code>MappingJackson2HttpMessageConverter</code> 类进行解码。只有当状态码不在200 ~ 300之间时ErrorDecoder 才会被调用。ErrorDecoder 的作用是可以根据HTTP响应信息返回一个异常，该异常可以在调用 Feign 接口的地方被捕获到。我们目前就通过 ErrorDecoder 来使 Feign 接口抛出业务异常以供调用者处理。</p> <p>Feign 在默认情况下使用的是 JDK 原生的 URLConnection 发送 HTTP 请求，没有连接池，但是对每个地址会保持一个长连接，即利用 HTTP 的 persistence connection 。我们可以用 Apache 的 HTTP Client替换 Feign 原始的 http client，从而获取连接池、超时时间等与性能息息相关的控制能力。Spring Cloud从 Brixtion.SR5 版本开始支持这种替换，首先在项目中声明 Apache HTTP Client 和 feign-httpclient 依赖：</p> <pre><code class="prism language-xml"><span class="token comment">&lt;!-- 使用Apache HttpClient替换Feign原生httpclient --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.httpcomponents<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.netflix.feign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign-httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${feign-httpclient}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre> <p>然后在 application.properties 中添加 feign.httpclient.enabled=true</p> <h3><a id="applicationyml_87" rel="nofollow"></a>配置文件application.yml</h3> <pre><code class="prism language-yml"><span class="token comment">#feign</span><span class="token key atrule">feign</span><span class="token punctuation">:</span><span class="token key atrule">hystrix</span><span class="token punctuation">:</span><span class="token key atrule">enabled</span><span class="token punctuation">:</span><span class="token boolean important">true</span><span class="token key atrule">httpclient</span><span class="token punctuation">:</span><span class="token key atrule">enabled</span><span class="token punctuation">:</span><span class="token boolean important">true</span><span class="token key atrule">addr</span><span class="token punctuation">:</span><span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//10.164.13.166<span class="token punctuation">:</span>8080/msg<span class="token punctuation">-</span>center/v1/sms/send</code></pre> <h3><a id="Configuration_99" rel="nofollow"></a>配置类Configuration</h3> <p>使用了配置 @Configuration 参数，自己定义 Configuration 类来自定义 FeignClientsConfiguration，并且 Configuration 类的类路径不能在启动类 Application 的扫描路径下，否则会覆盖该项目所有的 Feign 接口的默认配置</p> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>feigin<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> feign<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>BasicAuthRequestInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">EurekaConfiguration</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 配置只允许使用Feign自己的注解url方式:@RequestLine</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> BasicAuthRequestInterceptor<span class="token function">basicAuthRequestInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">BasicAuthRequestInterceptor</span><span class="token punctuation">(</span><span class="token string">"zhihao.miao"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 配置eureka的登录名和密码</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> BasicAuthRequestInterceptor<span class="token function">basicAuthRequestInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">BasicAuthRequestInterceptor</span><span class="token punctuation">(</span><span class="token string">"zhihao.miao"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h3><a id="_122" rel="nofollow"></a>定义主体启动类</h3> <pre><code class="prism language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">OrderApplication</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OrderApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h3><a id="feignHystrix_133" rel="nofollow"></a>feign使用Hystrix</h3> <h5><a id="_134" rel="nofollow"></a>添加依赖</h5> <pre><code class="prism language-xml"><span class="token comment">&lt;!-- 整合hystrix，其实feign中自带了hystrix，引入该依赖主要是为了使用其中的hystrix-metrics-event-stream，用于dashboard --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre> <h5><a id="feignfallback_142" rel="nofollow"></a>feign接口注解中,增加fallback指定类</h5> <pre><code class="prism language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"${name}"</span><span class="token punctuation">,</span>  url<span class="token operator">=</span><span class="token string">"${addr.url}"</span><span class="token punctuation">,</span> fallback<span class="token operator">=</span> UserFallBack<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></code></pre> <h5><a id="_146" rel="nofollow"></a>指定类中处理熔断的后续逻辑</h5> <pre><code class="prism language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">PosMemberClientFallBack</span><span class="token keyword">implements</span><span class="token class-name">PosMemberClient</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String<span class="token function">addMember</span><span class="token punctuation">(</span>MemberDTO memberDTO<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"调用会员服务失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">(</span>"调用服务失败<span class="token punctuation">,</span>熔断”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h5><a id="_158" rel="nofollow"></a>配置文件</h5> <pre><code class="prism language-yml"><span class="token comment">#hystrix</span><span class="token key atrule">hystrix</span><span class="token punctuation">:</span><span class="token key atrule">command</span><span class="token punctuation">:</span><span class="token key atrule">default</span><span class="token punctuation">:</span><span class="token key atrule">execution</span><span class="token punctuation">:</span><span class="token key atrule">isolation</span><span class="token punctuation">:</span><span class="token key atrule">strategy</span><span class="token punctuation">:</span> THREAD<span class="token key atrule">thread</span><span class="token punctuation">:</span><span class="token key atrule">timeoutInMilliseconds</span><span class="token punctuation">:</span><span class="token number">30000</span><span class="token key atrule">threadpool</span><span class="token punctuation">:</span><span class="token key atrule">default</span><span class="token punctuation">:</span><span class="token key atrule">coreSize</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token comment">#缺省为10</span></code></pre> <h5><a id="_173" rel="nofollow"></a>修改启动类</h5> <p>在启动类上添加@EnableHystrix 注解</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@EnableHystrix</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">StartApplication</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>  SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>StartApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>配置的fallback class也必须在FeignClient Configuration中实例化，否则会报<br /> java.lang.IllegalStateException: No fallback instance of type class异常。</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">FooConfiguration</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Feign<span class="token punctuation">.</span>Builder<span class="token function">feignBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> Feign<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//实例化fallback</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> HystrixClientFallback<span class="token function">fb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">HystrixClientFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>在 Spring Cloud 中，Feign 和Ribbon 在整合了 Hystrix 后，可能会出现首次调用失败的问题，要如何解决该问题呢？<br /> Hystrix 默认的超时时间是1秒，如果超过这个时间尚未响应，将会进入 fallback 代码。<br /> 而首次请求往往会比较慢（因为 Spring 的懒加载机制，要实例化一些类），这个响应时间可能就大于1秒了。<br /> 解决方案 :<br /> 方法一<br /><code>hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 5000</code><br /> 该配置是让Hystrix的超时时间改为5秒<br /> 方法二<br /><code>hystrix.command.default.execution.timeout.enabled: false</code><br /> 该配置，用于禁用Hystrix的超时时间<br /> 方法三<br /><code>feign.hystrix.enabled: fals</code><br /> 该配置，用于索性禁用feign的hystrix。该做法除非一些特殊场景，不推荐使用。</p> <h3><a id="Feign_217" rel="nofollow"></a>Feign的扩展配置</h3> <pre><code class="prism language-yml"><span class="token comment">#Hystrix支持，如果为true，hystrix库必须在classpath中</span><span class="token key atrule">feign</span><span class="token punctuation">:</span><span class="token key atrule">hystrix</span><span class="token punctuation">:</span><span class="token key atrule">enabled</span><span class="token punctuation">:</span><span class="token boolean important">false</span><span class="token comment">#请求和响应GZIP压缩支持</span><span class="token key atrule">compression</span><span class="token punctuation">:</span><span class="token key atrule">request</span><span class="token punctuation">:</span><span class="token key atrule">enabled</span><span class="token punctuation">:</span><span class="token boolean important">true</span><span class="token key atrule">response</span><span class="token punctuation">:</span><span class="token key atrule">enabled</span><span class="token punctuation">:</span><span class="token boolean important">true</span><span class="token comment">#支持压缩的mime types</span><span class="token key atrule">compression</span><span class="token punctuation">:</span><span class="token key atrule">request</span><span class="token punctuation">:</span><span class="token key atrule">enabled</span><span class="token punctuation">:</span><span class="token boolean important">true</span><span class="token key atrule">mime-types</span><span class="token punctuation">:</span> text/xml<span class="token punctuation">,</span>application/xml<span class="token punctuation">,</span>application/json<span class="token key atrule">min-request-size</span><span class="token punctuation">:</span><span class="token number">2048</span><span class="token comment"># 日志支持</span><span class="token key atrule">logging</span><span class="token punctuation">:</span><span class="token key atrule">level</span><span class="token punctuation">:</span><span class="token key atrule">project</span><span class="token punctuation">:</span><span class="token key atrule">user</span><span class="token punctuation">:</span><span class="token key atrule">UserClient</span><span class="token punctuation">:</span> DEBUG</code></pre> </div> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2612.htm">深入理解nodejs的异步IO与事件模块机制</a></p>
                                                        <p>下一个：<a href="/html/category/article-2614.htm">在MySQL中，我们可以使用哪个函数从字符串列表中查找特定字符串的索引位置</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2779.htm" title="哪个标点符号可以用作MySQL时间部分之间的分隔符？">哪个标点符号可以用作MySQL时间部分之间的分隔符？</a></li>
                        <li class="py-2"><a href="/html/category/article-2816.htm" title="SpringBoot/Cloud项目-前台上传图片文件，Java转成Base64保存到数据库完整代码">SpringBoot/Cloud项目-前台上传图片文件，Java转成Base64保存到数据库完整代码</a></li>
                        <li class="py-2"><a href="/html/category/article-2788.htm" title="《C语言及程序设计》程序阅读——宏定义">《C语言及程序设计》程序阅读——宏定义</a></li>
                        <li class="py-2"><a href="/html/category/article-2802.htm" title="vue在进行增删改操作后刷新页面">vue在进行增删改操作后刷新页面</a></li>
                        <li class="py-2"><a href="/html/category/article-2775.htm" title="springboot整合Dubbo与Feign的实现 (无注册中心)_java">springboot整合Dubbo与Feign的实现 (无注册中心)_java</a></li>
                        <li class="py-2"><a href="/html/category/article-2793.htm" title="OutOfMemoryError异常_在线工具">OutOfMemoryError异常_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-2787.htm" title="Vue v-for更新监测/虚拟DOM/watch侦听器">Vue v-for更新监测/虚拟DOM/watch侦听器</a></li>
                        <li class="py-2"><a href="/html/category/article-2767.htm" title="Spring Boot 容器镜像分层构建">Spring Boot 容器镜像分层构建</a></li>
                        <li class="py-2"><a href="/html/category/article-2791.htm" title="FreeRTOS进阶之系统延时完全解析_操作系统_">FreeRTOS进阶之系统延时完全解析_操作系统_</a></li>
                        <li class="py-2"><a href="/html/category/article-2818.htm" title="Go 语言接口及使用接口实现链表插入">Go 语言接口及使用接口实现链表插入</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">48</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>