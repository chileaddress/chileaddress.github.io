<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2598.htm" />
    <title>Spring-Data-Redis 2.X以上版本使用心得和一些坑 - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>Spring-Data-Redis 2.X以上版本使用心得和一些坑</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p>  最近在修改之前旧项目的时候，将spring-data-redis的版本升级到了2.X以上，查看了官方的文档之后，发现新版本有一些新特性和新的使用方法，这里记录整理一下，并附上自己在使用的时候遇到的一点坑。<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.spring.io/spring-data/redis/docs/2.3.0.RELEASE/reference/html/#reference"  rel="nofollow">spring-data-redis最新版官方文档</a></p> <h3><a id="springredisxmlspringspringdataredis_2" rel="nofollow"></a>spring-redis.xml配置（spring整合spring-data-redis）</h3> <pre><code class="prism language-bash"><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>        xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>        xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-3.2.xsd         http://www.springframework.org/schema/context         http://www.springframework.org/schema/context/spring-context-3.2.xsd"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- Redis连接池的配置 --<span class="token operator">&gt;</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"jedisPoolConfig"</span> class<span class="token operator">=</span><span class="token string">"redis.clients.jedis.JedisPoolConfig"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 控制一个pool可以分配多少个jedis实例 --<span class="token operator">&gt;</span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maxTotal"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${redis.pool.maxActive}</span>"</span> /<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 连接池中最多可空闲链接个数，这里取值20，表示即使没有用数据库链接依然保持20个空闲链接 --<span class="token operator">&gt;</span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maxIdle"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${redis.pool.maxIdle}</span>"</span> /<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 最大等待时间，当没有可用连接时，连接池等待链接被归还的最大时间ms，超过时间就抛出异常 --<span class="token operator">&gt;</span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maxWaitMillis"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${redis.pool.maxWait}</span>"</span> /<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 在获取连接的时候检查链接的有效性 --<span class="token operator">&gt;</span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"testOnBorrow"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${redis.pool.testOnBorrow}</span>"</span> /<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/bean<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置redis连接密码 --<span class="token operator">&gt;</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"redisPassword"</span> class<span class="token operator">=</span><span class="token string">"org.springframework.data.redis.connection.RedisPassword"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>constructor-arg name<span class="token operator">=</span><span class="token string">"thePassword"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${redis.auth}</span>"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/constructor-arg<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/bean<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- redis单机配置，地址等在这配置 2.0以上的新特性 --<span class="token operator">&gt;</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"redisStandaloneConfiguration"</span> class<span class="token operator">=</span><span class="token string">"org.springframework.data.redis.connection.RedisStandaloneConfiguration"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"hostName"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${redis.hostname}</span>"</span>/<span class="token operator">&gt;</span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"port"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${redis.port}</span>"</span>/<span class="token operator">&gt;</span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> ref<span class="token operator">=</span><span class="token string">"redisPassword"</span>/<span class="token operator">&gt;</span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"database"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${redis.database}</span>"</span>/<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/bean<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>--配置jedis链接工厂 spring-data-redis2.0中        建议改为构造器传入一个RedisStandaloneConfiguration  单机                            RedisSentinelConfiguration  主从复制                            RedisClusterConfiguration  集群--<span class="token operator">&gt;</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"connectionFactory"</span> class<span class="token operator">=</span><span class="token string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>constructor-arg name<span class="token operator">=</span><span class="token string">"standaloneConfig"</span> ref<span class="token operator">=</span><span class="token string">"redisStandaloneConfiguration"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/constructor-arg<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/bean<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>--手动设置 key  与 value的序列化方式--<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 序列化器：能够把我们储存的key与value做序列化处理的对象，是一个类似于converter的工具。            可以实现传入的java对象-<span class="token operator">&gt;</span>redis可以识别的数据类型。 如：字符串。            默认的Serializer是StringRedisSerializer。            设定默认的序列化器是字符串序列化器，原因是redis可以存储的数据只有字符串和字节数组。            一般来说，我们代码中操作的数据对象都是java对象。            如果代码中，使用的数据载体就是字符串对象，那么使用Jackson2JsonRedisSerializer来做序列化器是否会有问题？            如果jackson插件的版本不合适，有错误隐患的话，可能将字符串数据转换为json字符串 -<span class="token operator">&gt;</span><span class="token punctuation">{<!-- --></span>chars:<span class="token punctuation">[</span><span class="token punctuation">]</span>, bytes:<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span>            使用StringRedisSerializer就没有这个问题。不处理字符串转换的。认为代码中操作的key和value都是字符串。         --<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置默认的序列化器 --<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- keySerializer、valueSerializer 配置Redis中的String类型key与value的序列化器 --<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- HashKeySerializer、HashValueSerializer 配置Redis中的Hash类型key与value的序列化器 --<span class="token operator">&gt;</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"keySerializer"</span> class<span class="token operator">=</span><span class="token string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/<span class="token operator">&gt;</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"valueSerializer"</span> class<span class="token operator">=</span><span class="token string">"org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"</span>/<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置jedis模板 --<span class="token operator">&gt;</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"redisTemplate"</span> class<span class="token operator">=</span><span class="token string">"org.springframework.data.redis.core.RedisTemplate"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"connectionFactory"</span> ref<span class="token operator">=</span><span class="token string">"connectionFactory"</span>/<span class="token operator">&gt;</span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"keySerializer"</span> ref<span class="token operator">=</span><span class="token string">"keySerializer"</span>/<span class="token operator">&gt;</span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"valueSerializer"</span> ref<span class="token operator">=</span><span class="token string">"valueSerializer"</span>/<span class="token operator">&gt;</span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"hashKeySerializer"</span> ref<span class="token operator">=</span><span class="token string">"keySerializer"</span>/<span class="token operator">&gt;</span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"hashValueSerializer"</span> ref<span class="token operator">=</span><span class="token string">"valueSerializer"</span>/<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/bean<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/beans<span class="token operator">&gt;</span></code></pre> <p>  这里首先有几点注意的地方：</p> <ol> <li>对redis.properties文件的扫描我放到了spring-dao.xml中载入，由于web.xml中加载了，数据是共享，这里属于SSM整合的知识了。<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221117/bb984ae60fcf22eb8143de2b39eeaf0b.jpg" alt="Spring-Data-Redis 2.X以上版本使用心得和一些坑"><img decoding="async" src="http://img.555519.xyz/uploads/20221117/be1df31571cdfc845e8cac0acfb143ae.jpg" alt="Spring-Data-Redis 2.X以上版本使用心得和一些坑"><br /><img decoding="async" src="http://img.555519.xyz/uploads/20221117/62e734a3fa37a26e357b2b58bcc5e8eb.jpg" alt="Spring-Data-Redis 2.X以上版本使用心得和一些坑"><br /> 2.在这里我只配置了一个RedisTemplate用来操作redis，而且序列化器也只使用了一种String类型的，因为在后续的业务中，将使用Jackson来对list，set和hash等格式的数据进行处理，先转换成json，再转换成String，取的时候将String利用jackson封装成List等即可。</li> </ol> <h3><a id="RedisUtil_78" rel="nofollow"></a>RedisUtil封装操作</h3> <p>  虽然RedisTemplate提供了很多操作的API，但毕竟只是API，这里将一些常用操作进行封装并加入logger日志记录，方便后面进行定位。</p> <pre><code class="prism language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ValueOperations<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment">/**  * 对SDR接口进行封装的工具类，来对redis进行操作  */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">RedisUtil</span><span class="token punctuation">{<!-- --></span><span class="token keyword">private</span> Logger logger<span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> RedisTemplate<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span><span class="token comment">/**      * 缓存value      *      * @param key      * @param value      * @param time      * @return      */</span><span class="token keyword">public</span><span class="token keyword">boolean</span><span class="token function">cacheValue</span><span class="token punctuation">(</span>String k<span class="token punctuation">,</span> String value<span class="token punctuation">,</span><span class="token keyword">long</span> time<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         String key<span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>             ValueOperations<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span> valueOperations<span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             valueOperations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>time<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 如果有设置超时时间的话</span>                 redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"缓存["</span><span class="token operator">+</span> key<span class="token operator">+</span><span class="token string">"]失败, value["</span><span class="token operator">+</span> value<span class="token operator">+</span><span class="token string">"] "</span><span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/**      * 缓存value，没有设置超时时间      *      * @param k      * @param value      * @return      */</span><span class="token keyword">public</span><span class="token keyword">boolean</span><span class="token function">cacheValue</span><span class="token punctuation">(</span>String k<span class="token punctuation">,</span> String value<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token function">cacheValue</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> value<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/**      * 判断缓存是否存在      *      * @param key      * @return      */</span><span class="token keyword">public</span><span class="token keyword">boolean</span><span class="token function">containsKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"判断缓存是否存在时失败key["</span><span class="token operator">+</span> key<span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">,</span><span class="token string">"err["</span><span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/**      * 根据key，获取缓存      *      * @param key      * @return      */</span><span class="token keyword">public</span> String<span class="token function">getValue</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>             ValueOperations<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span> valueOperations<span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> valueOperations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"获取缓存时失败key["</span><span class="token operator">+</span> key<span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">,</span><span class="token string">"err["</span><span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/**      * 移除缓存      *      * @param key      * @return      */</span><span class="token keyword">public</span><span class="token keyword">boolean</span><span class="token function">removeValue</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>             redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"移除缓存时失败key["</span><span class="token operator">+</span> key<span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">,</span><span class="token string">"err["</span><span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/**      * 根据前缀移除所有以传入前缀开头的key-value      *      * @param pattern      * @return      */</span><span class="token keyword">public</span><span class="token keyword">boolean</span><span class="token function">removeKeys</span><span class="token punctuation">(</span>String pattern<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>             Set<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">&gt;</span></span> keySet<span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>pattern<span class="token operator">+</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>keySet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"移除key["</span><span class="token operator">+</span> pattern<span class="token operator">+</span><span class="token string">"]前缀的缓存时失败"</span><span class="token punctuation">,</span><span class="token string">"err["</span><span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h3><a id="_207" rel="nofollow"></a>使用演示</h3> <pre><code class="prism language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> List<span class="token generics function"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span><span class="token function">getAreaLsit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         String key<span class="token operator">=</span> AREALISTKEY<span class="token punctuation">;</span>         List<span class="token generics function"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span> areaList<span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment">// 将list转换成string，利用jackson</span>         ObjectMapper objectMapper<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>redisUtil<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 如果不存在这个缓存,就从数据库取</span>             areaList<span class="token operator">=</span> areaDao<span class="token punctuation">.</span><span class="token function">queryArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 转换成string缓存</span>             String jsonValue<span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>                 jsonValue<span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>areaList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Json转换失败"</span><span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 由于开启了事务，这里需要抛异常来触发回滚</span><span class="token keyword">throw</span><span class="token keyword">new</span><span class="token class-name">AreaOperationException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 没有问题就缓存</span>             redisUtil<span class="token punctuation">.</span><span class="token function">cacheValue</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> jsonValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 如果缓存中存在</span>             String jsonValue<span class="token operator">=</span> redisUtil<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定义要将json转换成的类型</span>             JavaType javaType<span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">getTypeFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">constructParametricType</span><span class="token punctuation">(</span>ArrayList<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Area<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>                 areaList<span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>jsonValue<span class="token punctuation">,</span> javaType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Json转换失败"</span><span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 由于开启了事务，这里需要抛异常来触发回滚</span><span class="token keyword">throw</span><span class="token keyword">new</span><span class="token class-name">AreaOperationException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> areaList<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <h3><a id="_251" rel="nofollow"></a>遇到的问题</h3> <p>1.首先遇到了一个版本不兼容的问题，一开始我用的版本如下<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221117/ccf0c379e87a17fde42fe4d3ba1a31b8.jpg" alt="Spring-Data-Redis 2.X以上版本使用心得和一些坑"><br />   但是这两个版本会报一个找不到类的异常</p> <pre><code class="prism language-java">NoClassDefFoundError<span class="token operator">:</span> redis<span class="token operator">/</span>clients<span class="token operator">/</span>jedis<span class="token operator">/</span>util<span class="token operator">/</span>Pool</code></pre> <p>但是jar包中其实是有这个类的，查询了之后认为是版本不兼容的问题，这里我选择将Spring-Data-Redis降级，改成2.1.9之后就可以正常工作了。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221117/7b768e694166d38c6fb91cac0a72d1be.jpg" alt="Spring-Data-Redis 2.X以上版本使用心得和一些坑"></p> </div> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2597.htm">SpringBoot中获取profile的方法详解_java</a></p>
                                                        <p>下一个：<a href="/html/category/article-2599.htm">SpringBoot + SpringSecurity + Mybatis-Plus + JWT实现分布式系统认证和授权</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2818.htm" title="Go 语言接口及使用接口实现链表插入">Go 语言接口及使用接口实现链表插入</a></li>
                        <li class="py-2"><a href="/html/category/article-2779.htm" title="哪个标点符号可以用作MySQL时间部分之间的分隔符？">哪个标点符号可以用作MySQL时间部分之间的分隔符？</a></li>
                        <li class="py-2"><a href="/html/category/article-2794.htm" title="深入浅出谈谈Java并发编程：Volatile">深入浅出谈谈Java并发编程：Volatile</a></li>
                        <li class="py-2"><a href="/html/category/article-2769.htm" title="数据库事务的四大特性和隔离级别">数据库事务的四大特性和隔离级别</a></li>
                        <li class="py-2"><a href="/html/category/article-2792.htm" title="toString() 和 new String()用法区别">toString() 和 new String()用法区别</a></li>
                        <li class="py-2"><a href="/html/category/article-2797.htm" title="Centos7 离线安装 KVM，并安装 Csr1000v">Centos7 离线安装 KVM，并安装 Csr1000v</a></li>
                        <li class="py-2"><a href="/html/category/article-2790.htm" title="JS 删除数组中某个元素的几种方式">JS 删除数组中某个元素的几种方式</a></li>
                        <li class="py-2"><a href="/html/category/article-2809.htm" title="C++11（一）">C++11（一）</a></li>
                        <li class="py-2"><a href="/html/category/article-2783.htm" title="JVM将初始和最大内存大小设置为相同值的好处">JVM将初始和最大内存大小设置为相同值的好处</a></li>
                        <li class="py-2"><a href="/html/category/article-2770.htm" title="JavaCPP快速入门(官方demo增强版)">JavaCPP快速入门(官方demo增强版)</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">48</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>