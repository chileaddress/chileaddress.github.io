<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2628.htm" />
    <title>Python语法学习之进程间的通信方式_python_ - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>Python语法学习之进程间的通信方式_python_</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li>什么是进程的通信</li> <ul class="second_class_ul"> <li>队列的创建 - multiprocessing</li> <li>进程之间通信的方法</li> </ul> <li>进程间的通信 - 队列演示案例</li> <ul class="second_class_ul"> <li>批量给 send 函数加入数据</li> </ul> <li>小节</li> <ul class="second_class_ul"> <li>进程间通信的其他方式 - 补充</li> </ul> </ul> </div> <p class="maodian"></p> <h2>什么是进程的通信</h2> <p>这里举一个例子接介绍通信的机制：通信 一词大家并不陌生，比如一个人要给他的女友打电话。当建立了通话之后，在这个通话的过程中就是建立了一条隐形的 队列 (记住这个词)。此时这个人就会通过对话的方式不停的将信息告诉女友，而这个人的女友也是在倾听着。（嗯…我个人觉得大部分情况下可能是反着来的）。</p> <p>这里可以将他们两个人比作是两个进程，"这个人"的进程需要将信息发送给"女友"的进程，就需要一个队列的帮助。而女友需要不停的接收队列的信息，可以做一些其他的事情，所以两个进程之间的通信主要依赖于队列。</p> <p>这个队列可以支持发送消息与接收消息，“这个人"负责发送消息，反之"女友” 负责的是接收消息。</p> <p>既然队列才是重点，那么来看一下队列要如何创建。</p> <p class="maodian"></p> <h3>队列的创建 - multiprocessing</h3> <p>依然使用 multiprocessing 模块，调用该模块的 Queue 函数来实现队列的创建。</p> <table> <tbody> <tr> <th>函数名</th> <th>介绍</th> <th>参数</th> <th>返回值</th> </tr> <tr> <td>Queue</td> <td>队列的创建</td> <td>mac_count</td> <td>队列对象</td> </tr> </tbody> </table> <p>Queue 函数功能介绍：调用 Queue 可以创建队列；它有一个参数 mac_count 代表队列最大可以创建多少信息，如果不传默认是无限长度。实例化一个队列对象之后，需要操作这个队列的对象进行放入与取出数据。</p> <p class="maodian"></p> <h3>进程之间通信的方法</h3> <table> <tbody> <tr> <th>函数名</th> <th>介绍</th> <th>参数</th> <th>返回值</th> </tr> <tr> <td>put</td> <td>将消息放入队列</td> <td>message</td> <td>无</td> </tr> <tr> <td>get</td> <td>获取队列消息</td> <td>无</td> <td>str</td> </tr> </tbody> </table> <p>put 函数功能介绍：将数据传入。它有一个参数 message ，是一个字符串类型。</p> <p>get 函数功能介绍：用来接收队列中的数据。（其实这里就是一个常用的json场景，有很多的数据传输都是 字符串 的，队列的插入与获取就是使用的字符串，所以 json 就非常适用这个场景。）</p> <p>接下来就来练习一下 队列的使用 。</p> <p class="maodian"></p> <h2>进程间的通信 - 队列演示案例</h2> <p>代码示例如下：</p> <div class="ay1code"> <pre class="brush:py;"># coding:utf-8      import json  import multiprocessing      class Work(object):     # 定义一个 Work 类      def __init__(self, queue):      # 构造函数传入一个 '队列对象' --> queue              self.queue = queue        def send(self, message):        # 定义一个 send(发送) 函数，传入 message                                      # [这里有个隐藏的bug，就是只判断了传入的是否字符串类型；如果传入的是函数、类、集合等依然会报错]          if not isinstance(message, str):    # 判断传入的 message 是否为字符串，若不是，则进行 json 序列化              message = json.dumps(message)          self.queue.put(message)     # 利用 queue 的队列实例化对象将 message 发送出去        def receive(self):      # 定义一个 receive(接收) 函数，不需传入参数，但是因为接收是一个源源不断的过程，所以需要使用 while 循环          while 1:              result = self.queue.get()   # 获取 '队列对象' --> queue 传入的message                                          # 由于我们接收的 message 可能不是一个字符串，所以要进程异常的捕获              try:                        # 如果传入的 message 符合 JSON 格式将赋值给 res ；若不符合，则直接使用 result 赋值 res                  res = json.loads(result)              except:                  res = result              print('接收到的信息为：{}'.format(res))      if __name__ == '__main__':      queue = multiprocessing.Queue()      work = Work(queue)      send = multiprocessing.Process(target=work.send, args=({'message': '这是一条测试的消息'},))      receive = multiprocessing.Process(target=work.receive)        send.start()      receive.start()  </pre> </div> <p>使用队列建立进程间通信遇到的异常</p> <p>但是这里会出现一个 报错，如下图：</p> <p>报错截图示例如下：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220412/2b1c726e48153dcf8ac26ab618c54609.jpg"></p> <p>这里的报错提示是 文件没有被发现的意思 。其实这里是我们使用 队列做 put() 和 get()的时候 有一把无形的锁加了上去，就是上图中圈中的 .SemLock 。我们不需要去关心造成这个错误的具体原因，要解决这个问题其实也很简单。</p> <p>FileNotFoundError: [Errno 2] No such file or directory 异常的解决</p> <p>我们只需要给 send 或者 receive 其中一个子进程添加 join 阻塞进程即可，理论上如此。但是我们的 receive子进程是一个 while循环，它会一直执行，所以只需要给 send 子进程加上一个 join 即可。</p> <p>解决示意图如下：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220412/1fac2b50e2238603b4a851c2e555b67e.jpg"></p> <p>PS：虽然解决了报错问题，但是程序没有正常退出。</p> <p>实际上由于我们的 receive 进程是个 while循环，并不知道要处理到什么时候，没有办法立刻终止。所以我们需要在 receive 进程 使用 terminate() 函数终结接收端。</p> <p>运行结果如下：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220412/10a63110010baadd3f865afb16d6c0a9.jpg"></p> <p class="maodian"></p> <h3>批量给 send 函数加入数据</h3> <p>新建一个函数，写入 for循环 模拟批量添加要发送的消息</p> <p>然后再给这个模拟批量发送数据的函数添加一个线程。</p> <p>示例代码如下：</p> <div class="ay1code"> <pre class="brush:py;"># coding:utf-8      import json  import time  import multiprocessing      class Work(object):     # 定义一个 Work 类      def __init__(self, queue):      # 构造函数传入一个 '队列对象' --> queue              self.queue = queue        def send(self, message):        # 定义一个 send(发送) 函数，传入 message                                      # [这里有个隐藏的bug，就是只判断了传入的是否字符串类型；如果传入的是函数、类、集合等依然会报错]          if not isinstance(message, str):    # 判断传入的 message 是否为字符串，若不是，则进行 json 序列化              message = json.dumps(message)          self.queue.put(message)     # 利用 queue 的队列实例化对象将 message 发送出去          def send_all(self):             # 定义一个 send_all(发送)函数，然后通过for循环模拟批量发送的 message          for i in range(20):              self.queue.put('第 {} 次循环，发送的消息为：{}'.format(i, i))              time.sleep(1)            def receive(self):      # 定义一个 receive(接收) 函数，不需传入参数，但是因为接收是一个源源不断的过程，所以需要使用 while 循环          while 1:              result = self.queue.get()   # 获取 '队列对象' --> queue 传入的message                                          # 由于我们接收的 message 可能不是一个字符串，所以要进程异常的捕获              try:                        # 如果传入的 message 符合 JSON 格式将赋值给 res ；若不符合，则直接使用 result 赋值 res                  res = json.loads(result)              except:                  res = result              print('接收到的信息为：{}'.format(res))      if __name__ == '__main__':      queue = multiprocessing.Queue()      work = Work(queue)      send = multiprocessing.Process(target=work.send, args=({'message': '这是一条测试的消息'},))      receive = multiprocessing.Process(target=work.receive)      send_all = multiprocessing.Process(target=work.send_all,)          send_all.start()    # 这里因为 send 只执行了1次，然后就结束了。而 send_all 却要循环20次，它的执行时间是最长的，信息也是发送的最多的      send.start()      receive.start()        # send.join()       # 使用 send 的阻塞会造成 send_all 循环还未结束 ，receive.terminate() 函数接收端就会终结。      send_all.join()     # 所以我们只需要阻塞最长使用率的进程就可以了      receive.terminate()  </pre> </div> <p>运行结果如下：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220412/3fee3240a1e38a78419d94184a3b7f72.jpg"></p> <p>从上图中我们可以看到 send 与 send_all 两个进程都可以通过 queue这个实例化的 Queue 对象发送消息，同样的 receive接收函数也会将两个进程传入的 message 打印输出出来。</p> <p class="maodian"></p> <h2>小节</h2> <p>该章节我们通过队列的方式实现了进程间通信的方法，并且了解了队列的使用方法。一个队列中，有一端(这里我们演示的是 send端)通过 put方法实现添加相关的信息，另一端使用 get 方法获取相关的信息；两个进程相互配合达到一个进程通信的效果。</p> <p>其实进程之间的通信不仅仅只有队列这一种方式，感兴趣的话还可以通过 管道、信号量、共享内存的方式来实现。可以自行拓展一下。</p> <p class="maodian"></p> <h3>进程间通信的其他方式 - 补充</h3> <p>python提供了多种进程通信的方式，包括信号，管道，消息队列，信号量，共享内存，socket等</p> <p>主要Queue和Pipe这两种方式，Queue用于多个进程间实现通信，Pipe是两个进程的通信。</p> <p>1.管道：分为匿名管道和命名管道</p> <p>匿名管道：在内核中申请一块固定大小的缓冲区，程序拥有写入和读取的权利，一般使用fock函数实现父子进程的通信</p> <p>命名管道：在内存中申请一块固定大小的缓冲区，程序拥有写入和读取的权利，没有血缘关系的进程也可以进程间通信</p> <p>特点：面向字节流；生命周期随内核；自带同步互斥机制；半双工，单向通信，两个管道实现双向通信</p> <p>2.消息队列：在内核中创建一个队列，队列中每个元素是一个数据报，不同的进程可以通过句柄去访问这个队列。消息队列提供了一个从一个进程向另外一个进程发送一块数据的方法。每个数据块都被认为是有一个类型，接收者进程接收的数据块可以有不同的类型。消息队列也有管道一样的不足，就是每个消息的最大长度是有上限的，每个消息队列的总的字节数是有上限的，系统上消息队列的总数也有一个上限</p> <p>特点：消息队列可以被认为是一个全局的一个链表，链表节点中存放着数据报的类型和内容，有消息队列的标识符进行标记；消息队列允许一个或多个进程写入或读取消息；消息队列的生命周期随内核；消息队列可实现双向通信</p> <p>3.信号量：在内核中创建一个信号量集合（本质上是数组），数组的元素（信号量）都是1，使用P操作进行-1，使用V操作+1</p> <p>P(sv)：如果sv的值大于零，就给它减1；如果它的值为零，就挂起该程序的执行</p> <p>V(sv)：如果有其他进程因等待sv而被挂起，就让它恢复运行，如果没有进程因等待sv而挂起，就给它加1</p> <p>PV操作用于同一个进程，实现互斥；PV操作用于不同进程，实现同步</p> <p>功能：对临界资源进行保护</p> <p>4.共享内存：将同一块物理内存一块映射到不同的进程的虚拟地址空间中，实现不同进程间对同一资源的共享。共享内存可以说是最有用的进程间通信方式，也是最快的IPC形式</p> <p>特点：不同从用户态到内核态的频繁切换和拷贝数据，直接从内存中读取就可以；共享内存是临界资源，所以需要操作时必须要保证原子性。使用信号量或者互斥锁都可以.</p> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2627.htm">Spring cloud链路跟踪服务集成zipkin+mysql+sleuth+rabbitMq</a></p>
                                                        <p>下一个：<a href="/html/category/article-2629.htm">HashMap集合</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-8013.htm" title="动物疫病预防中心是干什么的（动物疾病防疫中心）">动物疫病预防中心是干什么的（动物疾病防疫中心）</a></li>
                        <li class="py-2"><a href="/html/category/article-7874.htm" title="免费领养宠物犬是真的吗还是假的（免费领养狗是真的吗）">免费领养宠物犬是真的吗还是假的（免费领养狗是真的吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7875.htm" title="南京寄养狗狗价格表（南京寄养狗狗价格表大全）">南京寄养狗狗价格表（南京寄养狗狗价格表大全）</a></li>
                        <li class="py-2"><a href="/html/category/article-8105.htm" title="周冬雨说马思纯（满满干货）周冬雨马思纯访谈，叶玉清，马思纯个人资料，">周冬雨说马思纯（满满干货）周冬雨马思纯访谈，叶玉清，马思纯个人资料，</a></li>
                        <li class="py-2"><a href="/html/category/article-7690.htm" title="机油比较好的牌子(机油比较好的品牌有哪些品牌标志)">机油比较好的牌子(机油比较好的品牌有哪些品牌标志)</a></li>
                        <li class="py-2"><a href="/html/category/article-7920.htm" title="动物防疫站***需要什么手续才能打（动物防疫站打疫苗）">动物防疫站***需要什么手续才能打（动物防疫站打疫苗）</a></li>
                        <li class="py-2"><a href="/html/category/article-8335.htm" title="生物颗粒多少钱一吨呢四千六百大卡（1吨的生物颗粒多少钱）">生物颗粒多少钱一吨呢四千六百大卡（1吨的生物颗粒多少钱）</a></li>
                        <li class="py-2"><a href="/html/category/article-7461.htm" title="开动物医院需要什么手续和条件（开设动物医院的条件有哪些?）">开动物医院需要什么手续和条件（开设动物医院的条件有哪些?）</a></li>
                        <li class="py-2"><a href="/html/category/article-8334.htm" title="宠物食品店需要什么手续（宠物店需要食品经营许可证吗）">宠物食品店需要什么手续（宠物店需要食品经营许可证吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7231.htm" title="海贼王修佐（海贼王修佐vs鼹鼠）">海贼王修佐（海贼王修佐vs鼹鼠）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>