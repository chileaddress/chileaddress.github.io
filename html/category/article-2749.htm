<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2749.htm" />
    <title>NET Core 操作达梦数据库DM8的两种方式 - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>NET Core 操作达梦数据库DM8的两种方式</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<h1 id="背景">背景</h1> <p>某个项目需要实现基础软件全部国产化，其中操作系统指定银河麒麟，数据库使用达梦V8，CPU平台的范围包括x64、龙芯、飞腾、鲲鹏等。考虑到这些基础产品对.NET的支持，最终选择了.NET Core 3.1。</p> <h1 id="环境">环境</h1> <ul> <li>CPU平台：x86-64 / Arm64</li> <li>操作系统：银河麒麟 v4</li> <li>数据库：DM8</li> <li>.NET：.NET Core 3.1</li> </ul> <h1 id="sdk">SDK</h1> <p>达梦自己提供了.NET操作其数据库的SDK，可以通过NuGet安装，也可以通过安装达梦数据库获取。因为NuGet上的版本不知道是谁提供的，所以这里以安装数据库获取相关SDK为例。</p> <p>在官网下载DM8的数据库安装文件：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.dameng.com/list_103.html"  target="_blank" rel="nofollow">https://www.dameng.com/list_103.html</a></p> <p>下载前需要先登录，随便注册一个帐号就好了。</p> <p>这里需要选择CPU和操作系统，按照你的开发环境选择即可，下载后按照提示安装。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/ac35bdb0cbc858e8b6bfe32cfee65c7c.jpg" alt="NET Core 操作达梦数据库DM8的两种方式"></p> <p>这里以Windows10为例，安装后SDK文件的位置在：C:\dmdbms\drivers\dotNet</p> <p>这里边有EF的SDK，也有NHibernate的SDK，不过这篇文章只使用最基础的基于ADO.NET的SDK。</p> <p>这些SDK在文件夹DmProvider下边，这里还提供了一个Nuget包，可以放到自己的Nuget仓库中，方便内部安装。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6fa57cc3bf77a64c8e63d4502f19acc0.jpg" alt="NET Core 操作达梦数据库DM8的两种方式"></p> <p>可以看到，这个SDK可以支持.NET Core2.0以上的所有.NET版本。</p> <h1 id="操作数据库">操作数据库</h1> <p>这里提供两种方式：传统的DbHelperSQL方式 和 Dapper 方式。</p> <h2 id="dbhelpersql方式">DbHelperSQL方式</h2> <p>这种方式早年用的比较多，现在还有很多项目在使用，通过定义一组工具方法包装对数据库的各种增删改查操作。下面给出代码：</p> <pre><code class="language-cs">    public class DmDbClient     {         private string connectionString = string.Empty;          /// &lt;summary&gt;         /// 初始化DMClient的一个新实例         /// &lt;/summary&gt;         /// &lt;param name="str"&gt;&lt;/param&gt;         public DmDbClient(string str)         {             connectionString = str;         }          #region 通用快捷方法         /// &lt;summary&gt;         /// 执行一条SQL语句，确定记录是否存在         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL查询语句&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public bool Exists(string sql)         {             object obj = GetSingle(sql);              int cmdresult;             if (Equals(obj, null) || Equals(obj, DBNull.Value))             {                 cmdresult = 0;             }             else             {                 cmdresult = int.Parse(obj.ToString());             }              return cmdresult &gt; 0;         }          /// &lt;summary&gt;         /// 执行一条SQL语句，确定记录是否存在         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL查询语句&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public async Task&lt;bool&gt; ExistsAsync(string sql)         {             object obj = await GetSingleAsync(sql);              int cmdresult;             if (Equals(obj, null) || Equals(obj, DBNull.Value))             {                 cmdresult = 0;             }             else             {                 cmdresult = int.Parse(obj.ToString());             }              return cmdresult &gt; 0;         }          /// &lt;summary&gt;         /// 执行一条SQL语句，确定记录是否存在         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL查询语句&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public bool Exists(string sql, params DmParameter[] paras)         {             object obj = GetSingle(sql, paras);              int cmdresult;             if ((object.Equals(obj, null)) || (object.Equals(obj, DBNull.Value)))             {                 cmdresult = 0;             }             else             {                 cmdresult = int.Parse(obj.ToString());             }              return cmdresult &gt; 0;         }          /// &lt;summary&gt;         /// 执行一条SQL语句，确定记录是否存在         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL查询语句&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public async Task&lt;bool&gt; ExistsAsync(string sql, params DmParameter[] paras)         {             object obj = await GetSingleAsync(sql, paras);              int cmdresult;             if ((object.Equals(obj, null)) || (object.Equals(obj, DBNull.Value)))             {                 cmdresult = 0;             }             else             {                 cmdresult = int.Parse(obj.ToString());             }              return cmdresult &gt; 0;         }          /// &lt;summary&gt;         /// 获取记录条数         /// &lt;/summary&gt;         /// &lt;param name="tableName"&gt;表名&lt;/param&gt;         /// &lt;param name="sqlCondition"&gt;查询条件&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public int GetCount(string tableName, string sqlCondition)         {             string sql = "select count(1) from `" + tableName + "`";              if (!string.IsNullOrWhiteSpace(sqlCondition))             {                 sql += " where " + sqlCondition;             }              object result = GetSingle(sql);              if (result != null)             {                 return Convert.ToInt32(result);             }             else             {                 return 0;             }         }          /// &lt;summary&gt;         /// 获取记录条数         /// &lt;/summary&gt;         /// &lt;param name="tableName"&gt;表名&lt;/param&gt;         /// &lt;param name="sqlCondition"&gt;查询条件&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public async Task&lt;int&gt; GetCountAsync(string tableName, string sqlCondition)         {             string sql = "select count(1) from `" + tableName + "`";              if (!string.IsNullOrWhiteSpace(sqlCondition))             {                 sql += " where " + sqlCondition;             }              object result = await GetSingleAsync(sql);              if (result != null)             {                 return Convert.ToInt32(result);             }             else             {                 return 0;             }         }          /// &lt;summary&gt;         /// 获取记录条数         /// &lt;/summary&gt;         /// &lt;param name="tableName"&gt;表名&lt;/param&gt;         /// &lt;param name="sqlCondition"&gt;查询条件&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public int GetCount(string tableName, string sqlCondition, DmParameter[] paras)         {             string sql = "select count(1) from `" + tableName + "`";              if (!string.IsNullOrWhiteSpace(sqlCondition))             {                 sql += " where " + sqlCondition;             }              object result = GetSingle(sql, paras);              if (result != null)             {                 return Convert.ToInt32(result);             }             else             {                 return 0;             }         }          /// &lt;summary&gt;         /// 获取记录条数         /// &lt;/summary&gt;         /// &lt;param name="tableName"&gt;表名&lt;/param&gt;         /// &lt;param name="sqlCondition"&gt;查询条件&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public async Task&lt;int&gt; GetCountAsync(string tableName, string sqlCondition, DmParameter[] paras)         {             string sql = "select count(1) from `" + tableName + "`";              if (!string.IsNullOrWhiteSpace(sqlCondition))             {                 sql += " where " + sqlCondition;             }              object result = await GetSingleAsync(sql, paras);              if (result != null)             {                 return Convert.ToInt32(result);             }             else             {                 return 0;             }         }          #endregion 通用快捷方法          #region 执行简单SQL语句          /// &lt;summary&gt;         /// 执行SQL语句，返回影响的记录数         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;returns&gt;影响的记录数&lt;/returns&gt;         public int ExecuteSql(string sql)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand(sql, connection))                 {                     connection.Open();                     int rows = cmd.ExecuteNonQuery();                     return rows;                 }             }         }          /// &lt;summary&gt;         /// 执行SQL语句，返回影响的记录数         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;returns&gt;影响的记录数&lt;/returns&gt;         public async Task&lt;int&gt; ExecuteSqlAsync(string sql)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand(sql, connection))                 {                     await connection.OpenAsync();                     int rows = await cmd.ExecuteNonQueryAsync();                     return rows;                 }             }         }          /// &lt;summary&gt;         /// 执行SQL语句，返回影响的记录数（可自定义超时时间）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="timeout"&gt;执行超时时间&lt;/param&gt;         /// &lt;returns&gt;影响的记录数&lt;/returns&gt;         public int ExecuteSqlByTime(string sql, int timeout)         {             using (DmConnection connection = new DmConnection(this.connectionString))             {                 using (DmCommand cmd = new DmCommand(sql, connection))                 {                     connection.Open();                     cmd.CommandTimeout = timeout;                     int rows = cmd.ExecuteNonQuery();                     return rows;                 }             }         }          /// &lt;summary&gt;         /// 执行SQL语句，返回影响的记录数（可自定义超时时间）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="timeout"&gt;执行超时时间&lt;/param&gt;         /// &lt;returns&gt;影响的记录数&lt;/returns&gt;         public async Task&lt;int&gt; ExecuteSqlByTimeAsync(string sql, int timeout)         {             using (DmConnection connection = new DmConnection(this.connectionString))             {                 using (DmCommand cmd = new DmCommand(sql, connection))                 {                     await connection.OpenAsync();                     cmd.CommandTimeout = timeout;                     int rows = await cmd.ExecuteNonQueryAsync();                     return rows;                 }             }         }          /// &lt;summary&gt;         /// 执行多条SQL语句，实现数据库事务。         /// &lt;/summary&gt;         /// &lt;param name="sqlList"&gt;多条SQL语句&lt;/param&gt;         public void ExecuteSqlTrans(ArrayList sqlList)         {             using (DmConnection conn = new DmConnection(connectionString))             {                 conn.Open();                 using (DbTransaction trans = conn.BeginTransaction())                 {                     using (DmCommand cmd = new DmCommand())                     {                         cmd.Connection = conn;                         cmd.Transaction = trans;                          try                         {                             for (int n = 0; n &lt; sqlList.Count; n++)                             {                                 string sql = sqlList[n].ToString();                                  if (sql.Trim().Length &gt; 1)                                 {                                     cmd.CommandText = sql;                                     cmd.ExecuteNonQuery();                                 }                             }                              trans.Commit();                         }                         catch (DmException ex)                         {                             trans.Rollback();                             throw ex;                         }                     }                 }             }         }          /// &lt;summary&gt;         /// 执行多条SQL语句，实现数据库事务。         /// &lt;/summary&gt;         /// &lt;param name="sqlList"&gt;多条SQL语句&lt;/param&gt;         public async Task ExecuteSqlTransAsync(ArrayList sqlList)         {             using (DmConnection conn = new DmConnection(connectionString))             {                 await conn.OpenAsync();                 using (DbTransaction trans = await conn.BeginTransactionAsync())                 {                     using (DmCommand cmd = new DmCommand())                     {                         cmd.Connection = conn;                         cmd.Transaction = trans;                          try                         {                             for (int n = 0; n &lt; sqlList.Count; n++)                             {                                 string sql = sqlList[n].ToString();                                  if (sql.Trim().Length &gt; 1)                                 {                                     cmd.CommandText = sql;                                     await cmd.ExecuteNonQueryAsync();                                 }                             }                              trans.Commit();                         }                         catch (DmException ex)                         {                             trans.Rollback();                             throw ex;                         }                     }                 }             }         }          /// &lt;summary&gt;         /// 执行一条SQL查询语句，返回查询结果。         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL查询语句&lt;/param&gt;         /// &lt;returns&gt;查询结果&lt;/returns&gt;         public object GetSingle(string sql)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand(sql, connection))                 {                     connection.Open();                      object obj = cmd.ExecuteScalar();                      if ((object.Equals(obj, null)) || (object.Equals(obj, DBNull.Value)))                     {                         return null;                     }                     else                     {                         return obj;                     }                 }             }         }          /// &lt;summary&gt;         /// 执行一条SQL查询语句，返回查询结果。         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL查询语句&lt;/param&gt;         /// &lt;returns&gt;查询结果&lt;/returns&gt;         public async Task&lt;object&gt; GetSingleAsync(string sql)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand(sql, connection))                 {                     await connection.OpenAsync();                      object obj = await cmd.ExecuteScalarAsync();                      if ((object.Equals(obj, null)) || (object.Equals(obj, DBNull.Value)))                     {                         return null;                     }                     else                     {                         return obj;                     }                 }             }         }          /// &lt;summary&gt;         /// 执行查询语句，返回DbDataReader（切记要手工关闭DbDataReader）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;查询语句&lt;/param&gt;         /// &lt;returns&gt;DmDataReader&lt;/returns&gt;         public DbDataReader ExecuteReader(string sql)         {             DmConnection connection = new DmConnection(connectionString);             DmCommand cmd = new DmCommand(sql, connection);              connection.Open();             return cmd.ExecuteReader();         }          /// &lt;summary&gt;         /// 执行查询语句，返回DbDataReader（切记要手工关闭DbDataReader）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;查询语句&lt;/param&gt;         /// &lt;returns&gt;DmDataReader&lt;/returns&gt;         public async Task&lt;DbDataReader&gt; ExecuteReaderAsync(string sql)         {             DmConnection connection = new DmConnection(connectionString);             DmCommand cmd = new DmCommand(sql, connection);              await connection.OpenAsync();             return await cmd.ExecuteReaderAsync();         }          /// &lt;summary&gt;         /// 执行查询语句，返回DataSet         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;查询语句&lt;/param&gt;         /// &lt;returns&gt;DataSet&lt;/returns&gt;         public DataSet Query(string sql)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmDataAdapter command = new DmDataAdapter(sql, connection))                 {                     DataSet ds = new DataSet();                      connection.Open();                     command.Fill(ds, "ds");                      return ds;                 }             }         }          /// &lt;summary&gt;         /// 执行查询语句，返回DataSet（可自定义超时时间）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;&lt;/param&gt;         /// &lt;param name="timeout"&gt;&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public DataSet Query(string sql, int timeout)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmDataAdapter command = new DmDataAdapter(sql, connection))                 {                     DataSet ds = new DataSet();                      connection.Open();                     command.SelectCommand.CommandTimeout = timeout;                     command.Fill(ds, "ds");                      return ds;                 }             }         }         #endregion 执行简单SQL语句          #region 执行带参数的SQL语句          /// &lt;summary&gt;         /// 执行SQL语句，返回影响的记录数         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         /// &lt;returns&gt;影响的记录数&lt;/returns&gt;         public int ExecuteSql(string sql, params DmParameter[] paras)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     PrepareCommand(cmd, connection, null, sql, paras);                     int rows = cmd.ExecuteNonQuery();                     cmd.Parameters.Clear();                     return rows;                 }             }         }          /// &lt;summary&gt;         /// 执行SQL语句，返回影响的记录数         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         /// &lt;returns&gt;影响的记录数&lt;/returns&gt;         public async Task&lt;int&gt; ExecuteSqlAsync(string sql, params DmParameter[] paras)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     await PrepareCommandAsync(cmd, connection, null, sql, paras);                     int rows = await cmd.ExecuteNonQueryAsync();                     cmd.Parameters.Clear();                     return rows;                 }             }         }          /// &lt;summary&gt;         /// 执行添加SQL语句，返回记录的ID（自动产生的自增主键）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="parms"&gt;SQL参数&lt;/param&gt;         /// &lt;returns&gt;记录的ID&lt;/returns&gt;         public int ExecuteAdd(string sql, params DmParameter[] parms)         {             sql = sql + ";Select @@IDENTITY";              using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     PrepareCommand(cmd, connection, null, sql, parms);                     int recordID = Int32.Parse(cmd.ExecuteScalar().ToString());                     cmd.Parameters.Clear();                      return recordID;                 }             }         }          /// &lt;summary&gt;         /// 执行添加SQL语句，返回记录的ID（自动产生的自增主键）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="parms"&gt;SQL参数&lt;/param&gt;         /// &lt;returns&gt;记录的ID&lt;/returns&gt;         public async Task&lt;int&gt; ExecuteAddAsync(string sql, params DmParameter[] parms)         {             sql = sql + ";select @@identity as newautoid";              using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     await PrepareCommandAsync(cmd, connection, null, sql, parms);                      int recordID;                     try                     {                         recordID = int.Parse((await cmd.ExecuteScalarAsync()).ToString());                     }                     catch                     {                         recordID = -1;                     }                      cmd.Parameters.Clear();                      return recordID;                 }             }         }          /// &lt;summary&gt;         /// 执行多条SQL语句，实现数据库事务。         /// &lt;/summary&gt;         /// &lt;param name="sqlList"&gt;SQL语句的哈希表（key为sql语句，value是该语句的DmParameter[]）&lt;/param&gt;         public void ExecuteSqlTrans(Hashtable sqlList)         {             using (DmConnection conn = new DmConnection(connectionString))             {                 conn.Open();                 using (DbTransaction trans = conn.BeginTransaction())                 {                     using (DmCommand cmd = new DmCommand())                     {                         try                         {                             foreach (DictionaryEntry entry in sqlList)                             {                                 var sql = entry.Key.ToString();                                 var paras = (DmParameter[])entry.Value;                                  PrepareCommand(cmd, conn, trans, sql, paras);                                  int val = cmd.ExecuteNonQuery();                                  cmd.Parameters.Clear();                             }                              trans.Commit();                         }                         catch (DmException ex)                         {                             trans.Rollback();                             throw ex;                         }                     }                 }             }         }          /// &lt;summary&gt;         /// 执行多条SQL语句，实现数据库事务。         /// &lt;/summary&gt;         /// &lt;param name="sqlList"&gt;SQL语句的哈希表（key为sql语句，value是该语句的DmParameter[]）&lt;/param&gt;         public async Task ExecuteSqlTransAsync(Hashtable sqlList)         {             using (DmConnection conn = new DmConnection(connectionString))             {                 await conn.OpenAsync();                 using (DbTransaction trans = conn.BeginTransaction())                 {                     using (DmCommand cmd = new DmCommand())                     {                         try                         {                             foreach (DictionaryEntry entry in sqlList)                             {                                 var sql = entry.Key.ToString();                                 var paras = (DmParameter[])entry.Value;                                  await PrepareCommandAsync(cmd, conn, trans, sql, paras);                                  int val = await cmd.ExecuteNonQueryAsync();                                  cmd.Parameters.Clear();                             }                              trans.Commit();                         }                         catch (DmException ex)                         {                             trans.Rollback();                             throw ex;                         }                     }                 }             }         }          /// &lt;summary&gt;         /// 执行一条计算查询结果语句，返回查询结果。         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="parms"&gt;SQL参数&lt;/param&gt;         /// &lt;returns&gt;查询结果&lt;/returns&gt;         public object GetSingle(string sql, params DmParameter[] parms)         {             using (DmConnection conn = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     PrepareCommand(cmd, conn, null, sql, parms);                      object obj = cmd.ExecuteScalar();                     cmd.Parameters.Clear();                      if ((object.Equals(obj, null)) || (object.Equals(obj, DBNull.Value)))                     {                         return null;                     }                     else                     {                         return obj;                     }                 }             }         }          /// &lt;summary&gt;         /// 执行一条计算查询结果语句，返回查询结果。         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="parms"&gt;SQL参数&lt;/param&gt;         /// &lt;returns&gt;查询结果&lt;/returns&gt;         public async Task&lt;object&gt; GetSingleAsync(string sql, params DmParameter[] parms)         {             using (DmConnection conn = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     await PrepareCommandAsync(cmd, conn, null, sql, parms);                      object obj = await cmd.ExecuteScalarAsync();                     cmd.Parameters.Clear();                      if ((object.Equals(obj, null)) || (object.Equals(obj, DBNull.Value)))                     {                         return null;                     }                     else                     {                         return obj;                     }                 }             }         }          /// &lt;summary&gt;         /// 执行查询语句，返回DmDataReader (切记要手工关闭DmDataReader)         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;查询语句&lt;/param&gt;         /// &lt;param name="parms"&gt;SQL参数&lt;/param&gt;         /// &lt;returns&gt;DmDataReader&lt;/returns&gt;         public DbDataReader ExecuteReader(string sql, params DmParameter[] parms)         {             DmConnection connection = new DmConnection(connectionString);             DmCommand cmd = new DmCommand();              PrepareCommand(cmd, connection, null, sql, parms);              DbDataReader myReader = cmd.ExecuteReader();             cmd.Parameters.Clear();              return myReader;         }          /// &lt;summary&gt;         /// 执行查询语句，返回DmDataReader (切记要手工关闭DmDataReader)         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;查询语句&lt;/param&gt;         /// &lt;param name="parms"&gt;SQL参数&lt;/param&gt;         /// &lt;returns&gt;DmDataReader&lt;/returns&gt;         public async Task&lt;DbDataReader&gt; ExecuteReaderAsync(string sql, params DmParameter[] parms)         {             DmConnection connection = new DmConnection(connectionString);             DmCommand cmd = new DmCommand();              await PrepareCommandAsync(cmd, connection, null, sql, parms);              var myReader = await cmd.ExecuteReaderAsync();             cmd.Parameters.Clear();             return myReader;         }          /// &lt;summary&gt;         /// 执行查询语句，返回DataSet         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;查询语句&lt;/param&gt;         /// &lt;param name="paras"&gt;参数数组&lt;/param&gt;         /// &lt;returns&gt;DataSet&lt;/returns&gt;         public DataSet Query(string sql, params DmParameter[] paras)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     PrepareCommand(cmd, connection, null, sql, paras);                     DataSet ds = new DataSet();                      using (DmDataAdapter da = new DmDataAdapter(cmd))                     {                         da.Fill(ds, "ds");                         cmd.Parameters.Clear();                          return ds;                     }                 }             }         }          /// &lt;summary&gt;         /// 准备SQL查询命令         /// &lt;/summary&gt;         /// &lt;param name="cmd"&gt;SQL命令对象&lt;/param&gt;         /// &lt;param name="conn"&gt;SQL连接对象&lt;/param&gt;         /// &lt;param name="trans"&gt;SQL事务对象&lt;/param&gt;         /// &lt;param name="cmdText"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         private void PrepareCommand(DmCommand cmd, DmConnection conn, DbTransaction trans, string cmdText, DmParameter[] paras)         {             if (conn.State != ConnectionState.Open)             {                 conn.Open();             }              cmd.Connection = conn;             cmd.CommandText = cmdText;              if (trans != null)             {                 cmd.Transaction = trans;             }              cmd.CommandType = CommandType.Text;             if (paras != null)             {                 foreach (DmParameter parameter in paras)                 {                     if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &amp;&amp;                         (parameter.Value == null))                     {                         parameter.Value = DBNull.Value;                     }                     cmd.Parameters.Add(parameter);                 }             }         }          /// &lt;summary&gt;         /// 准备SQL查询命令         /// &lt;/summary&gt;         /// &lt;param name="cmd"&gt;SQL命令对象&lt;/param&gt;         /// &lt;param name="conn"&gt;SQL连接对象&lt;/param&gt;         /// &lt;param name="trans"&gt;SQL事务对象&lt;/param&gt;         /// &lt;param name="cmdText"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         private async Task PrepareCommandAsync(DmCommand cmd, DmConnection conn, DbTransaction trans, string cmdText, DmParameter[] paras)         {             if (conn.State != ConnectionState.Open)             {                 await conn.OpenAsync();             }              cmd.Connection = conn;             cmd.CommandText = cmdText;              if (trans != null)             {                 cmd.Transaction = trans;             }              cmd.CommandType = CommandType.Text;             if (paras != null)             {                 foreach (DmParameter parameter in paras)                 {                     if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &amp;&amp;                         (parameter.Value == null))                     {                         parameter.Value = DBNull.Value;                     }                     cmd.Parameters.Add(parameter);                 }             }         }          #endregion 执行带参数的SQL语句     }</code></pre> <p>使用方法也很简单，传入SQL语句和参数即可。这里给出几个增删改查的例子：</p> <pre><code>    public class PersonAdoNetDAL : IPersonDAL     {         static readonly DmDbClient _client = new DmDbClient("Server=127.0.0.1; UserId=TESTDB; PWD=1234567");          public int Add(PersonModel model)         {             string sql = "insert into Person(Name,City) Values(:Name,:City)";             DmParameter[] paras = new DmParameter[] {                 new DmParameter(":Name",model.Name),                 new DmParameter(":City",model.City)             };              return _client.ExecuteAdd(sql, paras);         }          public bool Update(PersonModel model)         {             string sql = "update Person set City=:City where Id=:Id";             DmParameter[] paras = new DmParameter[] {                 new DmParameter(":Id",model.Id),                 new DmParameter(":City",model.City)             };              return _client.ExecuteSql(sql, paras) &gt; 0 ? true : false;         }          public bool Delete(int id)         {             string sql = "delete from Person where Id=:Id";             DmParameter[] paras = new DmParameter[] {                 new DmParameter(":Id",id),             };              return _client.ExecuteSql(sql, paras) &gt; 0 ? true : false;         }          public PersonModel Get(int id)         {             string sql = "select Id,Name,City from Person where Id=:Id";             DmParameter[] paras = new DmParameter[] {                 new DmParameter(":Id",id),             };              PersonModel model = null;             using (var reader = (DmDataReader)_client.ExecuteReader(sql, paras))             {                 while (reader.Read())                 {                     model = new PersonModel();                     model.Id = reader.GetInt32(0);                     model.Name = reader.GetString(1);                     model.City = reader.GetString(2);                 }             }              return model;         }          public List&lt;PersonModel&gt; GetList()         {             var list = new List&lt;PersonModel&gt;();             using (var reader = (DmDataReader)_client.ExecuteReader("select Id,Name,City from Person"))             {                 while (reader.Read())                 {                     var model = new PersonModel();                     model.Id = reader.GetInt32(0);                     model.Name = reader.GetString(1);                     model.City = reader.GetString(2);                     list.Add(model);                 }             }              return list;         }      }</code></pre> <p>需要注意达梦数据库的参数是用冒号作为前缀的。另外数据表和字段的名字建议全部使用大写字母，单词之间使用下划线分隔，也就是蛇形命名法。此时SQL语句就不用关心大小写了，怎么写都行。</p> <h2 id="dapper方式">Dapper方式</h2> <p>Dapper是一个轻量级的ORM框架，现在使用的也很广泛，可以简化代码编写。因为Dapper扩展的IDbConnection，这是ADO.NET中的东西，我们使用的DmProvider也是实现了ADO.NET相关接口，所以Dapper可以通过DmProvider操作达梦数据库。</p> <p>首先定义一个获取数据库连接对象的工厂类：</p> <pre><code class="language-cs">    public class DmConnectionFactory     {         static string sqlConnString = "Server=127.0.0.1; UserId=TESTDB; PWD=123456";         public static IDbConnection GetConn()         {             return new DmConnection(sqlConnString);         }     }</code></pre> <p>然后就可以使用它执行SQL语句了：</p> <pre><code class="language-cs">   public class PersonDapperDAL : IPersonDAL     {         public PersonDapperDAL()         {         }          public PersonModel Get(int id)         {             string sql = "select Id,Name,City from Person where Id=:Id";             return DmConnectionFactory.GetConn().QueryFirstOrDefault&lt;PersonModel&gt;(sql, new { Id = id });         }          public List&lt;PersonModel&gt; GetList()         {             string sql = "select Id,Name,City from Person";             return DmConnectionFactory.GetConn().Query&lt;PersonModel&gt;(sql).ToList();         }          public int Add(PersonModel model)         {             string sql = "insert into Person(Name,City) Values(:Name,:City);Select @@IDENTITY";             return DmConnectionFactory.GetConn().QuerySingle&lt;int&gt;(sql, model);         }          public bool Update(PersonModel model)         {             string sql = "update Person set City=:City where Id=:Id";             int result = DmConnectionFactory.GetConn().Execute(sql, model);             return result &gt; 0;         }          public bool Delete(int id)         {             string sql = "delete from Person where Id=:Id";             int result = DmConnectionFactory.GetConn().Execute(sql, new { Id = id });             return result &gt; 0;         }     }</code></pre> <p>Query、Execute这些方法都是Dapper定义的，可以看到能够少写很多代码。这里也不用打开连接、关闭连接，也不用写using，因为Dapper的这些方法中已经做了相关处理。</p> <hr/> <p>好了，以上就是本文的主要内容。如有错漏欢迎指正。</p> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2748.htm">python——json，dict之间的转换load,dump, loads, dumps</a></p>
                                                        <p>下一个：<a href="/html/category/article-2750.htm">Java 8中获取当前的时间戳</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3441.htm" title="git 回滚到之前某一commit">git 回滚到之前某一commit</a></li>
                        <li class="py-2"><a href="/html/category/article-4141.htm" title="如何从HTML表单获取键/值数据集？">如何从HTML表单获取键/值数据集？</a></li>
                        <li class="py-2"><a href="/html/category/article-2801.htm" title="手写事件发布订阅框架">手写事件发布订阅框架</a></li>
                        <li class="py-2"><a href="/html/category/article-2806.htm" title="存储用户密码应该使用什么加密算法">存储用户密码应该使用什么加密算法</a></li>
                        <li class="py-2"><a href="/html/category/article-2822.htm" title="centos 7redis设置开机自动启动">centos 7redis设置开机自动启动</a></li>
                        <li class="py-2"><a href="/html/category/article-2808.htm" title="使用 Vert.X Future/Promise 编写异步代码_在线工具">使用 Vert.X Future/Promise 编写异步代码_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-2790.htm" title="JS 删除数组中某个元素的几种方式">JS 删除数组中某个元素的几种方式</a></li>
                        <li class="py-2"><a href="/html/category/article-2805.htm" title="Spring Cloud Alibaba入门实践(十九)-Feign整合Sentinel">Spring Cloud Alibaba入门实践(十九)-Feign整合Sentinel</a></li>
                        <li class="py-2"><a href="/html/category/article-3774.htm" title="报错解决Module build failed (from ./node_modules/babel-loader/lib/index.js):">报错解决Module build failed (from ./node_modules/babel-loader/lib/index.js):</a></li>
                        <li class="py-2"><a href="/html/category/article-2784.htm" title="C++基础之C++中的输入输出">C++基础之C++中的输入输出</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">4</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>