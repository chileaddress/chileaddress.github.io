<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2653.htm" />
    <title>Java应用工程结构 &#8211; CN.programmer.Luxh - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>Java应用工程结构 &#8211; CN.programmer.Luxh</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<blockquote> <p>分层的本质是关注点分离，隔离对下层的变化，可以简化复杂性，使得层次结构更加清晰。</p> </blockquote> <h3 id="1-主流分层结构介绍">1. 主流分层结构介绍</h3> <p>目前业界存在两种主流的应用工程结构：一种是阿里推出的《Java开发手册》中推荐的，另外一种是基于DDD(领域驱动设计)推荐的。</p> <h4 id="11-基于阿里java开发手册的分层结构">1.1 基于阿里《Java开发手册》的分层结构</h4> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/81c2b27d5708adb1cc595c1161119123.jpg" alt="Java应用工程结构 - CN.programmer.Luxh "></p> <pre><code>• 开放 API 层：可直接封装 Service 接口暴露成 RPC 接口；通过 Web 封装成 http 接口；网关控制层等。 • 终端显示层：各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP 渲染，移 动端展示等。 • Web 层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。  • Service 层：相对具体的业务逻辑服务层。  • Manager 层：通用业务处理层，它有如下特征： 1） 对第三方平台封装的层，预处理返回结果及转化异常信息，适配上层接口。 2） 对 Service 层通用能力的下沉，如缓存方案、中间件通用处理。 3） 与 DAO 层交互，对多个 DAO 的组合复用。  • DAO 层：数据访问层，与底层 MySQL、Oracle、Hbase、OB 等进行数据交互。  • 第三方服务：包括其它部门 RPC 服务接口，基础平台，其它公司的 HTTP 接口，如淘宝开放平台、支 付宝付款服务、高德地图服务等。 • 外部数据接口：外部（应用）数据存储服务提供的接口，多见于数据迁移场景中。</code></pre> <h4 id="12-基于ddd领域驱动设计的分层结构">1.2 基于DDD(领域驱动设计)的分层结构</h4> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/73f984d11276f25bb3a10b0998fa9877.jpg" alt="Java应用工程结构 - CN.programmer.Luxh "></p> <pre><code>• 领域层：体现业务逻辑。 • 应用层：依赖领域层，根据业务对下层领域进行聚合和编排。 • 基础设施层：为其他提供技术支持。 • 用户接口层：为外部用户访问底层系统提供交互界面和数据表示。</code></pre> <h3 id="2-自己的工程结构">2. 自己的工程结构</h3> <p>基于上述两种工程结构，设计一个适合自己的Java项目分层结构。</p> <pre><code>example └─src     ├─main     │  ├─java     │  │  └─com     │  │      └─example     │  │          ├─application                 --应用层（聚合多个领域）     │  │          ├─domain                      --领域层     │  │          │  ├─order                      --订单域     │  │          │  │  ├─bo                        --业务对象     │  │          │  │  ├─constant                  --领域内局部常量     │  │          │  │  ├─controller                --控制器     │  │          │  │  ├─dto                       --数据传输对象     │  │          │  │  ├─event                     --事件     │  │          │  │  │  ├─publish                  --发布     │  │          │  │  │  └─subscribe                --订阅     │  │          │  │  ├─manager                   --通用逻辑处理     │  │          │  │  ├─repository                --存储     │  │          │  │  │  ├─entity                   --实体,对应数据库中的字段     │  │          │  │  │  └─mapper                   --mybatis mapper     │  │          │  │  └─service                   --业务层处理     │  │          │  │      └─impl                    --业务接口实现     │  │          │  └─user                       --用户域     │  │          │      ├─bo     │  │          │      ├─constant     │  │          │      ├─controller     │  │          │      ├─dto     │  │          │      ├─event     │  │          │      │  ├─publish     │  │          │      │  └─subscribe     │  │          │      ├─manager     │  │          │      ├─repository     │  │          │      │  ├─entity     │  │          │      │  └─mapper     │  │          │      └─service     │  │          │          └─impl     │  │          └─infrastructure             --基础设施层     │  │              ├─config                   --配置     │  │              ├─constant                 --全局常量     │  │              ├─handler                  --处理器     │  │              ├─interceptor              --拦截器     │  │              ├─thirdparty               --第三方     │  │              └─utils                    --工具类     │  └─resources             │      ├─mapper     │      │  ├─order     │      │  └─user     │           │           │           └─test         └─java             └─com                 └─example</code></pre> <ul> <li>接收参数和响应报文，请求以Req为后缀，响应以Resp为后缀，代码写在dto包中，比如创建订单请求和响应</li> </ul> <pre><code>/**  * 创建订单请求  */ @Data public class OrderCreateReq {      /**      * 用户id      */     private String userId;      /**      * 订单金额      */     private BigDecimal amount;      /**      * 下单的商品集合      */     private List&lt;OrderDetailReq&gt; orderDetailReqList;      @Data     public static class OrderDetailReq {          /**          * 商品id          */         private Long goodsId;         /**          * 商品数量          */         private Integer goodsNum;      } }   /**  * 创建订单响应  */ @Data public class OrderCreateResp {      /**      * 订单id      */     private String orderId; }</code></pre> <ul> <li> <p>DAO层代码放在repository中<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/04f709becb32660620b1cf9ce862780d.jpg" alt="Java应用工程结构 - CN.programmer.Luxh "></p> </li> <li> <p>业务层代码放在service和manager中，比如创建订单因为涉及到订单表和订单明细表，需要在一个事务中，所以将事务代码下沉到manager。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/c2eb3dacacdfb92cabc521ac06543b61.jpg" alt="Java应用工程结构 - CN.programmer.Luxh "></p> </li> </ul> <pre><code>@Service public class OrderServiceImpl implements OrderService {      @Resource     private OrderManager orderManager;      @Override     public OrderCreateResp create(OrderCreateReq req) {          Order order = buildOrder(req);         List&lt;OrderDetail&gt; orderDetailList = buildOrderDetailList(order.getOrderId(), req);          orderManager.createOrder(order, orderDetailList);          OrderCreateResp resp = new OrderCreateResp();         resp.setOrderId(order.getOrderId());         return resp;     }       private Order buildOrder(OrderCreateReq req) {         Order order = new Order();         order.setOrderId(UUID.randomUUID().toString());         order.setUserId(req.getUserId());         order.setAmount(req.getAmount());         return order;     }       private List&lt;OrderDetail&gt; buildOrderDetailList(String orderId, OrderCreateReq req) {         List&lt;OrderDetail&gt; orderDetailList = new ArrayList&lt;&gt;();         for (OrderCreateReq.OrderDetailReq orderDetailReq : req.getOrderDetailReqList()) {             OrderDetail orderDetail = new OrderDetail();             orderDetail.setOrderId(orderId);             orderDetail.setGoodsId(orderDetailReq.getGoodsId());             orderDetail.setGoodsNum(orderDetailReq.getGoodsNum());             orderDetailList.add(orderDetail);         }         return orderDetailList;     } }</code></pre> <pre><code>@Component public class OrderManager {      @Resource     private OrderMapper orderMapper;      @Resource     private OrderDetailMapper orderDetailMapper;      @Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)     public void createOrder(Order order, List&lt;OrderDetail&gt; orderDetailList) {         orderMapper.insert(order);         for (OrderDetail orderDetail : orderDetailList) {             orderDetailMapper.insert(orderDetail);         }     }   }</code></pre> <ul> <li>业务对象存放在bo包中，比如查询用户信息，不需要返回密码字段，则可以定义一个UserBO。<br /><img decoding="async" src="https://img2022.cnblogs.com/blog/408749/202204/408749-20220412162722864-240907768.jpg" alt="Java应用工程结构 - CN.programmer.Luxh "></li> </ul> <pre><code>@Data public class UserBO {          private String userId;          private String username;          private String nickname; }</code></pre> <ul> <li>application层做聚合编排，比如下单，既要保存订单信息，又要扣减库存，就需要对订单域和库存域进行聚合编排。</li> </ul> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2652.htm">Citus 分布式 PostgreSQL 集群 &#8211; SQL Reference(查询分布式表 SQL)</a></p>
                                                        <p>下一个：<a href="/html/category/article-2654.htm">按照 Promise/A+ 规范逐行注释并实现 Promise_在线工具</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2820.htm" title="OpenSSL3.0.5安装">OpenSSL3.0.5安装</a></li>
                        <li class="py-2"><a href="/html/category/article-3139.htm" title="Halo 开源项目学习（六）：事件监听机制_在线工具">Halo 开源项目学习（六）：事件监听机制_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-4340.htm" title="梦见自己抱着别的女人睡觉（梦见自己抱着别的女人睡觉好不好）">梦见自己抱着别的女人睡觉（梦见自己抱着别的女人睡觉好不好）</a></li>
                        <li class="py-2"><a href="/html/category/article-2842.htm" title="vue项目在打包时,如何去掉所有的console.log输出_vue.js_">vue项目在打包时,如何去掉所有的console.log输出_vue.js_</a></li>
                        <li class="py-2"><a href="/html/category/article-2841.htm" title="React系列五——event事件">React系列五——event事件</a></li>
                        <li class="py-2"><a href="/html/category/article-2810.htm" title="netty系列之:netty中的核心MessageToByte编码器">netty系列之:netty中的核心MessageToByte编码器</a></li>
                        <li class="py-2"><a href="/html/category/article-2822.htm" title="centos 7redis设置开机自动启动">centos 7redis设置开机自动启动</a></li>
                        <li class="py-2"><a href="/html/category/article-2814.htm" title="DataLoader 和 Dataset">DataLoader 和 Dataset</a></li>
                        <li class="py-2"><a href="/html/category/article-3748.htm" title="vue路由跳转router-link清除历史记录的三种方式(总结)_vue.js_">vue路由跳转router-link清除历史记录的三种方式(总结)_vue.js_</a></li>
                        <li class="py-2"><a href="/html/category/article-4341.htm" title="动物防疫站工作总结发言（动物防疫站工作总结发言材料）">动物防疫站工作总结发言（动物防疫站工作总结发言材料）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>