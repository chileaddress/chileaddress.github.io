<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2810.htm" />
    <title>netty系列之:netty中的核心MessageToByte编码器 - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>netty系列之:netty中的核心MessageToByte编码器</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<div class="toc"> <div class="toc-container-header">目录</div> <ul> <li><a href="#%E7%AE%80%E4%BB%8B" rel="nofollow">简介</a></li> <li><a href="#messagetobyte%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B" rel="nofollow">MessageToByte框架简介</a></li> <li><a href="#messagetobyteencoder" rel="nofollow">MessageToByteEncoder</a></li> <li><a href="#bytetomessagedecoder" rel="nofollow">ByteToMessageDecoder</a></li> <li><a href="#bytetomessagecodec" rel="nofollow">ByteToMessageCodec</a></li> <li><a href="#%E6%80%BB%E7%BB%93" rel="nofollow">总结</a></li> </ul> </div> <h1 id="简介">简介</h1> <p>之前的文章中，我们讲解了netty中从一个message转换成为另外一个message的框架叫做MessageToMessage编码器。但是message to message只考虑了channel中消息在处理过程中的转换，但是我们知道channel中最终传输的数据一定是ByteBuf，所以我们还需要一个message和ByteBuf相互转换的框架，这个框架就叫做MessageToByte。</p> <p>注意，这里的byte指的是ByteBuf而不是byte这个字节类型。</p> <h1 id="messagetobyte框架简介">MessageToByte框架简介</h1> <p>为了方便扩展和用户的自定义，netty封装了一套MessageToByte框架，这个框架中有三个核心的类，分别是MessageToByteEncoder,ByteToMessageDecoder和ByteToMessageCodec。</p> <p>我们分别看一下这三个核心类的定义：</p> <pre><code>public abstract class MessageToByteEncoder&lt;I&gt; extends ChannelOutboundHandlerAdapter</code></pre> <pre><code>public abstract class ByteToMessageDecoder extends ChannelInboundHandlerAdapter</code></pre> <pre><code>public abstract class ByteToMessageCodec&lt;I&gt; extends ChannelDuplexHandler</code></pre> <p>这三个类分别继承自ChannelOutboundHandlerAdapter，ChannelInboundHandlerAdapter和ChannelDuplexHandler，分别表示的是向channel中写消息，从channel中读消息和一个向channel中读写消息的双向操作。</p> <p>这三个类都是抽象类，接下来我们会详细分析这三个类的具体实现逻辑。</p> <h1 id="messagetobyteencoder">MessageToByteEncoder</h1> <p>先来看encoder，如果你对比MessageToByteEncoder和MessageToMessageEncoder的源码实现，可以发现他们有诸多相似之处。</p> <p>首先在MessageToByteEncoder中定义了一个用作消息类型匹配的TypeParameterMatcher。</p> <p>这个matcher用来匹配收到的消息类型，如果类型匹配则进行消息的转换操作，否则直接将消息写入channel中。</p> <p>和MessageToMessageEncoder不同的是，MessageToByteEncoder多了一个preferDirect字段，这个字段表示消息转换成为ByteBuf的时候是使用diret Buf还是heap Buf。</p> <p>这个字段的使用情况如下：</p> <pre><code>    protected ByteBuf allocateBuffer(ChannelHandlerContext ctx, @SuppressWarnings("unused") I msg,                                boolean preferDirect) throws Exception {         if (preferDirect) {             return ctx.alloc().ioBuffer();         } else {             return ctx.alloc().heapBuffer();         }     }</code></pre> <p>最后来看一下它的核心方法write:</p> <pre><code>    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {         ByteBuf buf = null;         try {             if (acceptOutboundMessage(msg)) {                 @SuppressWarnings("unchecked")                 I cast = (I) msg;                 buf = allocateBuffer(ctx, cast, preferDirect);                 try {                     encode(ctx, cast, buf);                 } finally {                     ReferenceCountUtil.release(cast);                 }                  if (buf.isReadable()) {                     ctx.write(buf, promise);                 } else {                     buf.release();                     ctx.write(Unpooled.EMPTY_BUFFER, promise);                 }                 buf = null;             } else {                 ctx.write(msg, promise);             }         } catch (EncoderException e) {             throw e;         } catch (Throwable e) {             throw new EncoderException(e);         } finally {             if (buf != null) {                 buf.release();             }         }     }</code></pre> <p>上面我们已经提到了，write方法首先通过matcher来判断是否是要接受的消息类型，如果是的话就调用encode方法，将消息对象转换成为ByteBuf，如果不是，则直接将消息写入channel中。</p> <p>和MessageToMessageEncoder不同的是，encode方法需要传入一个ByteBuf对象，而不是CodecOutputList。</p> <p>MessageToByteEncoder有一个需要实现的抽象方法encode如下，</p> <pre><code>    protected abstract void encode(ChannelHandlerContext ctx, I msg, ByteBuf out) throws Exception;</code></pre> <h1 id="bytetomessagedecoder">ByteToMessageDecoder</h1> <p>ByteToMessageDecoder用来将channel中的ByteBuf消息转换成为特定的消息类型，其中Decoder中最重要的方法就是好channelRead方法,如下所示：</p> <pre><code>    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {         if (msg instanceof ByteBuf) {             CodecOutputList out = CodecOutputList.newInstance();             try {                 first = cumulation == null;                 cumulation = cumulator.cumulate(ctx.alloc(),                         first ? Unpooled.EMPTY_BUFFER : cumulation, (ByteBuf) msg);                 callDecode(ctx, cumulation, out);             } catch (DecoderException e) {                 throw e;             } catch (Exception e) {                 throw new DecoderException(e);             } finally {                 try {                     if (cumulation != null &amp;&amp; !cumulation.isReadable()) {                         numReads = 0;                         cumulation.release();                         cumulation = null;                     } else if (++numReads &gt;= discardAfterReads) {                         numReads = 0;                         discardSomeReadBytes();                     }                      int size = out.size();                     firedChannelRead |= out.insertSinceRecycled();                     fireChannelRead(ctx, out, size);                 } finally {                     out.recycle();                 }             }         } else {             ctx.fireChannelRead(msg);         }     }</code></pre> <p>channelRead接收要进行消息读取的Object对象，因为这里只接受ByteBuf消息，所以在方法内部调用了<code>msg instanceof ByteBuf</code> 来判断消息的类型，如果不是ByteBuf类型的消息则不进行消息的转换。</p> <p>输出的对象是CodecOutputList，在将ByteBuf转换成为CodecOutputList之后，调用fireChannelRead方法将out对象传递下去。</p> <p>这里的关键就是如何将接收到的ByteBuf转换成为CodecOutputList。</p> <p>转换的方法叫做callDecode，它接收一个叫做cumulation的参数，在上面的方法中，我们还看到一个和cumulation非常类似的名称叫做cumulator。那么他们两个有什么区别呢？</p> <p>在ByteToMessageDecoder中cumulation是一个ByteBuf对象，而Cumulator是一个接口，这个接口定义了一个cumulate方法：</p> <pre><code>    public interface Cumulator {         ByteBuf cumulate(ByteBufAllocator alloc, ByteBuf cumulation, ByteBuf in);     }</code></pre> <p>Cumulator用来将传入的ByteBuf合并成为一个新的ByteBuf。</p> <p>ByteToMessageDecoder中定义了两种Cumulator，分别是MERGE_CUMULATOR和COMPOSITE_CUMULATOR。</p> <p>MERGE_CUMULATOR是将传入的ByteBuf通过memory copy的方式拷贝到目标ByteBuf cumulation中。</p> <p>而COMPOSITE_CUMULATOR则是将ByteBuf添加到一个 CompositeByteBuf 的结构中，并不做memory copy，因为目标的结构比较复杂，所以速度会比直接进行memory copy要慢。</p> <p>用户要扩展的方法就是decode方法，用来将一个ByteBuf转换成为其他对象：</p> <pre><code>    protected abstract void decode(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out) throws Exception;</code></pre> <h1 id="bytetomessagecodec">ByteToMessageCodec</h1> <p>最后要介绍的类是ByteToMessageCodec，ByteToMessageCodec表示的是message和ByteBuf之间的互相转换，它里面的encoder和decoder分别就是上面讲到的MessageToByteEncoder和ByteToMessageDecoder。</p> <p>用户可以继承ByteToMessageCodec来同时实现encode和decode的功能，所以需要实现encode和decode这两个方法：</p> <pre><code>    protected abstract void encode(ChannelHandlerContext ctx, I msg, ByteBuf out) throws Exception;      protected abstract void decode(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out) throws Exception;</code></pre> <p>ByteToMessageCodec的本质就是封装了MessageToByteEncoder和ByteToMessageDecoder，然后实现了编码和解码的功能。</p> <h1 id="总结">总结</h1> <p>如果想实现ByteBuf和用户自定义消息的直接转换，那么选择netty提供的上面三个编码器是一个很好的选择。</p> <blockquote> <p>本文已收录于<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.flydean.com/14-0-2-netty-codec-msg-to-bytebuf/"  target="_blank" rel="nofollow">http://www.flydean.com/14-0-2-netty-codec-msg-to-bytebuf/</a></p> <p>最通俗的解读，最深刻的干货，最简洁的教程，众多你不知道的小技巧等你来发现！</p> <p>欢迎关注我的公众号:「程序那些事」,懂技术，更懂你！</p> </blockquote> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2809.htm">C++11（一）</a></p>
                                                        <p>下一个：<a href="/html/category/article-2811.htm">LevelDB 学习笔记5：版本控制_在线工具</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2785.htm" title="企业微信 嵌H5页面 用户权限获取匹配">企业微信 嵌H5页面 用户权限获取匹配</a></li>
                        <li class="py-2"><a href="/html/category/article-4141.htm" title="如何从HTML表单获取键/值数据集？">如何从HTML表单获取键/值数据集？</a></li>
                        <li class="py-2"><a href="/html/category/article-2804.htm" title="java中RabbitMQ高级应用_java">java中RabbitMQ高级应用_java</a></li>
                        <li class="py-2"><a href="/html/category/article-2796.htm" title="vue项目中引入js-base64方式_vue.js">vue项目中引入js-base64方式_vue.js</a></li>
                        <li class="py-2"><a href="/html/category/article-2794.htm" title="深入浅出谈谈Java并发编程：Volatile">深入浅出谈谈Java并发编程：Volatile</a></li>
                        <li class="py-2"><a href="/html/category/article-2802.htm" title="vue在进行增删改操作后刷新页面">vue在进行增删改操作后刷新页面</a></li>
                        <li class="py-2"><a href="/html/category/article-2817.htm" title="uni-app 63egg.js后端用户上线和下线深度剖析">uni-app 63egg.js后端用户上线和下线深度剖析</a></li>
                        <li class="py-2"><a href="/html/category/article-2793.htm" title="OutOfMemoryError异常_在线工具">OutOfMemoryError异常_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-2815.htm" title="编译实战 | 手摸手教你在Windows环境下运行Redis6.x">编译实战 | 手摸手教你在Windows环境下运行Redis6.x</a></li>
                        <li class="py-2"><a href="/html/category/article-2814.htm" title="DataLoader 和 Dataset">DataLoader 和 Dataset</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">4</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>