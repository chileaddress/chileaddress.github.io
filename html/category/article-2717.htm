<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2717.htm" />
    <title>Spring Cloud Feign 请求添加headers - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>Spring Cloud Feign 请求添加headers</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<div id="content_views" class="markdown_views prism-dracula"> <div class="toc"> <h3>目录</h3> <ul> <li>方案一：方法上的@RequestMapping注解添加headers信息</li> <li>方案二：接口上的@RequestMapping注解添加headers信息</li> <li>方案三：使用@Headers注解添加headers信息</li> <li>方案四：自定义RequestInterceptor添加headers信息</li> <li>方案五：自定义RequestInterceptor实现添加动态数据到header</li> </ul> </div> <h1>方案一：方法上的@RequestMapping注解添加headers信息</h1> <p>@RequestMapping注解的属性中包含一个headers数组，所以尝试使用，在指定的方法上@RequestMapping注解中添加需要的headers，可以是写死的，也可以读取配置，测试是有效的</p> <p>同理@RequestMapping一组的@PostMapping，@GetMapping注解等均适用</p> <pre><code class="prism language-bash">@FeignClient<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"server"</span>,url<span class="token operator">=</span><span class="token string">"127.0.0.1:8080"</span><span class="token punctuation">)</span> public interface FeignTest<span class="token punctuation">{<!-- --></span>     @RequestMapping<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/test"</span>,headers<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"app=test-app"</span>,<span class="token string">"token=<span class="token variable">${test-app.token}</span>"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>     String test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <h1>方案二：接口上的@RequestMapping注解添加headers信息</h1> <p>针对单个方法可以在方法上的@RequestMapping注解中添加headers，如果同一个接口中所有的方法都需要同样的headers时在方法上加就比较繁琐了，可以在接口上的@RequestMapping注解中添加headers，使整个接口的方法均被添加同样的headers</p> <pre><code class="prism language-bash">@FeignClient<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"server"</span>,url<span class="token operator">=</span><span class="token string">"127.0.0.1:8080"</span><span class="token punctuation">)</span> @RequestMapping<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/"</span>,headers<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"app=test-app"</span>,<span class="token string">"token=<span class="token variable">${test-app.token}</span>"</span><span class="token punctuation">}</span><span class="token punctuation">)</span> public interface FeignTest<span class="token punctuation">{<!-- --></span>     @RequestMapping<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/test"</span><span class="token punctuation">)</span>     String test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <h1>方案三：使用@Headers注解添加headers信息</h1> <pre><code class="prism language-bash">@FeignClient<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"server"</span>,url<span class="token operator">=</span><span class="token string">"127.0.0.1:8080"</span><span class="token punctuation">)</span> @Headers<span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token string">"app: test-app"</span>,<span class="token string">"token:<span class="token variable">${test-app.token}</span>"</span><span class="token punctuation">}</span><span class="token punctuation">)</span> public interface FeignTest<span class="token punctuation">{<!-- --></span>     @RequestMapping<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/test"</span><span class="token punctuation">)</span>     String test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>查看openfeign官方文档发现其使用的是@Headers来添加headers，测试发现并没有生效，spring cloud使用了自己的SpringMvcContract来解析注解，所以需要自己实现一个Contract来实现对@Headers注解的支持，具体实现参照https://juejin.im/post/6844903961653149709</p> <h1>方案四：自定义RequestInterceptor添加headers信息</h1> <p>feign提供了一个拦截器接口RequestInterceptor，实现RequestInterceptor接口就可以实现对feign请求的拦截，接口提供了一个方法apply()，实现apply()方法</p> <pre><code class="prism language-bash">@Component public class FeignRequestInterceptor implements RequestInterceptor<span class="token punctuation">{<!-- --></span>      @Value<span class="token punctuation">(</span><span class="token string">"<span class="token variable">${test-app.token}</span>"</span><span class="token punctuation">)</span>     private String token<span class="token punctuation">;</span>          @Override     public void apply<span class="token punctuation">(</span>RequestTemplate requestTemplate<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         requestTemplate.header<span class="token punctuation">(</span><span class="token string">"app"</span>,<span class="token string">"test-app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//静态         requestTemplate.header<span class="token punctuation">(</span><span class="token string">"token"</span>,token<span class="token punctuation">)</span><span class="token punctuation">;</span>//读配置<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>实现apply()方法直接添加header会拦截所有的请求都加上headers，如果不是所有的feign请求都需要用到不建议此方法</p> <h1>方案五：自定义RequestInterceptor实现添加动态数据到header</h1> <p>以上方案都不适合把动态的数据放入headers中，而通常场景下可能经常需要把计算的签名，用户id等动态信息设置到headers，所以还需要一个更加完善的方案。方案1/2/3均不能设置动态的值，方案4可以设置动态值，但是没做到请求的区分，所以在方案4的基础上进行改进得到了较为完善的方案5。具体实现如下：</p> <p>在请求调用代码中，获取到HttpServletRequest对象，将需要添加到headers中的值封装成一个map后放入HttpServletRequest的attribute域中</p> <pre><code class="prism language-bash">ServletRequestAttributes attributes<span class="token operator">=</span><span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span> RequestContextHolder.getRequestAttributes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> HttpServletRequest request<span class="token operator">=</span> Objects.requireNonNull<span class="token punctuation">(</span>attributes<span class="token punctuation">)</span>.getRequest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> String signedMsg<span class="token operator">=</span> getSignedMsg<span class="token punctuation">(</span>reqJson<span class="token punctuation">)</span><span class="token punctuation">;</span> // 计算签名字符串 Map<span class="token operator"><</span>String, String<span class="token operator">></span> reqMap<span class="token operator">=</span> new HashMap<span class="token operator"><></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> reqMap.put<span class="token punctuation">(</span><span class="token string">"content-type"</span>,<span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//常量字段 reqMap.put<span class="token punctuation">(</span><span class="token string">"accessKey"</span>, accessKey<span class="token punctuation">)</span><span class="token punctuation">;</span>//常量字段 reqMap.put<span class="token punctuation">(</span><span class="token string">"signedMsg"</span>, signedMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>//动态计算/获取字段 request.setAttribute<span class="token punctuation">(</span><span class="token string">"customizedRequestHeader"</span>, reqMap<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>在自定义RequestInterceptor中获取到HttpServletRequest对象的attribute域中指定的key，将key对应map中的所有参数加入到headers。</p> <pre><code class="prism language-bash">@Component public class FeignRequestInterceptor implements RequestInterceptor<span class="token punctuation">{<!-- --></span>      @Override     public void apply<span class="token punctuation">(</span>RequestTemplate requestTemplate<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         ServletRequestAttributes attributes<span class="token operator">=</span><span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span> RequestContextHolder.getRequestAttributes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         HttpServletRequest request<span class="token operator">=</span> attributes.getRequest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          // 设置自定义header         // 设置request中的attribute到header以便转发到Feign调用的服务         Enumeration<span class="token operator"><</span>String<span class="token operator">></span> reqAttrbuteNames<span class="token operator">=</span> request.getAttributeNames<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>reqAttrbuteNames<span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">while</span><span class="token punctuation">(</span>reqAttrbuteNames.hasMoreElements<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">{<!-- --></span>                 String attrName<span class="token operator">=</span> reqAttrbuteNames.nextElement<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"customizedRequestHeader"</span>.equalsIgnoreCase<span class="token punctuation">(</span>attrName<span class="token punctuation">))</span><span class="token punctuation">{<!-- --></span><span class="token builtin class-name">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                 Map<span class="token operator"><</span>String,String<span class="token operator">></span> requestHeaderMap<span class="token operator">=</span><span class="token punctuation">(</span>Map<span class="token punctuation">)</span>request.getAttribute<span class="token punctuation">(</span>attrName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Map.Entry<span class="token operator"><</span>String, String<span class="token operator">></span> entry<span class="token builtin class-name">:</span> requestHeaderMap.entrySet<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">{<!-- --></span>                     requestTemplate.header<span class="token punctuation">(</span>entry.getKey<span class="token punctuation">(</span><span class="token punctuation">)</span>, entry.getValue<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> </div> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2716.htm">Kafka启动报错处理：/opt/module/kafka/bin/kafka-run-class.sh: 第 258 行:exec: java: 未找到</a></p>
                                                        <p>下一个：<a href="/html/category/article-2718.htm">如何从AngularJS模板的HTML中调用encodeURIComponent？</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6909.htm" title="宠物托运疫苗（宠物托运疫苗本需要盖章吗）">宠物托运疫苗（宠物托运疫苗本需要盖章吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-6210.htm" title="制作狗粮配方颗粒机器视频（制作狗粮配方颗粒机器视频教学）">制作狗粮配方颗粒机器视频（制作狗粮配方颗粒机器视频教学）</a></li>
                        <li class="py-2"><a href="/html/category/article-7046.htm" title="宠物零食制作教程风干（宠物自制风干零食）">宠物零食制作教程风干（宠物自制风干零食）</a></li>
                        <li class="py-2"><a href="/html/category/article-7369.htm" title="国产十大放心狗粮品牌排行榜性价比高（国产十大放心狗粮品牌排行榜,性价比高的狗粮推荐）">国产十大放心狗粮品牌排行榜性价比高（国产十大放心狗粮品牌排行榜,性价比高的狗粮推荐）</a></li>
                        <li class="py-2"><a href="/html/category/article-5588.htm" title="动物医院诊疗范围有哪些项目要求（动物医院诊室）">动物医院诊疗范围有哪些项目要求（动物医院诊室）</a></li>
                        <li class="py-2"><a href="/html/category/article-6586.htm" title="开宠物店基本要懂的（开宠物店基本要懂的哪些知识）">开宠物店基本要懂的（开宠物店基本要懂的哪些知识）</a></li>
                        <li class="py-2"><a href="/html/category/article-7231.htm" title="海贼王修佐（海贼王修佐vs鼹鼠）">海贼王修佐（海贼王修佐vs鼹鼠）</a></li>
                        <li class="py-2"><a href="/html/category/article-6908.htm" title="猫咪免费领养中心云阳（猫免费领养中心地址）">猫咪免费领养中心云阳（猫免费领养中心地址）</a></li>
                        <li class="py-2"><a href="/html/category/article-7368.htm" title="专门买宠物的APP（专门买宠物的软件）">专门买宠物的APP（专门买宠物的软件）</a></li>
                        <li class="py-2"><a href="/html/category/article-5946.htm" title="宠物领养协议书怎么生效的 宠物领养协议书怎么生效的呢">宠物领养协议书怎么生效的 宠物领养协议书怎么生效的呢</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">14</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>