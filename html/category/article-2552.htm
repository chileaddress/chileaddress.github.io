<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2552.htm" />
    <title>从线上环境摘取了四个代码优化记录分享给大家 - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>从线上环境摘取了四个代码优化记录分享给大家</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<p></p> <h3 id="前言">前言</h3> <blockquote> <p>因为前段时间新项目已经完成目前趋于稳定，所以最近我被分配到了公司的运维组，负责维护另外一个项目，包含处理客户反馈的日常问题，以及对系统缺陷进行优化。</p> <p> 经过了接近两周的维护，除了日常问题以外，代码层面我一共处理了一个BUG，优化了三个问题，我把这四个问题归纳成了四段编码小技巧分享给大家，希望能有所帮助，今后若遇到类似的问题可以到我这里翻出来看看，想必能节省许多时间。</p> </blockquote> <p></p> <h3 id="技巧">技巧</h3> <h5 id="1stream分组">1、stream分组</h5> <blockquote> <p>很多人都知道java8的stream很好用，但很多人其实不会用，或者说搜了许多资料还是用不好，归根究底就是许多百度的资料没有合适的案例，让人似懂非懂。我这里就从线上项目中提取出了一段stream分组的代码片段，帮大家一看就懂。</p> </blockquote> <p>首先，我把表结构展示一下，当然为了做案例简化了，方便理解。</p> <ul> <li>医生信息表</li> </ul> <table> <thead> <tr> <th>id</th> <th>doctor_name</th> <th>phone</th> <th>photo_url</th> <th>area_code</th> </tr> </thead> <tbody> <tr> <td>1</td> <td>张三</td> <td>13612345678</td> <td><a href="https://head.img.com/abc.png" target="_blank" rel="nofollow" class="fancybox" data-fancybox-group="button">https://head.img.com/abc.png</a></td> <td>EAST</td> </tr> <tr> <td>2</td> <td>李四</td> <td>15845678901</td> <td><a href="https://head.img.com/xyz.png" target="_blank" rel="nofollow" class="fancybox" data-fancybox-group="button">https://head.img.com/xyz.png</a></td> <td>WEST</td> </tr> </tbody> </table> <ul> <li>院区表</li> </ul> <table> <thead> <tr> <th>id</th> <th>area_code</th> <th>area_name</th> </tr> </thead> <tbody> <tr> <td>1</td> <td>EAST</td> <td>东院区</td> </tr> <tr> <td>2</td> <td>SOUTH</td> <td>南院区</td> </tr> <tr> <td>3</td> <td>WEST</td> <td>西院区</td> </tr> <tr> <td>4</td> <td>NORTH</td> <td>北院区</td> </tr> </tbody> </table> <p></p> <blockquote> <p>需求：查询医生信息列表，要展示院区名称。</p> </blockquote> <p></p> <p>在我做优化之前，上一位同事是这么写的：</p> <pre><code class="language-java">// 查询医生列表 List&lt;DoctorVO&gt; doctorVOList = doctorService.findDoctorList();  // 遍历医生列表，装入院区名称。 doctorVOList.forEach((vo)-&gt;{     // 院区编码     String areaCode = vo.getAreaCode();      // 根据院区编码查询院区信息     HospitalAreaDTO hospitalAreaDTO = areaService.findOneByAreaCode(areaCode);     // 放入院区名称     vo.setAreaName(hospitalAreaDTO.getAreaName()); });  // 返回 return doctorVOList;</code></pre> <blockquote> <p>可以看到，他是遍历医生列表，然后分别去查询每个医生所在院区的名称并返回，等于说若有100个医生，那么就要查询100次院区表，虽然MySQL8.0+以后的查询效率其实变高了，这种小表查询其实影响没那么大，但作为一个成熟的线上项目，这种代码就是新手水平，我敢打包票很多人都这么写过。</p> </blockquote> <p></p> <p>优化后：</p> <pre><code class="language-java">// 查询医生列表 List&lt;DoctorVO&gt; doctorVOList = doctorService.findDoctorList();  // 以areaCode为key将院区列表分组放入内存中 Map&lt;String,List&lt;HospitalAreaDTO&gt;&gt; areaMap = areaService.findAll().stream()             .collect(Collectors.groupingBy(e-&gt; e.getAreaCode()));   // 遍历医生列表，装入院区名称。 List&lt;DoctorVO&gt; doctorVOList = new ArrayList&lt;&gt;(); doctorVOList.forEach((vo)-&gt;{     // 院区编码     String areaCode = vo.getAreaCode();      // 根据院区编码从map中拿到院区名称     String areaName = areaMap.get(areaCode).get(0).getAreaName();     // 放入院区名称     vo.setAreaName(areaName); });  // 返回 return doctorVOList;</code></pre> <blockquote> <p>可以看到，这里直接使用stream分组将院区信息按照院区编码为key，院区信息为value放入内存中，然后遍历医生列表时，根据院区编码直接从内存中取到对应的院区名称即可，前后只查询了1次，极大提高了效率，节省了数据库资源。</p> <p>只要是类似这种遍历查询需要从其他小表查出某属性值的场景时，都可以使用这种方式。</p> </blockquote> <p></p> <h5 id="2stream排序">2、stream排序</h5> <blockquote> <p>这个排序其实很简单，就是根据客户要求的多个规则给医生列表排序，这里的规则是：<strong>按照是否在线、是否排班降序，且按照医生职称、医生编号升序。</strong></p> <p>项目中用到了mybatis，所以之前的写法是直接写sql语句，但sql语句复杂一点的话后期交给其他同事是不好维护的。</p> <p>其实，查出列表后，直接在内存中通过stream进行排序就很舒适，所以我把项目中这部分的sql语句写法优化成了直接在代码中进行查询并排序。<br /> stream多属性不同规则排序：</p> </blockquote> <pre><code class="language-java">// 查询列表 List&lt;HomePageDoctorsDTO&gt; respDTOList = findHomePageDoctorList();  // 排序 List&lt;HomePageDoctorsDTO&gt; sortList = respDTOList.stream()     .sorted(         Comparator.comparing(HomePageDoctorsDTO::getOnlineFlag, Comparator.reverseOrder())         .thenComparing(HomePageDoctorsDTO::getScheduleStatus, Comparator.reverseOrder())         .thenComparing(HomePageDoctorsDTO::getDoctorTitleSort)         .thenComparing(HomePageDoctorsDTO::getDoctorNo)     )     .collect(Collectors.toList());  // 返回 return sortList;</code></pre> <blockquote> <p>上面一段代码就OK了，十分简单，reverseOrder()表示降序，不写就表示默认的升序。</p> <p>这里需要注意一点，网上很多资料都有用到：</p> <p><strong>Comparator.comparing(HomePageDoctorsRespDTO::getOnlineFlag).reverse()</strong></p> <p>这样的方式来进行降序，这是有误区的，可以专门查下或试下reverse()的用法，它只是反转不是降序排列，类似于从左到右变为从右到左这样的形式，降序一定要用上面代码的写法，这是一个要注意的坑。</p> </blockquote> <p></p> <h5 id="3异步线程">3、异步线程</h5> <blockquote> <p>异步线程很多人都知道，直接使用@Async注解即可，但很多人不知道使用这个注解的限制条件，往往以为自己用上了，实际上根本没有走异步线程。</p> </blockquote> <ol> <li>@Async注解只能标注在void方法上；</li> <li>@Async注解标注的方法必须是public修饰；</li> <li>@Async注解标注的方法和调用方在同一个类中，不会生效。</li> </ol> <blockquote> <p>以上条件缺一不可，哪怕满足前两个也不行，还是不会走异步线程。</p> <p>我维护的这个项目就是满足了前两个，实际上没有生效，说明写这段代码的同事想法是好的，希望不占用主线程从而提高接口效率，但实际上自己也没有充分测试，以为是有效的，我相信很多人也这么干过。<br /> 这里，我优化了下，给大家一个最科学的写法，保证有效，这里我以发短信通知为例。</p> </blockquote> <p></p> <blockquote> <p>首先，定义一个专门写异步方法的类叫AsyncService。</p> </blockquote> <pre><code class="language-java">/** &nbsp;*&nbsp;异步方法的服务,&nbsp;不影响主程序运行。 &nbsp;*/ @Service public&nbsp;class&nbsp;AsyncService&nbsp;{     private&nbsp;final&nbsp;Logger&nbsp;log&nbsp;=&nbsp;LoggerFactory.getLogger(AsyncService.class);          @Autowired &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;PhoneService&nbsp;phoneService;          /** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;发短信通知患者检查时间 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;dto&nbsp;患者信息 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;consult&nbsp;咨询信息 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ &nbsp;&nbsp;&nbsp;&nbsp;@Async &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;sendMsgToPatient(PatientDTO&nbsp;patientDTO,&nbsp;ConsultDTO&nbsp;consultDTO)&nbsp;{         // 消息内容 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;phone&nbsp;=&nbsp;patientDTO.getTelphone(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;msg&nbsp;=&nbsp;"您好，"+&nbsp;patientDTO.getName()&nbsp;+"，已成功为你预约"         +&nbsp;consultDTO.getDeviceType()&nbsp;+"检查，时间是"+&nbsp;consultDTO.getCheckDate()&nbsp;         +"，望您做好检查时间安排。就诊卡号："+&nbsp;consultDTO.getPatientId()&nbsp;         +"，检查项目："&nbsp;+&nbsp;consultDTO.getTermName();                  // 发短信 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;phoneService.sendPhoneMsg(phone,&nbsp;msg); &nbsp;&nbsp;&nbsp;&nbsp;} }</code></pre> <p>这里注意，使用public修饰符，void方法，前面限制条件已经讲过。</p> <p></p> <blockquote> <p>其次，我们要在配置类中声明@EnableAsync注解开启异步线程。</p> </blockquote> <pre><code class="language-java">@Configuration @EnableAsync public class AsyncConfiguration implements AsyncConfigurer {      // 具体实现     // ....      }</code></pre> <p></p> <blockquote> <p>最后，我们在业务方法中调用即可。</p> </blockquote> <pre><code class="language-java">public&nbsp;BusinessResult&nbsp;doBusiness(PatientDTO&nbsp;patientDTO, ConsultDTO consultDTO)&nbsp;{      // 处理业务逻辑，此处省略...     // ....          //&nbsp;异步发短信通知患者检查时间     asyncService.sendMsgToPatient(patientDTO,&nbsp;consultDTO); }</code></pre> <p>这样，这个发短信的业务就会走异步线程，哪怕有其他类似业务需要异步调用，也都可以放到AsyncService中去统一处理。</p> <p></p> <blockquote> <p>我们还要注意一点，以上方式的异步线程实际上走的是默认线程池，而默认线程池并不是推荐的，因为在大量使用过程中可能出现线程数不够导致堵塞的情况，所以我们还要进一步优化，使用自定义线程池。</p> <p>这里，我们使用阿里开发手册中推荐的ThreadPoolTaskExecutor。</p> </blockquote> <pre><code class="language-java">@Configuration @EnableAsync public class AsyncConfiguration implements AsyncConfigurer {      private final Logger log = LoggerFactory.getLogger(AsyncConfiguration.class);      @Override     @Bean(name = "taskExecutor")     public Executor getAsyncExecutor() {         log.debug("Creating Async Task Executor");         ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();         executor.setCorePoolSize(8);         executor.setMaxPoolSize(50);         executor.setQueueCapacity(1000);         executor.setThreadNamePrefix("async-Executor-");         return executor;     }      @Override     public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {         return new SimpleAsyncUncaughtExceptionHandler();     } }</code></pre> <blockquote> <p>这里，我们分别设置了核心线程数8、最大线程数50、任务队列1000，线程名称以async-Executor-开头。</p> <p>这些配置其实可以提取出来放到yml文件中，具体配置多少要结合项目使用异步线程的规模以及服务器自身的水平来判断，我们这个项目用到异步线程的地方不算太多，主要是发短信通知和订阅消息通知时，而且服务器本身是8核16G，所以这个设置是相对符合的。</p> </blockquote> <p></p> <h5 id="4统一异常管理">4、统一异常管理</h5> <blockquote> <p>统一异常管理是我着重要讲的，这次我维护的项目中在这块写的简直是难以忍受，线上排查问题很多重要的信息啥也看不到，检查代码发现明明用到了统一异常管理，但写法简直是外行水准，气的我肚子疼。</p> </blockquote> <p></p> <p>首先，我说一下规范：</p> <blockquote> <ol> <li> <p>统一异常管理后，如非必要绝不能再try...catch，如果必须try...catch请一定要log.error(e)记录日志打印堆栈信息，并且throw异常，否则该代码块出问题线上什么也看不到；</p> </li> <li> <p>统一异常管理后，接口层面校验错误时不要直接使用通用响应对象返回，比如ResultUtil.error(500, "查询xx失败")，这样会导致统一异常管理失去效能，因为这就是正常返回了一个对象，不是出现异常，所以我们应该在校验错误时直接throw new BusinessException("查询xx失败")主动抛出一个异常，这样才会被捕获到；</p> </li> <li> <p>统一异常管理后，全局异常管理类中最好使用Spring自带的ResponseEntity包装一层，保证异常时HTTP状态不是200，而是正确的异常状态，这样前端工程师才能根据HTTP状态判断接口连通性，然后再根据业务状态判断接口获取数据是否成功。</p> </li> </ol> </blockquote> <p>这里，我把项目中优化后的全局异常统一处理代码贴上来分享给大家：</p> <blockquote> <p>首先，我们自定义三个常用异常。</p> </blockquote> <p>校验参数的异常，继承运行时异常RuntimeException。</p> <pre><code class="language-java">/** * 参数不正确异常 */ public class BadArgumentException extends RuntimeException {     public BadArgumentException(){         super();     }      public BadArgumentException(String errMsg){         super(errMsg);     } }</code></pre> <p>校验权限的异常，继承运行时异常RuntimeException。</p> <pre><code class="language-java">/** * 无访问权限异常 */ public class NotAuthorityException extends RuntimeException {          public NotAuthorityException(){         super("没有访问权限。");     }       public NotAuthorityException(String errMsg){         super(errMsg);     } }</code></pre> <p>业务逻辑异常，继承运行时异常RuntimeException。</p> <pre><code class="language-java">/** * 业务逻辑异常 */ public class BusinessException extends RuntimeException {      public BusinessException(){         super();     }      public BusinessException(String errMsg){         super(errMsg);     }     public BusinessException(String errMsg,Throwable throwable){         super(errMsg,throwable);     }  }</code></pre> <p></p> <blockquote> <p>其次，我们声明一个全局异常处理类。</p> </blockquote> <pre><code class="language-java">/** * 统一异常处理 */ @RestControllerAdvice @Slf4j public class ExceptoinTranslator {      /**     * 权限异常     */     @ExceptionHandler(value = {AccessDeniedException.class,NotAuthorityException.class})     public ResponseEntity handleNoAuthorities(Exception ex){         return&nbsp;ResponseEntity.status(HttpCodeEnum.FORBIDDEN.getCode()).body(             ResultUtil.forbidden(ex.getMessage())         );     }          /**     * 参数错误异常     */     @ExceptionHandler(value = BadArgumentException.class)     public ResponseEntity handleBadArgument(Exception ex){         return&nbsp;ResponseEntity.status(HttpStatus.BAD_REQUEST.value()).body(             ResultUtil.custom(HttpStatus.BAD_REQUEST.value(), ex.getMessage())         );     }          /**     * 接口参数校验异常     */     @ExceptionHandler(value = MethodArgumentNotValidException.class)     public ResponseEntity handleArguNotValid(MethodArgumentNotValidException ex){         FieldError fieldError=ex.getBindingResult().getFieldErrors().get(0);         String msg = !StringUtils.isEmpty(fieldError.getDefaultMessage()) ? fieldError.getDefaultMessage():"参数不合法";         return&nbsp;ResponseEntity.status(HttpStatus.BAD_REQUEST.value()).body(             ResultUtil.custom(HttpStatus.BAD_REQUEST.value(), msg)         );     }          /**     * 参数不合法异常     */     @ExceptionHandler(value = ConstraintViolationException.class)     public ResponseEntity handleConstraintViolation(ConstraintViolationException ex){         String err=ex.getMessage();         Set&lt;ConstraintViolation&lt;?&gt;&gt; set=ex.getConstraintViolations();         if(!set.isEmpty()){            err= set.iterator().next().getMessage();         }         String msg = StringUtils.isEmpty(err)?"参数不合法":err;         return&nbsp;ResponseEntity.status(HttpStatus.BAD_REQUEST.value()).body(             ResultUtil.custom(HttpStatus.BAD_REQUEST.value(), msg)         );     }          /**     * 参数不合法异常     */     @ExceptionHandler(value = {IllegalArgumentException.class})     public ResponseEntity handleIllegalArgu(Exception ex){         String err=ex.getMessage();         String msg = StringUtils.isEmpty(err)?"参数不合法":err;         return&nbsp;ResponseEntity.status(HttpStatus.BAD_REQUEST.value()).body(             ResultUtil.custom(HttpStatus.BAD_REQUEST.value(), msg)         );     }      /**     * 业务逻辑处理异常，也是我们最常用的主动抛出的异常。     */     @ExceptionHandler(value = BusinessException.class)     public ResponseEntity handleBadBusiness(Exception ex){         return&nbsp;ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR.value()).body(             ResultUtil.custom(HttpStatus.INTERNAL_SERVER_ERROR.value(), ex.getMessage())         );     }      /**     * HTTP请求方法不支持异常     */     @ExceptionHandler(value = HttpRequestMethodNotSupportedException.class)     public ResponseEntity methodNotSupportException(Exception ex){         return&nbsp;ResponseEntity.status(HttpStatus.METHOD_NOT_ALLOWED.value()).body(             ResultUtil.custom(HttpStatus.METHOD_NOT_ALLOWED.value(), "请求方法不支持！")         );     }      /**     * 除上面以外所有其他异常的处理会进入这里     */     @ExceptionHandler(value = Exception.class)     public ResponseEntity handleException(Exception ex){     	log.error("[ExceptoinTranslator]&gt;&gt;&gt;&gt; 全局异常: ", ex);         return&nbsp;ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR.value()).body(             ResultUtil.custom(HttpStatus.INTERNAL_SERVER_ERROR.value(), "发生内部错误！")         );     }      }</code></pre> <p>上面这个全局异常处理，包含了项目最有可能出现的：几种参数异常、权限异常、HTTP方法不支持异常、自定义业务异常、其他异常，基本上够用了，如果还想更细致一点还可以自定义其他的异常放进来。</p> <blockquote> <p>这里要关注的两点是：</p> <p>1、我们统一使用Spring的ResponseEntity进行了外层包装，而不是直接使用自定义响应对象ResultUtil来返回，这样保证了我们接口返回的业务状态和接口本身的HTTP状态是一致的，前端就可以判断接口连通性了，如果不明白区别，使用一下Postman就可以看到右上角的HTTP状态了，你使用自定义响应对象返回时永远都是200；</p> <p>2、最后其他所有异常Exception.class的捕获，务必进行log.error(ex)日志记录，这样线上排查时才能看到具体的堆栈信息。</p> </blockquote> <p></p> <h3 id="总结">总结</h3> <blockquote> <ol> <li> <p>合理利用stream分组提高查询效率；</p> </li> <li> <p>stream排序避免踩坑；</p> </li> <li> <p>异步线程最佳用法；</p> </li> <li> <p>统一异常管理最佳使用方式。</p> </li> </ol> </blockquote> <p></p> <hr/> <p>本人原创文章纯手打，大多来源于工作，觉得有一滴滴帮助就一键四连吧！</p> <p>点个关注，不再迷路！</p> <p>点个收藏，不再彷徨！</p> <p>点个推荐，梦想实现！</p> <p>点个赞，天天赚！</p> <hr/> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2551.htm">SpringBoot项目框架下ThreadPoolExecutor线程池+Queue缓冲队列实现高并发中进行下单业务</a></p>
                                                        <p>下一个：<a href="/html/category/article-2553.htm">/usr/local/kafka/kafka_2.13-2.7.1/bin/kafka-run-class.sh: 第 318 行:exec: java: 未找到 问题已解决</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2816.htm" title="SpringBoot/Cloud项目-前台上传图片文件，Java转成Base64保存到数据库完整代码">SpringBoot/Cloud项目-前台上传图片文件，Java转成Base64保存到数据库完整代码</a></li>
                        <li class="py-2"><a href="/html/category/article-2775.htm" title="springboot整合Dubbo与Feign的实现 (无注册中心)_java">springboot整合Dubbo与Feign的实现 (无注册中心)_java</a></li>
                        <li class="py-2"><a href="/html/category/article-3140.htm" title="java 退出_JVM安全退出（如何优雅的关闭java服务）">java 退出_JVM安全退出（如何优雅的关闭java服务）</a></li>
                        <li class="py-2"><a href="/html/category/article-2799.htm" title="整理了25个Pandas实用技巧（上）">整理了25个Pandas实用技巧（上）</a></li>
                        <li class="py-2"><a href="/html/category/article-2813.htm" title="FreeRTOS实时操作系统的任务通知方法_操作系统">FreeRTOS实时操作系统的任务通知方法_操作系统</a></li>
                        <li class="py-2"><a href="/html/category/article-2807.htm" title="vue生命周期 钩子函数">vue生命周期 钩子函数</a></li>
                        <li class="py-2"><a href="/html/category/article-2811.htm" title="LevelDB 学习笔记5：版本控制_在线工具">LevelDB 学习笔记5：版本控制_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-2820.htm" title="OpenSSL3.0.5安装">OpenSSL3.0.5安装</a></li>
                        <li class="py-2"><a href="/html/category/article-2789.htm" title="在日期和时间部分之间使用&#8217;T&#8217;或&#8217;Space&#8217;以外的任何其他字符返回的MySQL返回值是什么？">在日期和时间部分之间使用&#8217;T&#8217;或&#8217;Space&#8217;以外的任何其他字符返回的MySQL返回值是什么？</a></li>
                        <li class="py-2"><a href="/html/category/article-3442.htm" title="C#/VB.NET 在Excel单元格中应用多种字体格式_在线工具">C#/VB.NET 在Excel单元格中应用多种字体格式_在线工具</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>