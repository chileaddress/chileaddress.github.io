<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2791.htm" />
    <title>FreeRTOS进阶之系统延时完全解析_操作系统_ - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>FreeRTOS进阶之系统延时完全解析_操作系统_</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li><a href="#_label0" rel="nofollow">1. 相对延时函数vTaskDelay()</a></li> <li><a href="#_label1" rel="nofollow">2. 绝对延时函数vTaskDelayUntil()</a></li> <li><a href="#_label2" rel="nofollow">3.小结</a></li> </ul> </div> <p>FreeRTOS提供了两个系统延时函数：相对延时函数vTaskDelay()和绝对延时函数</p> <p>vTaskDelayUntil()。相对延时是指每次延时都是从任务执行函数vTaskDelay()开始，延时指定的时间结束；</p> <p>绝对延时是指每隔指定的时间，执行一次调用vTaskDelayUntil()函数的任务。换句话说：任务以固定的频率执行。</p> <p>在《<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.jb51.net/article/243522.htm"   target="_blank" rel="nofollow">FreeRTOS任务控制</a>》一文中，已经介绍了这两个API函数的原型和用法，本文将分析这两个函数的实现原理。</p> <p class="maodian"><a name="_label0" rel="nofollow"></a></p> <h2>1. 相对延时函数vTaskDelay()</h2> <p>考虑下面的任务，任务A在执行任务主体代码后，调用相对延时函数vTaskDelay()进入阻塞状态。系统中除了任务A外，还有其它任务，但是任务A的优先级最高。</p> <div class="ay1code"> <pre class="brush:cpp;">void vTaskA( void * pvParameters )     {         /* 阻塞500ms. 注:宏pdMS_TO_TICKS用于将毫秒转成节拍数,FreeRTOS V8.1.0及          以上版本才有这个宏,如果使用低版本,可以使用 500 / portTICK_RATE_MS */         const portTickType xDelay = pdMS_TO_TICKS(500);              for( ;; )         {             //  ...           //  这里为任务主体代码           //  ...                     /* 调用系统延时函数,阻塞500ms */           vTaskDelay( xDelay );         }    }  </pre> </div> <p>对于这样一个任务，执行过程如图1-1所示。当任务A获取CPU使用权后，先执行任务A的主体代码，之后调用系统延时函数vTaskDelay()进入阻塞状态。任务A进入阻塞后，其它任务得以执行。</p> <p>FreeRTOS内核会周期性的检查任务A的阻塞是否达到，如果阻塞时间达到，则将任务A设置为就绪状态。由于任务A的优先级最高，会抢占CPU，再次执行任务主体代码，不断循环。</p> <p>从图1-1可以看出，任务A每次延时都是从调用延时函数vTaskDelay()开始算起的，延时是相对于这一时刻开始的，所以叫做相对延时函数。</p> <p>从图1-1还可以看出，如果执行任务A的过程中发生中断，那么任务A执行的周期就会变长，所以使用相对延时函数vTaskDelay()，不能周期性的执行任务A。</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220412/5f8d73f823c767ce4c68266170084f6f.jpg"></p> <p>图1-1:相对延时函数执行示意图</p> <p>我们来看一下源码。</p> <div class="ay1code"> <pre class="brush:cpp;">void vTaskDelay( const TickType_t xTicksToDelay )  {  BaseType_t xAlreadyYielded = pdFALSE;      /* 如果延时时间为0,则不会将当前任务加入延时列表 */      if( xTicksToDelay &gt; ( TickType_t ) 0U )      {          vTaskSuspendAll();          {              /* 将当前任务从就绪列表中移除,并根据当前系统节拍计数器值计算唤醒时间,然后将任务加入延时列表 */              prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );          }          xAlreadyYielded = xTaskResumeAll();      }      /* 强制执行一次上下文切换*/      if( xAlreadyYielded == pdFALSE )      {          portYIELD_WITHIN_API();      }  }</pre> </div> <p>如果延时大于0，则会将当前任务从就绪列表删除，然后加入到延时列表。是调用函数prvAddCurrentTaskToDelayedList()完成这一过程的。我们在前面一系列博文中多次提到，tasks.c中定义了很多局部静态变量，其中有一个变量xTickCount定义如下所示：</p> <div class="ay1code"> <pre class="brush:cpp;">static volatile TickType_t xTickCount = ( TickType_t ) 0U;</pre> </div> <p>这个变量用来计数，记录系统节拍中断的次数，它在启动调度器时被清零，在每次系统节拍时钟发生中断后加1。相对延时函数会使用到这个变量，xTickCount表示了当前的系统节拍中断次数，这个值加上参数规定的延时时间（以系统节拍数表示）xTicksToDelay，就是下次唤醒任务的时间，xTickCount+ xTicksToDelay会被记录到任务TCB中，随着任务一起被挂接到延时列表。</p> <p>我们知道变量xTickCount是TickType_t类型的，它也会溢出。在32位架构中，当xTicksToDelay达到4294967295后再增加，就会溢出变成0。为了解决xTickCount溢出问题，FreeRTOS使用了两个延时列表：xDelayedTaskList1和xDelayedTaskList2，并使用两个列表指针类型变量pxDelayedTaskList和pxOverflowDelayedTaskList分别指向上面的延时列表1和延时列表2（在创建任务时将延时列表指针指向延时列表）。顺便说一下，上面的两个延时列表指针变量和两个延时列表变量都是在tasks.c中定义的静态局部变量。</p> <p>如果内核判断出xTickCount+ xTicksToDelay溢出，就将当前任务挂接到列表指针pxOverflowDelayedTaskList指向的列表中，否则就挂接到列表指针pxDelayedTaskList指向的列表中。</p> <p>每次系统节拍时钟中断，中断服务函数都会检查这两个延时列表，查看延时的任务是否到期，如果时间到期，则将任务从延时列表中删除，重新加入就绪列表。如果新加入就绪列表的任务优先级大于当前任务，则会触发一次上下文切换。</p> <p class="maodian"><a name="_label1" rel="nofollow"></a></p> <h2>2. 绝对延时函数vTaskDelayUntil()</h2> <p>考虑下面的任务，任务B首先调用绝对延时函数vTaskDelayUntil ()进入阻塞状态，阻塞时间到达后，执行任务主体代码。系统中除了任务B外，还有其它任务，但是任务B的优先级最高。</p> <div class="ay1code"> <pre class="brush:cpp;">void vTaskB( void * pvParameters )    {        static portTickType xLastWakeTime;        const portTickType xFrequency = pdMS_TO_TICKS(500);        // 使用当前时间初始化变量xLastWakeTime ,注意这和vTaskDelay()函数不同       xLastWakeTime = xTaskGetTickCount();        for( ;; )        {            /* 调用系统延时函数,周期性阻塞500ms */                  vTaskDelayUntil( &amp;xLastWakeTime,xFrequency );             //  ...           //  这里为任务主体代码,周期性执行.注意这和vTaskDelay()函数也不同           //  ...          }    }  </pre> </div> <p>对于这样一个任务，执行过程如图2-1所示。当任务B获取CPU使用权后，先调用系统延时函数vTaskDelayUntil()使任务进入阻塞状态。任务B进入阻塞后，其它任务得以执行。FreeRTOS内核会周期性的检查任务A的阻塞是否达到，如果阻塞时间达到，则将任务A设置为就绪状态。</p> <p>由于任务B的优先级最高，会抢占CPU，接下来执行任务主体代码。任务主体代码执行完毕后，会继续调用系统延时函数vTaskDelayUntil()使任务进入阻塞状态，周而复始。</p> <p>从图2-1可以看出，从调用函数vTaskDelayUntil()开始，每隔固定+<br />-周期，任务B的主体代码就会被执行一次，即使任务B在执行过程中发生中断，也不会影响这个周期性，只是会缩短其它任务的执行时间！所以这个函数被称为绝对延时函数，它可以用于周期性的执行任务A的主体代码。</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220412/a91c2a0f77ff3e331a01eb3c1629dae9.jpg"></p> <p>图2-1：绝对延时函数执行示意图</p> <p>函数vTaskDelayUntil()是如何做到周期性的呢，我们来看一下源码。</p> <div class="ay1code"> <pre class="brush:cpp;">void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )  {  TickType_t xTimeToWake;  BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;      vTaskSuspendAll();      {          /* 保存系统节拍中断次数计数器 */          const TickType_t xConstTickCount = xTickCount;          /* 计算任务下次唤醒时间(以系统节拍中断次数表示)   */          xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;          /* *pxPreviousWakeTime中保存的是上次唤醒时间,唤醒后需要一定时间执行任务主体代码,如果上次唤醒时间大于当前时间,说明节拍计数器溢出了 */          if( xConstTickCount &lt; *pxPreviousWakeTime )          {              /*只有当周期性延时时间大于任务主体代码执行时间,才会将任务挂接到延时列表.*/              if( ( xTimeToWake &lt; *pxPreviousWakeTime ) &amp;&amp; ( xTimeToWake &gt; xConstTickCount ) )              {                  xShouldDelay = pdTRUE;              }          }          else          {              /* 也都是保证周期性延时时间大于任务主体代码执行时间 */              if( ( xTimeToWake &lt; *pxPreviousWakeTime ) || ( xTimeToWake &gt; xConstTickCount ) )              {                  xShouldDelay = pdTRUE;              }          }          /* 更新唤醒时间,为下一次调用本函数做准备. */          *pxPreviousWakeTime = xTimeToWake;             if( xShouldDelay != pdFALSE )          {              /* 将本任务加入延时列表,注意阻塞时间并不是以当前时间为参考,因此减去了当前系统节拍中断计数器值*/              prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );          }      }      xAlreadyYielded = xTaskResumeAll();         /* 强制执行一次上下文切换 */      if( xAlreadyYielded == pdFALSE )      {          portYIELD_WITHIN_API();      }  }</pre> </div> <p>与相对延时函数vTaskDelay不同，本函数增加了一个参数pxPreviousWakeTime用于指向一个变量，变量保存上次任务解除阻塞的时间。这个变量在任务开始时必须被设置成当前系统节拍中断次数（见上文的任务B举例），此后函数vTaskDelayUntil()在内部自动更新这个变量。</p> <p>由于变量xTickCount可能会溢出，所以程序必须检测各种溢出情况，并且要保证延时周期不得小于任务主体代码执行时间。这很好理解，不可能出现每5毫秒执行一个需要20毫秒才能执行完的任务。<br />如果我们以横坐标表示变量xTickCount的范围，则横坐标左端为0，右端为变量xTickCount所能表示的最大值。在如图2-2所示的三种情况下，才可以将任务加入延时列表。</p> <p>图2-2中</p> <blockquote> <p>*pxPreviousWakeTime和xTimeToWake之间表示任务周期性延时时间，</p> <p>*pxPreviousWakeTime和xConstTickCount之间表示任务B主体代码执行时间。</p> </blockquote> <p>图2-2中</p> <p>第一种情况处理系统节拍中断计数器（xConstTickCount）和唤醒时间计数器（xTimeToWake）溢出情况；</p> <p>第二种情况处理唤醒时间计数器（xTimeToWake）溢出情况</p> <p>第三种情况处理常规无溢出的情况。</p> <p>从图中可以看出，不管是溢出还是无溢出，都要求在下次唤醒任务之前，当前任务主体代码必须被执行完。表现在图2-2中，就是变量xTimeToWake总是大于变量xConstTickCount（每溢出一次的话相当于加上一次最大值Max）。</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220412/0213b12aa25c6658b9bad285c81b2b04.jpg"></p> <p>图2-2：将任务加入延时列表的三种情况</p> <p>计算的唤醒时间合法后，就将当前任务加入延时列表，同样延时列表也有两个。每次系统节拍中断，中断服务函数都会检查这两个延时列表，查看延时的任务是否到期，如果时间到期，则将任务从延时列表中删除，重新加入就绪列表。如果新加入就绪列表的任务优先级大于当前任务，则会触发一次上下文切换。</p> <p class="maodian"><a name="_label2" rel="nofollow"></a></p> <h2>3.小结</h2> <p>上面的例子中，调用系统延时的任务都是最高优先级，这是为了便于分析而特意为之的，实际上的任务可不一定能设置为最高优先级。对于相对延时，如果任务不是最高优先级，则任务执行周期更不可测，这个问题不大，我们本来也不会使用它作为精确延时；</p> <p>对于绝对延时函数，如果任务不是最高优先级，则仍然能周期性的将任务解除阻塞，但是解除阻塞的任务不一定能获得CPU权限，因此任务主体代码也不会总是精确周期性执行。</p> <p>如果要想精确周期性执行某个任务，可以使用系统节拍钩子函数vApplicationTickHook()，它在系统节拍中断服务函数中被调用，因此这个函数中的代码必须简洁。</p> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2790.htm">JS 删除数组中某个元素的几种方式</a></p>
                                                        <p>下一个：<a href="/html/category/article-2792.htm">toString() 和 new String()用法区别</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2791.htm" title="FreeRTOS进阶之系统延时完全解析_操作系统_">FreeRTOS进阶之系统延时完全解析_操作系统_</a></li>
                        <li class="py-2"><a href="/html/category/article-3774.htm" title="报错解决Module build failed (from ./node_modules/babel-loader/lib/index.js):">报错解决Module build failed (from ./node_modules/babel-loader/lib/index.js):</a></li>
                        <li class="py-2"><a href="/html/category/article-2815.htm" title="编译实战 | 手摸手教你在Windows环境下运行Redis6.x">编译实战 | 手摸手教你在Windows环境下运行Redis6.x</a></li>
                        <li class="py-2"><a href="/html/category/article-2778.htm" title="IDEA中配置maven环境">IDEA中配置maven环境</a></li>
                        <li class="py-2"><a href="/html/category/article-2817.htm" title="uni-app 63egg.js后端用户上线和下线深度剖析">uni-app 63egg.js后端用户上线和下线深度剖析</a></li>
                        <li class="py-2"><a href="/html/category/article-2782.htm" title="Vue的v-for和v-bind实现列表颜色切换">Vue的v-for和v-bind实现列表颜色切换</a></li>
                        <li class="py-2"><a href="/html/category/article-2806.htm" title="存储用户密码应该使用什么加密算法">存储用户密码应该使用什么加密算法</a></li>
                        <li class="py-2"><a href="/html/category/article-2801.htm" title="手写事件发布订阅框架">手写事件发布订阅框架</a></li>
                        <li class="py-2"><a href="/html/category/article-2792.htm" title="toString() 和 new String()用法区别">toString() 和 new String()用法区别</a></li>
                        <li class="py-2"><a href="/html/category/article-2789.htm" title="在日期和时间部分之间使用&#8217;T&#8217;或&#8217;Space&#8217;以外的任何其他字符返回的MySQL返回值是什么？">在日期和时间部分之间使用&#8217;T&#8217;或&#8217;Space&#8217;以外的任何其他字符返回的MySQL返回值是什么？</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">2</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>