<!DOCTYPE HTML>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://chileaddress.github.io/html/category/article-2547.htm" />
    <title>设计模式学习笔记桥接模式及其应用 - Chile Address</title>
        <link href="/assets/addons/xcblog/css/chileaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/addons/xcblog/css/chileaddress/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/chileaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/jquery-1.11.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/chileaddress/bootstrap.min.js"></script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e311768eec030d1b95bf25adcc77f433";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Chile Address</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/html/category/">文章分类</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/html/category/">文章分类</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>设计模式学习笔记桥接模式及其应用</h1>
                        </div>
                        <div class="about-bottom">
                              				  				  				<p>桥接（Bridge）模式是指将抽象部分与实现部分相分离，使它们都可以独立的发生变化。</p> <h2 id="一桥接模式介绍">一、桥接模式介绍</h2> <p>我们知道，抽象部分一般与实现部分连接有两种方式：继承和实现。那么如何将其解耦分离，桥接模式提供一种方式，也就是将强关联转为弱关联，将继承转换为组合关系。如下图所示，取消两者的继承关系，改用组合关系：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/4bf53d4fec0ed0b4a79395feef675558.jpg" alt="设计模式学习笔记桥接模式及其应用"></p> <h3 id="11-桥接模式的结构">1.1 桥接模式的结构</h3> <p>我们可以看看桥接模式是怎么解耦，利用组合连接抽象和实现部分，如下所示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/d34c1492bb4ab48d3e8839c4e7c18913.jpg" alt="设计模式学习笔记桥接模式及其应用"></p> <p>其结构中包含如下角色：</p> <ul> <li><code>Abstraction</code>：抽象化角色，定义抽象类，包含一个对实现化对象的引用（组合）</li> <li><code>RefinedAbstraction</code>：扩展抽象化角色，实现抽象化角色的子类，由此通过组合关系调用实现化角色中的业务方法</li> <li><code>Implementor</code>：实现化角色的接口，供扩展抽象化角色调用</li> <li><code>ImplementorA、ImplementorB</code>：实现化角色的具体实现</li> </ul> <h3 id="12-桥接模式的实现">1.2 桥接模式的实现</h3> <p>我们可以根据上面的UML图实现对应的代码：</p> <pre><code class="language-java">//客户端类 public class Client {     public static void main(String[] args) {         Implementor imple = new ImplementorA();         Abstraction abs = new RefinedAbstraction(imple);         abs.Operation();     } } //实现化角色 interface Implementor {     public void OperationImpl(); } //具体的实现化角色 class ImplementorA implements Implementor {     public void OperationImpl() {         System.out.println("我是具体实现化角色A");     } } class ImplementorB implements Implementor {     public void OperationImpl() {         System.out.println("我是具体实现化角色B");     } } //抽象化角色 abstract class Abstraction {     protected Implementor imple;          protected Abstraction(Implementor imple) {         this.imple = imple;     }          public abstract void Operation(); } //扩展抽象化角色 class RefinedAbstraction extends Abstraction {     protected RefinedAbstraction(Implementor imple) {         super(imple);     }          public void Operation() {         System.out.println("扩展抽象化角色被访问");         imple.OperationImpl();     } }</code></pre> <p>实现结果：</p> <pre><code>扩展抽象化角色被访问 我是具体实现化角色A</code></pre> <h2 id="二桥接模式的应用场景">二、桥接模式的应用场景</h2> <h3 id="21-jdbc-驱动器">2.1 JDBC 驱动器</h3> <p>JDBC为所有的关系型数据库提供一个通用的标准，这就是一个桥接模式的典型应用。我们先回顾一下JDBC的使用，用JDBC连接MySQL数据库主要分为这样几步：</p> <pre><code class="language-java">//1.加载MySQL驱动注入到DriverManager Class.forName("com.mysql.cj.jdbc.Driver"); //2.提供JDBC连接的URL、用户名和密码 String url = "jdbc:mysql://localhost:3306/test_db?"; String username = "root"; String password = "root"; //3.创建数据库的连接 Connection connection = DriverManager.getConnection(url, username, password); //4.创建statement实例 Statement statement = connection.createStatement(); //5.执行SQL语句 String query = "select * from test";  //查询语句，也可以换成CRUD的其他语句 ResultSet resultSet = statement.executeQuery(query); //6.关闭连接对象 connection.close();</code></pre> <p>我们一步步来看，先看步骤1：</p> <pre><code class="language-java">Class.forName("com.mysql.cj.jdbc.Driver");</code></pre> <p>查看对应的<code>com.mysql.cj.jdbc.Driver</code>路径下的源码：</p> <pre><code class="language-java">package com.mysql.cj.jdbc;  import java.sql.DriverManager; import java.sql.SQLException;  public class Driver extends NonRegisteringDriver implements java.sql.Driver {     public Driver() throws SQLException {     }      static {         try {             DriverManager.registerDriver(new Driver());         } catch (SQLException var1) {             throw new RuntimeException("Can't register driver!");         }     } }</code></pre> <p>是通过静态方法调用<code>registerDriver()</code>方法来将MySQL驱动注入到<code>DriverManager</code>，<code>registerDriver()</code>方法具体如下：</p> <pre><code class="language-java">public static synchronized void registerDriver(java.sql.Driver driver)     throws SQLException { 	//直接调用下面的同名静态方法     registerDriver(driver, null); }  public static synchronized void registerDriver(java.sql.Driver driver,DriverAction da)throws SQLException {     /* registeredDrivers是一个list,用DriverInfo实例封装Driver */     if(driver != null) {         registeredDrivers.addIfAbsent(new DriverInfo(driver, da));     } else {         // This is for compatibility with the original DriverManager         throw new NullPointerException();     }     println("registerDriver: " + driver);  }</code></pre> <p><code>registeredDrivers</code>静态变量其实是一个list：</p> <pre><code class="language-java">public class DriverManager {     // List of registered JDBC drivers     private final static CopyOnWriteArrayList&lt;DriverInfo&gt; registeredDrivers = new CopyOnWriteArrayList&lt;&gt;();     //... }</code></pre> <p>而<code>DriverInfo</code>类中封装了<code>java.sql.Driver</code>接口:</p> <pre><code class="language-java">class DriverInfo {      final Driver driver;     DriverAction da;     DriverInfo(Driver driver, DriverAction action) {         this.driver = driver;         da = action;     }     //... }</code></pre> <p>再看步骤2、3，重点是步骤3</p> <pre><code class="language-java">Connection connection = DriverManager.getConnection(url, username, password);</code></pre> <p><code>Connection</code>接口是和特定数据库的连接会话，不同的数据库的连接会话都不相同：</p> <pre><code class="language-java">public interface Connection  extends Wrapper, AutoCloseable {      Statement createStatement() throws SQLException;     //... }</code></pre> <p>是通过<code>DriverManager</code>中的<code>getConnection</code>方法，从<code>registeredDrivers</code>进行选择对应数据库驱动下的连接实例：</p> <pre><code class="language-java">public static Connection getConnection(String url,String user, String password) throws SQLException {     java.util.Properties info = new java.util.Properties();      if (user != null) {         info.put("user", user);     }     if (password != null) {         info.put("password", password);     }      return (getConnection(url, info, Reflection.getCallerClass())); } // 实际上调用的是下面的静态方法getConnection //  Worker method called by the public getConnection() methods. private static Connection getConnection(     String url, java.util.Properties info, Class&lt;?&gt; caller) throws SQLException {     /*          * When callerCl is null, we should check the application's          * (which is invoking this class indirectly)          * classloader, so that the JDBC driver class outside rt.jar          * can be loaded from here.          */     ClassLoader callerCL = caller != null ? caller.getClassLoader() : null;     synchronized(DriverManager.class) {         // synchronize loading of the correct classloader.         if (callerCL == null) {             callerCL = Thread.currentThread().getContextClassLoader();         }     }      if(url == null) {         throw new SQLException("The url cannot be null", "08001");     }      println("DriverManager.getConnection(\"" + url + "\")");      // Walk through the loaded registeredDrivers attempting to make a connection.     // Remember the first exception that gets raised so we can reraise it.     SQLException reason = null;      for(DriverInfo aDriver : registeredDrivers) {         // If the caller does not have permission to load the driver then         // skip it.         if(isDriverAllowed(aDriver.driver, callerCL)) {             try {                 println("    trying " + aDriver.driver.getClass().getName());                 Connection con = aDriver.driver.connect(url, info);                 if (con != null) {                     // Success!                     println("getConnection returning " + aDriver.driver.getClass().getName());                     return (con);                 }             } catch (SQLException ex) {                 if (reason == null) {                     reason = ex;                 }             }          } else {             println("    skipping: " + aDriver.getClass().getName());         }     }      // if we got here nobody could connect.     if (reason != null)    {         println("getConnection failed: " + reason);         throw reason;     }      println("getConnection: no suitable driver found for "+ url);     throw new SQLException("No suitable driver found for "+ url, "08001"); }</code></pre> <p>在<code>Connection</code>接口的具体实现部分，MySQL的连接是通过两层实现完成抽象部分的实现：</p> <pre><code class="language-java">public class ConnectionImpl implements JdbcConnection, SessionEventListener, Serializable {     private static final long serialVersionUID = 4009476458425101761L;     private static final SQLPermission SET_NETWORK_TIMEOUT_PERM = new SQLPermission("setNetworkTimeout");     //... } public interface JdbcConnection extends Connection, MysqlConnection, TransactionEventHandler {     JdbcPropertySet getPropertySet();      void changeUser(String var1, String var2) throws SQLException;     //... }</code></pre> <p>综上我们可以画出对应的类图：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/cde6328eeb41ab8605a8ccbaca316555.jpg" alt="设计模式学习笔记桥接模式及其应用"></p> <h2 id="参考资料">参考资料</h2> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://c.biancheng.net/view/1364.html"  target="_blank" rel="nofollow">http://c.biancheng.net/view/1364.html</a></p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://jishuin.proginn.com/p/763bfbd68968"  target="_blank" rel="nofollow">https://jishuin.proginn.com/p/763bfbd68968</a></p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/kuluo/p/13038076.html"  target="_blank" rel="nofollow">https://www.cnblogs.com/kuluo/p/13038076.html</a></p> 			                            <div class="clearfix"> </div>
                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>下一个：<a href="/html/category/article-2548.htm">vue.js实现标签页切换</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2807.htm" title="vue生命周期 钩子函数">vue生命周期 钩子函数</a></li>
                        <li class="py-2"><a href="/html/category/article-4497.htm" title="动物疫苗工艺有哪些类型（动物疫苗工艺有哪些类型的）">动物疫苗工艺有哪些类型（动物疫苗工艺有哪些类型的）</a></li>
                        <li class="py-2"><a href="/html/category/article-3140.htm" title="java 退出_JVM安全退出（如何优雅的关闭java服务）">java 退出_JVM安全退出（如何优雅的关闭java服务）</a></li>
                        <li class="py-2"><a href="/html/category/article-2819.htm" title="SpringBoot配置多个数据库源">SpringBoot配置多个数据库源</a></li>
                        <li class="py-2"><a href="/html/category/article-2811.htm" title="LevelDB 学习笔记5：版本控制_在线工具">LevelDB 学习笔记5：版本控制_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-3748.htm" title="vue路由跳转router-link清除历史记录的三种方式(总结)_vue.js_">vue路由跳转router-link清除历史记录的三种方式(总结)_vue.js_</a></li>
                        <li class="py-2"><a href="/html/category/article-4114.htm" title="实现一个通讯录，可以用来存储1000个人的信息，每个人的信息包括：姓名，年龄，性别，电话，住址">实现一个通讯录，可以用来存储1000个人的信息，每个人的信息包括：姓名，年龄，性别，电话，住址</a></li>
                        <li class="py-2"><a href="/html/category/article-4142.htm" title="嵌入式开发：执行最坏情况堆栈分析的3种方法">嵌入式开发：执行最坏情况堆栈分析的3种方法</a></li>
                        <li class="py-2"><a href="/html/category/article-2820.htm" title="OpenSSL3.0.5安装">OpenSSL3.0.5安装</a></li>
                        <li class="py-2"><a href="/html/category/article-3773.htm" title="如何使用Iintelij IDEA将maven项目打包成war包，并将war包放到tomcat上运行">如何使用Iintelij IDEA将maven项目打包成war包，并将war包放到tomcat上运行</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">20</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                <p>
                    Chile Address 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>